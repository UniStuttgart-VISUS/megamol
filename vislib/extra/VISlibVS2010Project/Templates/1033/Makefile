# Makefile [!output CURRENT_DATE]
#
# Copyright (C) 2011 by Christoph Müller. Alle Rechte vorbehalten.
# Copyright (C) 2008 by Visualisierungsinstitut der Universität Stuttgart.
# Alle Rechte vorbehalten.
# Copyright (C) 2008 by Christoph Müller. Alle Rechte vorbehalten.
#
#
# THIS FILE HAS BEEN GENERATED BY THE [!output WIZARD_DIALOG_TITLE] WIZARD!
#

# Applications
AR = ar
CPP = g++
LINK = g++
MAKE = make
SHELL = /bin/bash


# Include VISlib properties
include [!output LIN_PROPS_FILENAME]


# Target name
TargetName := [!output PROJECT_NAME]

# Output directory
OutDir := ./$(VISlibPlatform)

#Intermediate directory
IntDir := $(OutDir)

# Output subdirectory name for Release files
ReleaseDir := Release

# Output subdirectory for Debug files
DebugDir := Debug


# Additional include directories
IncludeDirs := .

# Additional system include directories
SystemIncludeDirs := /usr/include/g++ /usr/include/g++/bits /usr/include/g++/ext

# Additional compiler flags
CompilerFlags := -fPIC
CompilerFlagsDebug := -ggdb
CompilerFlagsRelease := -O3 -g0

# Additional linker flags
LinkerFlags := -L/usr/X11R6/lib -lm [!output LIN_ADDITIONAL_LIBRARIES]
LinkerFlagsDebug :=
LinkerFlagsRelease :=


# Input directory
InputDir := .

[!if LIN_USE_GLOBBING]
# Files to be excluded from build
ExcludeFromBuild :=
[!else]
# Object files to be generated
Objects = [!output PROJECT_NAME].o
[!endif]


#
# USE VARIABLES ABOVE TO MODIFY COMPILER AND LINKER FLAGS AS WELL AS IN- AND OUTPUT!
#
CPPFLAGS := $(CompilerFlags) $(addprefix -I, $(IncludeDirs)) $(addprefix -I, $(VISlibIncludeDirs)) $(addprefix -isystem, $(SystemIncludeDirs))
CPPFLAGS_DEBUG := $(CPPFLAGS) $(CompilerFlagsDebug) -DDEBUG -D_DEBUG -DLIN$(VISlibBits)
CPPFLAGS_RELEASE := $(CPPFLAGS) $(CompilerFlagsRelease) -DNDEBUG -D_NDEBUG -DLIN$(VISlibBits)

LDFLAGS := $(LinkerFlags) -L$(VISlibLibDir)
LDFLAGS_DEBUG := $(LDFLAGS) $(addprefix -l, $(VISlibsDebug)) $(LinkerFlagsDebug)
LDFLAGS_RELEASE := $(LDFLAGS) $(addprefix -l, $(VISlibsRelease)) $(LinkerFlagsRelease) 

[!if LIN_USE_GLOBBING]
CPPSRCS := $(filter-out $(ExcludeFromBuild), $(wildcard $(InputDir)/*.cpp))

CPPOBJS := $(patsubst %.cpp, %.o, $(notdir $(CPPSRCS)))
[!else]
CPPSRCS := $(patsubst %.o, %.cpp, $(Objects))

CPPOBJS := $(Objects)
[!endif]
CPPOBJS_DEBUG := $(addprefix $(IntDir)/$(DebugDir)/, $(notdir $(CPPOBJS)))
CPPOBJS_RELEASE := $(addprefix $(IntDir)/$(ReleaseDir)/, $(notdir $(CPPOBJS)))
CPPOBJS_ALL := $(CPPOBJS_DEBUG) $(CPPOBJS_RELEASE)

CPPDEPS := $(notdir $(patsubst %.cpp, %.d, $(CPPSRCS)))
CPPDEPS_DEBUG := $(addprefix $(IntDir)/$(DebugDir)/, $(CPPDEPS))
CPPDEPS_RELEASE := $(addprefix $(IntDir)/$(ReleaseDir)/, $(CPPDEPS))
CPPDEPS_ALL := $(CPPDEPS_DEBUG) $(CPPDEPS_RELEASE)

#
# RULES
#
all: $(TargetName)Debug $(TargetName)Release


# Rules for final binaries:
$(TargetName)Debug: $(OutDir)/$(DebugDir)/$(TargetName)
$(OutDir)/$(DebugDir)/$(TargetName): $(IntDir)/$(DebugDir)/$(TargetName)
	@mkdir -p $(dir $@)
	if [ ! $@ -ef $< ]; then cp $< $@; fi

$(TargetName)Release: $(OutDir)/$(ReleaseDir)/$(TargetName)
$(OutDir)/$(ReleaseDir)/$(TargetName): $(IntDir)/$(ReleaseDir)/$(TargetName)
	@mkdir -p $(dir $@)
	if [ ! $@ -ef $< ]; then cp $< $@; fi


# Rules for intermediate binaries:
$(IntDir)/$(DebugDir)/$(TargetName): $(CPPOBJS_DEBUG)
	$(LINK) $^ $(LDFLAGS_DEBUG) -o $@

$(IntDir)/$(ReleaseDir)/$(TargetName): $(CPPOBJS_RELEASE)
	$(LINK) $^ $(LDFLAGS_RELEASE) -o $@


# Rules for dependencies:
$(IntDir)/$(DebugDir)/%.d: $(InputDir)/%.cpp
	@mkdir -p $(dir $@)
	$(CPP) -MM $(CPPFLAGS_DEBUG) $^ | sed -e 's/..*\.o\s*[:]/$(subst .,\.,$(subst /,\/,$(dir $@)))\0/g' > $@

$(IntDir)/$(ReleaseDir)/%.d: $(InputDir)/%.cpp
	@mkdir -p $(dir $@)
	$(CPP) -MM $(CPPFLAGS_RELEASE) $^ | sed -e 's/..*\.o\s*[:]/$(subst .,\.,$(subst /,\/,$(dir $@)))\0/g' > $@

ifneq ($(MAKECMDGOALS), clean)
ifneq ($(MAKECMDGOALS), sweep)
-include $(CPPDEPS_ALL)
endif
endif


# Rules for object files:
$(IntDir)/$(DebugDir)/%.o:
	@mkdir -p $(dir $@)
	$(CPP) -c $(CPPFLAGS_DEBUG) -o $@ $<

$(IntDir)/$(ReleaseDir)/%.o:
	@mkdir -p $(dir $@)
	$(CPP) -c $(CPPFLAGS_RELEASE) -o $@ $<


# Cleanup rules:
clean: sweep
	rm -rf $(IntDir)/*
	rm -rf $(OutDir)/*


sweep:
	rm -f $(CPPDEPS_ALL)
	rm -f $(CPPOBJS_ALL)


rebuild: clean all


.PHONY: clean sweep rebuild tags
