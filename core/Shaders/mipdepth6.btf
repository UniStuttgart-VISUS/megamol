<?xml version="1.0" encoding="utf-8"?>
<btf type="MegaMolGLSLShader" version="1.0" namespace="mipdepth6">

    <shader name="spherevertex">
        <snippet type="version">110</snippet>
        <snippet name="common::defines"/>
        <snippet type="string">
<![CDATA[
#define DEFERRED_SHADING
]]>
        </snippet>

        <snippet name="attributes" type="string">
<![CDATA[
uniform vec4 viewAttr;
#ifdef WITH_SCALING
uniform float scaling;
#endif // WITH_SCALING
#ifndef CALC_CAM_SYS
uniform vec3 camIn;
uniform vec3 camUp;
uniform vec3 camRight;
#endif // CALC_CAM_SYS
// clipping plane attributes
uniform vec4 clipDat;
uniform vec4 clipCol;
uniform vec4 inConsts1;
attribute float colIdx;
uniform sampler1D colTab;
varying vec4 objPos;
varying vec4 camPos;
varying vec4 lightPos;
varying float squarRad;
varying float rad;
#ifdef DEFERRED_SHADING
varying float pointSize;
#endif
#ifdef RETICLE
varying vec2 centerFragment;
#endif // RETICLE
#define CONSTRAD inConsts1.x
#define MIN_COLV inConsts1.y
#define MAX_COLV inConsts1.z
#define COLTAB_SIZE inConsts1.w
]]>
        </snippet>

        <snippet name="MainParams" type="string">
<![CDATA[
void main(void) {
    // remove the sphere radius from the w coordinates to the rad varyings
    vec4 inPos = gl_Vertex;
    rad = (CONSTRAD < -0.5) ? inPos.w : CONSTRAD;
    inPos.w = 1.0;
    float cid = MAX_COLV - MIN_COLV;
    if (cid < 0.000001) {
        gl_FrontColor = gl_Color;
    } else {
        cid = (colIdx - MIN_COLV) / cid;
        cid = clamp(cid, 0.0, 1.0);
        
        cid *= (1.0 - 1.0 / COLTAB_SIZE);
        cid += 0.5 / COLTAB_SIZE;
        
        gl_FrontColor = texture1D(colTab, cid);
    }
#ifdef WITH_SCALING
    rad *= scaling;
#endif // WITH_SCALING
    
    squarRad = rad * rad;
]]>
        </snippet>

        <snippet name="posTrans" type="string">
<![CDATA[
    // object pivot point in object space    
    objPos = inPos; // no w-div needed, because w is 1.0 (Because I know)
    // calculate cam position
    camPos = gl_ModelViewMatrixInverse[3]; // (C) by Christoph
    camPos.xyz -= objPos.xyz; // cam pos to glyph space
    // calculate light position in glyph space
    lightPos = gl_ModelViewMatrixInverse * gl_LightSource[0].position;
]]>
        </snippet>

        <snippet name="clippingPlane" type="string">
<![CDATA[
    // clipping
    float od = clipDat.w - 1.0;
    if (any(notEqual(clipDat.xyz, vec3(0, 0, 0)))) {
        od = dot(objPos.xyz, clipDat.xyz) - rad;
    }
]]>
        </snippet>

        <snippet name="SphereTouchPlane" type="file">mipdepth_spheretouchplane.glsl</snippet>

        <snippet name="Output" type="string">
<![CDATA[
    gl_Position = vec4((mins + maxs) * 0.5, 0.0, (od > clipDat.w) ? 0.0 : 1.0);
    maxs = (maxs - mins) * 0.5 * winHalf;
    gl_PointSize = max(maxs.x, maxs.y) + 0.5;
#ifdef DEFERRED_SHADING
    pointSize = gl_PointSize;
#endif
]]>
        </snippet>

        <snippet type="string">
<![CDATA[
}
]]>
        </snippet>
    </shader>


    <shader name="theOtherSphereVertex">
        <snippet type="version">120</snippet>
        <snippet type="string">
<![CDATA[
#extension GL_EXT_gpu_shader4 : enable
#define DEFERRED_SHADING
]]>
        </snippet>

        <snippet name="common::defines"/>

        <snippet name="attributes" type="string">
<![CDATA[
uniform vec4 viewAttr;

#ifdef WITH_SCALING
uniform float scaling;
#endif // WITH_SCALING

#ifndef CALC_CAM_SYS
uniform vec3 camIn;
uniform vec3 camUp;
uniform vec3 camRight;
#endif // CALC_CAM_SYS

// clipping plane attributes
uniform vec4 clipDat;
uniform vec3 clipCol;

uniform vec4 inConsts1;
attribute float colIdx;
uniform sampler1D colTab;

uniform sampler2D depthTex;
uniform ivec3 depthTexParams;
#define DEPTHMIP_WIDTH depthTexParams.x
#define DEPTHMIP_HEIGHT depthTexParams.y
#define DEPTHMIP_MAXLEVEL depthTexParams.z

varying vec4 objPos;
varying vec4 camPos;
varying vec4 lightPos;
varying float squarRad;
varying float rad;

#ifdef RETICLE
varying vec2 centerFragment;
#endif // RETICLE

#ifdef DEFERRED_SHADING
varying float pointSize;
#endif

#define CONSTRAD inConsts1.x
#define MIN_COLV inConsts1.y
#define MAX_COLV inConsts1.z
#define COLTAB_SIZE inConsts1.w
]]>
        </snippet>

        <snippet name="MainParams" type="string">
<![CDATA[
void main(void) {

    // remove the sphere radius from the w coordinates to the rad varyings
    vec4 inPos = gl_Vertex;
    rad = (CONSTRAD < -0.5) ? inPos.w : CONSTRAD;
    inPos.w = 1.0;
    float cid = MAX_COLV - MIN_COLV;
    if (cid < 0.000001) {
        gl_FrontColor = gl_Color;
    } else {
        cid = (colIdx - MIN_COLV) / cid;
        cid = clamp(cid, 0.0, 1.0);
        
        cid *= (1.0 - 1.0 / COLTAB_SIZE);
        cid += 0.5 / COLTAB_SIZE;
        
        gl_FrontColor = texture1D(colTab, cid);
    }

#ifdef WITH_SCALING
    rad *= scaling;
#endif // WITH_SCALING

    squarRad = rad * rad;
]]>
        </snippet>

        <snippet name="posTrans" type="string">
<![CDATA[

    // object pivot point in object space    
    objPos = inPos; // no w-div needed, because w is 1.0 (Because I know)

    // calculate cam position
    camPos = gl_ModelViewMatrixInverse[3]; // (C) by Christoph
    camPos.xyz -= objPos.xyz; // cam pos to glyph space

    // calculate light position in glyph space
    lightPos = gl_ModelViewMatrixInverse * gl_LightSource[0].position;
]]>
        </snippet>

        <snippet name="clippingPlane" type="string">
<![CDATA[

    // clipping
    float od = clipDat.w - 1.0;
    if (any(notEqual(clipDat.xyz, vec3(0, 0, 0)))) {
        od = dot(objPos.xyz, clipDat.xyz) - rad;
    }

]]>
        </snippet>

        <snippet name="SphereTouchPlane" type="file">mipdepth_spheretouchplane.glsl</snippet>

        <snippet name="Output" type="string">
<![CDATA[
    gl_Position = vec4((mins + maxs) * 0.5, 0.0, (od > clipDat.w) ? 0.0 : 1.0);
    maxs = (maxs - mins) * 0.5 * winHalf;
    gl_PointSize = max(maxs.x, maxs.y) + 0.5; // diameter
#ifdef DEFERRED_SHADING
    pointSize = gl_PointSize;
#endif
]]>
        </snippet>
        <snippet name="culling" type="string">
<![CDATA[
#ifdef SMALL_SPRITE_LIGHTING
    // for normal crowbaring on very small sprites
    lightPos.w = (clamp(gl_PointSize, 1.0, 5.0) - 1.0) / 4.0;
#else
    lightPos.w = 1.0;
#endif // SMALL_SPRITE_LIGHTING
    
#ifdef RETICLE
    centerFragment = gl_Position.xy / gl_Position.w;
#endif // RETICLE

    // gl_PointSize = 32.0;

    // depp texture coordinates ..
    vec2 dtc = gl_Position.xy + vec2(1.0);
    dtc /= vec2(viewAttr.z, viewAttr.w);
    // .. now in 'viewport' coordinates

//#define DEPTHMIP_WIDTH depthTexParams.x
//#define DEPTHMIP_HEIGHT depthTexParams.y
//#define DEPTHMIP_MAXLEVEL depthTexParams.z

    int miplevel = min(max((int(log2(gl_PointSize))), 1), DEPTHMIP_MAXLEVEL);
    float exp = exp2(float(miplevel));

    dtc /= exp;
    ivec2 idtc = ivec2(dtc - vec2(0.5)); // because cast to "ivec2" performs a "round" as sfx !!! WTF !!!
    // now in relative coordinate of the mip level
    idtc.x += int(float(DEPTHMIP_WIDTH * (1.0 - 2.0 / exp)));
    idtc.y += DEPTHMIP_HEIGHT;

    vec4 depth1 = texelFetch2D(depthTex, idtc, 0);
    vec4 depth2 = texelFetch2D(depthTex, idtc + ivec2(1, 0), 0);
    vec4 depth3 = texelFetch2D(depthTex, idtc + ivec2(0, 1), 0);
    vec4 depth4 = texelFetch2D(depthTex, idtc + ivec2(1, 1), 0);

    float depth = max(max(depth1.x, depth2.x), max(depth3.x, depth4.x));

    vec4 depthPos; // ass of sphere in object space
    vec3 v = objPos.xyz - gl_ModelViewMatrixInverse[3].xyz;
    //float l = length(v);
    //v *= (l - rad) / l;
    depthPos.xyz = gl_ModelViewMatrixInverse[3].xyz + v;
    depthPos.w = 1.0;

    depthPos = gl_ModelViewProjectionMatrix * depthPos;
    depthPos.xyz /= depthPos.w;

    depthPos.z -= gl_DepthRange.near;
    depthPos.z /= gl_DepthRange.diff;
    depthPos.z += 1.0;
    depthPos.z *= 0.5;

    depth -= gl_DepthRange.near;
    depth /= gl_DepthRange.diff;

    if (depthPos.z > depth) {
        gl_Position.w = 0.0;
    }

//    gl_FrontColor = vec4(abs(depth - depthPos.z) * 20.0, 0.0, 0.0, 1.0);
    //gl_FrontColor = vec4(abs(depthPos.z));

//    gl_Position.w = 0.0;
}
]]>
        </snippet>
    </shader>

    <shader name="otherSphereVertex">
        <snippet type="version">120</snippet>
        <snippet type="string">
<![CDATA[
#extension GL_EXT_gpu_shader4 : enable
#define DEFERRED_SHADING
]]>
        </snippet>
        <snippet name="common::defines"/>
        <snippet name="theOtherSphereVertex::attributes" />
        <snippet name="theOtherSphereVertex::MainParams" />
        <snippet name="theOtherSphereVertex::posTrans" />
        <snippet name="theOtherSphereVertex::clippingPlane" />
        <snippet name="theOtherSphereVertex::SphereTouchPlane" />
        <snippet name="theOtherSphereVertex::Output" />
        <snippet name="theOtherSphereVertex::culling" />
    </shader>

    <shader name="spherefragment">
        <snippet type="version">120</snippet>
        <snippet type="string">
<![CDATA[
#extension GL_EXT_gpu_shader4 : enable
]]>
        </snippet>

        <snippet name="common::defines" />

        <snippet type="string">
<![CDATA[
varying float pointSize;
]]>
        </snippet>

        <snippet name="body1" type="string">
<![CDATA[
#ifdef BACKSIDE_ENABLED
uniform float hitsideFlag;
#endif // BACKSIDE_ENABLED
// clipping plane attributes
uniform vec4 clipDat;
uniform vec4 clipCol;
uniform vec4 viewAttr;
FLACH varying vec4 objPos;
FLACH varying vec4 camPos;
FLACH varying vec4 lightPos;
FLACH varying float squarRad;
FLACH varying float rad;
#ifdef RETICLE
FLACH varying vec2 centerFragment;
#endif // RETICLE
void main(void) {
    vec4 coord;
    vec3 ray;
    float lambda;
    // transform fragment coordinates from window coordinates to view coordinates.
    coord = gl_FragCoord 
        * vec4(viewAttr.z, viewAttr.w, 2.0, 0.0) 
        + vec4(-1.0, -1.0, -1.0, 1.0);
    
    // transform fragment coordinates from view coordinates to object coordinates.
    coord = gl_ModelViewProjectionMatrixInverse * coord;
    coord /= coord.w;
    coord -= objPos; // ... and to glyph space
    
    // calc the viewing ray
    ray = normalize(coord.xyz - camPos.xyz);
    // chose color for lighting
    vec4 color = gl_Color;
    //vec4 color = vec4(uplParams.xyz, 1.0);
    // calculate the geometry-ray-intersection
    float d1 = -dot(camPos.xyz, ray);                       // projected length of the cam-sphere-vector onto the ray
    float d2s = dot(camPos.xyz, camPos.xyz) - d1 * d1;      // off axis of cam-sphere-vector and ray
    float radicand = squarRad - d2s;                        // square of difference of projected length and lambda
#ifdef CLIP
    if (radicand < 0.0) { 
#ifdef DISCARD_COLOR_MARKER
        color = vec3(1.0, 0.0, 0.0);       
#else // DISCARD_COLOR_MARKER
        discard; 
#endif // DISCARD_COLOR_MARKER
    }
#endif // CLIP
    float sqrtRadicand = sqrt(radicand);
#ifdef BACKSIDE_ENABLED
    lambda = d1 - sqrtRadicand * hitsideFlag;             // lambda
#else // BACKSIDE_ENABLED
    lambda = d1 - sqrtRadicand;                           // lambda
#endif // BACKSIDE_ENABLED
    vec3 sphereintersection = lambda * ray + camPos.xyz;    // intersection point
    vec3 normal = sphereintersection / rad;
    if (any(notEqual(clipDat.xyz, vec3(0, 0, 0)))) {
        vec3 planeNormal = normalize(clipDat.xyz);
        vec3 clipPlaneBase = planeNormal * clipDat.w;
        float d = -dot(planeNormal, clipPlaneBase - objPos.xyz);
        float dist1 = dot(sphereintersection, planeNormal) + d;
        float dist2 = d;
        float t = -(dot(planeNormal, camPos.xyz) + d) / dot(planeNormal, ray);
        vec3 planeintersect = camPos.xyz + t * ray;
        if (dist1 > 0.0) {
            if (dist2 < rad) {
                if (length(planeintersect) < rad) {
                    sphereintersection = planeintersect;
                    normal = planeNormal;
                    color = mix(color, vec4(clipCol.rgb, 1.0), clipCol.a);
                } else {
                    discard;
                }
            } else {
                discard;
            }
        }
    }
    // "calc" normal at intersection point
#ifdef SMALL_SPRITE_LIGHTING
    normal = mix(-ray, normal, lightPos.w);
#endif // SMALL_SPRITE_LIGHTING
#ifdef AXISHINTS
    // debug-axis-hints
    float mc = min(abs(normal.x), min(abs(normal.y), abs(normal.z)));
    if (mc < 0.05)            { color = vec3(0.5); }
    if (abs(normal.x) > 0.98) { color = vec3(1.0, 0.0, 0.0); }
    if (abs(normal.y) > 0.98) { color = vec3(0.0, 1.0, 0.0); }
    if (abs(normal.z) > 0.98) { color = vec3(0.0, 0.0, 1.0); }
    if (normal.x < -0.99)     { color = vec3(0.5); }
    if (normal.y < -0.99)     { color = vec3(0.5); }
    if (normal.z < -0.99)     { color = vec3(0.5); }
#endif // AXISHINTS
]]>
        </snippet>

        <snippet name="out-depth" type="string">
<![CDATA[
    // calculate depth
#ifdef DEPTH
    vec4 Ding = vec4(sphereintersection + objPos.xyz, 1.0);
    float depth = dot(gl_ModelViewProjectionMatrixTranspose[2], Ding);
    float depthW = dot(gl_ModelViewProjectionMatrixTranspose[3], Ding);
    gl_FragDepth = ((depth / depthW) + 1.0) * 0.5;
#ifndef CLIP
    gl_FragDepth = (radicand < 0.0) ? 1.0 : ((depth / depthW) + 1.0) * 0.5;
    gl_FragColor.rgb = (radicand < 0.0) ? gl_Color.rgb : gl_FragColor.rgb;
#endif // CLIP
#ifdef DISCARD_COLOR_MARKER
    Ding = vec4(objPos.xyz, 1.0);
    depth = dot(gl_ModelViewProjectionMatrixTranspose[2], Ding);
    depthW = dot(gl_ModelViewProjectionMatrixTranspose[3], Ding);
    gl_FragDepth = ((depth / depthW) + 1.0) * 0.5;
#endif // DISCARD_COLOR_MARKER
#endif // DEPTH
]]>
        </snippet>

        <snippet type="string">
<![CDATA[
  gl_FragData[0] = vec4(color.rgb, 1.0);
  //normal = normalize((gl_ModelViewMatrixInverseTranspose * vec4(normal, 1.0)).xyz);
  gl_FragData[1] = vec4(normal.xyz, clamp((pointSize - 4.0) * 0.25, 0.0, 1.0));
  gl_FragData[2] = vec4(sphereintersection.xyz + objPos.xyz, 1.0);
}
]]>
        </snippet>
    </shader>

    <shader name="pointvertex">
        <snippet type="string">
<![CDATA[
uniform vec4 inConsts1;
attribute float colIdx;
uniform sampler1D colTab;

varying vec3 opos;

#define MIN_COLV inConsts1.y
#define MAX_COLV inConsts1.z
#define COLTAB_SIZE inConsts1.w

void main(void) {

    float cid = MAX_COLV - MIN_COLV;
    if (cid < 0.000001) {
        gl_FrontColor = gl_Color;
    } else {
        cid = (colIdx - MIN_COLV) / cid;
        cid = clamp(cid, 0.0, 1.0);
        
        cid *= (1.0 - 1.0 / COLTAB_SIZE);
        cid += 0.5 / COLTAB_SIZE;
        
        gl_FrontColor = texture1D(colTab, cid);
    }

    opos = gl_Vertex.xyz;
    gl_Position = ftransform();

}
]]>
        </snippet>
    </shader>

    <shader name="pointfragment">
        <snippet type="version">120</snippet>
        <snippet type="string">
<![CDATA[
#extension GL_EXT_gpu_shader4 : enable

varying vec3 opos;

void main(void) {
  gl_FragData[0] = vec4(gl_Color.rgb, 1.0);
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = vec4(opos, 1.0);
}
]]>
        </snippet>
    </shader>

    <namespace name="deferredShader">
        <shader name="vert">
            <snippet type="version">120</snippet>
            <snippet type="string">
<![CDATA[

varying vec3 interpolRay;

void main(void) {
  gl_Position = ftransform();
  interpolRay = gl_Normal.xyz;
}
]]>
            </snippet>
        </shader>

        <shader name="frag">
            <snippet type="version">120</snippet>
            <snippet type="string">
<![CDATA[
#extension GL_EXT_gpu_shader4 : enable

uniform sampler2D colour;
uniform sampler2D normal;
uniform sampler2D pos;

uniform vec3 ray;
uniform vec3 lightPos;

varying vec3 interpolRay;

]]>
            </snippet>

            <snippet name="common::lighting::simple" />

            <snippet type="string">
 <![CDATA[

void main(void) {
  ivec2 fc = ivec2(gl_FragCoord.xy);

  // depths (obj-spc-positions) of neighbor fragments
  vec4 c22 = texelFetch2D(pos, fc + ivec2(1, 1), 0);
  vec4 c02 = texelFetch2D(pos, fc + ivec2(-1, 1), 0);
  vec4 c00 = texelFetch2D(pos, fc + ivec2(-1, -1), 0);
  vec4 c20 = texelFetch2D(pos, fc + ivec2(1, -1), 0);

  vec4 v12 = texelFetch2D(pos, fc + ivec2(0, 1), 0);
  vec4 v01 = texelFetch2D(pos, fc + ivec2(-1, 0), 0);
  vec4 v10 = texelFetch2D(pos, fc + ivec2(0, -1), 0);
  vec4 v21 = texelFetch2D(pos, fc + ivec2(1, 0), 0);

  vec4 v11 = texelFetch2D(pos, fc, 0);

  // glyph normal and colour
  vec4 objn = texelFetch2D(normal, fc, 0);
  vec4 col = texelFetch2D(colour, fc, 0);

  if (col.a < 0.01) {
    discard;
  }

  // background handling
  if (c00.w < 0.5) { c00 = v11; }
  if (c02.w < 0.5) { c02 = v11; }
  if (c20.w < 0.5) { c20 = v11; }
  if (c22.w < 0.5) { c22 = v11; }
  if (v01.w < 0.5) { v01 = v11; }
  if (v10.w < 0.5) { v10 = v11; }
  if (v12.w < 0.5) { v12 = v11; }
  if (v21.w < 0.5) { v21 = v11; }

  /*// approach 1: central differences
  vec3 c12 = 2.0 * v12 - 0.5 * (c02 + c22);
  vec3 c01 = 2.0 * v01 - 0.5 * (c02 + c00);
  vec3 c10 = 2.0 * v10 - 0.5 * (c20 + c00);
  vec3 c21 = 2.0 * v21 - 0.5 * (c20 + c22);

  vec3 c11 = 4.0 * v11 - (v10 + v12) - 0.5 * (c01 + c21);

  vec3 xu = 0.5 * c11 + 0.25 * (c01 + c21);
  vec3 xv = 0.5 * c11 + 0.25 * (c10 + c12);

  vec3 dy = 0.5 * (v10 + xu) - 0.5 * (v12 + xu);
  vec3 dx = 0.5 * (v01 + xv) - 0.5 * (v21 + xv);
  */

  // approach 2: shifted patch
  vec3 c12 = v12.xyz;
  vec3 c01 = v01.xyz;
  vec3 c10 = v10.xyz;
  vec3 c21 = v21.xyz;
  vec3 c11 = v11.xyz;

  // evaluate at (0.5, 0.5)
  vec3 b0 = (c00.xyz + 2.0 * c01 + c02.xyz) * 0.25;
  vec3 b1 = (c10 + 2.0 * c11 + c12) * 0.25;
  vec3 b2 = (c20.xyz + 2.0 * c21 + c22.xyz) * 0.25;
  vec3 dx = 0.5 * (b0 + b1) - 0.5 * (b1 + b2);
  b0 = (c00.xyz + 2.0 * c10 + c20.xyz) * 0.25;
  b1 = (c01 + 2.0 * c11 + c21) * 0.25;
  b2 = (c02.xyz + 2.0 * c12 + c22.xyz) * 0.25;
  vec3 dy = 0.5 * (b0 + b1) - 0.5 * (b1 + b2);

  // normal evaluation (approach 1 + 2)
  vec3 n = normalize(cross(dx, dy));

  // blend between glyph and calculated normal
  //col = vec3(0.0, 0.0, 1.0);
  if (objn.w > 0.99) {
    n = objn.xyz;
    //col = vec3(1.0, 0.0, 0.0);
  } else if (objn.w > 0.01) {
    n = n * (1.0 - objn.w) + objn.xyz * objn.w;
    //col = vec3(objn.w, 0.0, 1.0 - objn.w);
  }

  vec3 ray2 = normalize(interpolRay);

  // lighting (approach 1 + 2)
  if (v11.w < 0.5) {
    gl_FragColor = vec4(1.0f);
  } else {
    gl_FragColor = vec4(
      (v11.w > 0.5) ? LocalLighting(ray2, n, lightPos, col.rgb) : col.rgb,
      1.0);
  }
}
]]>
            </snippet>
        </shader>
    </namespace>

</btf>
