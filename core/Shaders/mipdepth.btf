<?xml version="1.0" encoding="utf-8"?>
<btf type="MegaMolGLSLShader" version="1.0" namespace="mipdepth">
    <include file="common" />

    <include file="mipdepth2" />
    <include file="mipdepth3" />
    <include file="mipdepth4" />
    <include file="mipdepth5" />
    <include file="mipdepth6" />

    <namespace name="init">

        <shader name="vertex">
            <snippet type="version">110</snippet>
            <snippet name="common::defines" />
            <snippet name="attributes" type="string">
<![CDATA[
uniform vec4 viewAttr;

#ifdef WITH_SCALING
uniform float scaling;
#endif // WITH_SCALING

#ifndef CALC_CAM_SYS
uniform vec3 camIn;
uniform vec3 camUp;
uniform vec3 camRight;
#endif // CALC_CAM_SYS

uniform vec4 inConsts1;

varying vec4 objPos;
varying vec4 camPos;
varying float squarRad;
varying float rad;

#define CONSTRAD inConsts1.x
#define MIN_COLV inConsts1.y
#define MAX_COLV inConsts1.z
#define COLTAB_SIZE inConsts1.w
]]>
            </snippet>

            <snippet name="MainParams" type="string">
<![CDATA[
void main(void) {

    // remove the sphere radius from the w coordinates to the rad varyings
    vec4 inPos = gl_Vertex;
    rad = (CONSTRAD < -0.5) ? inPos.w : CONSTRAD;
    inPos.w = 1.0;

    gl_FrontColor = gl_Color;

#ifdef WITH_SCALING
    rad *= scaling;
#endif // WITH_SCALING

    squarRad = rad * rad;
]]>
            </snippet>

            <snippet name="posTrans" type="string">
<![CDATA[

    // object pivot point in object space    
    objPos = inPos; // no w-div needed, because w is 1.0 (Because I know)

    // calculate cam position
    camPos = gl_ModelViewMatrixInverse[3]; // (C) by Christoph
    camPos.xyz -= objPos.xyz; // cam pos to glyph space
]]>
            </snippet>

            <snippet name="SphereTouchPlane" type="file">mipdepth_spheretouchplane.glsl</snippet>

            <snippet name="Output" type="string">
<![CDATA[
    vec4 depthPos; // ass of sphere in object space

    vec3 v = objPos.xyz - gl_ModelViewMatrixInverse[3].xyz;
    float l = length(v);
    v *= (l + rad) / l;
    depthPos.xyz = gl_ModelViewMatrixInverse[3].xyz + v;
    depthPos.w = 1.0;

    depthPos = gl_ModelViewProjectionMatrix * depthPos;
    depthPos.xyz /= depthPos.w;

    gl_Position = vec4((mins + maxs) * 0.5, depthPos.z, 1.0);
    maxs = (maxs - mins) * 0.5 * winHalf;
    gl_PointSize = abs(max(maxs.x, maxs.y)) + 0.5;
}
]]>
            </snippet>

        </shader>

        <shader name="fragment">
            <snippet type="version">110</snippet>
            <snippet name="common::defines"/>
            <snippet type="string">
<![CDATA[

uniform vec4 viewAttr;

FLACH varying vec4 objPos;
FLACH varying vec4 camPos;
FLACH varying float squarRad;
FLACH varying float rad;

void main(void) {
    vec4 coord;
    vec3 ray;
    float lambda;

    // transform fragment coordinates from window coordinates to view coordinates.
    coord = gl_FragCoord 
        * vec4(viewAttr.z, viewAttr.w, 2.0, 0.0) 
        + vec4(-1.0, -1.0, -1.0, 1.0);

    // transform fragment coordinates from view coordinates to object coordinates.
    coord = gl_ModelViewProjectionMatrixInverse * coord;
    coord /= coord.w;
    coord -= objPos; // ... and to glyph space

    // calc the viewing ray
    ray = normalize(coord.xyz - camPos.xyz);

    // calculate the geometry-ray-intersection
    float d1 = -dot(camPos.xyz, ray);                       // projected length of the cam-sphere-vector onto the ray
    float d2s = dot(camPos.xyz, camPos.xyz) - d1 * d1;      // off axis of cam-sphere-vector and ray
    float radicand = squarRad - d2s;                        // square of difference of projected length and lambda
    if (radicand < 0.0) { 
        discard; 
    }

    gl_FragColor = gl_Color;

}
]]>
            </snippet>
        </shader>

    </namespace>

    <namespace name="depthmap">
        <shader name="initvert">
            <snippet name="init" type="string">
<![CDATA[
#version 120 
#extension GL_EXT_gpu_shader4 : enable
]]>
            </snippet>

            <snippet type="string">
<![CDATA[
void main(void) {
    gl_Position = ftransform();
}
]]>
            </snippet>
        </shader>

        <shader name="initfrag">
            <snippet name="initvert::init" />
            <snippet type="string">
<![CDATA[
uniform sampler2D datex;
void main(void) {
    gl_FragColor = texelFetch2D(datex, ivec2(gl_FragCoord.xy), 0);
}
]]>
            </snippet>
        </shader>

        <shader name="mipfrag">
            <snippet name="initvert::init" />
            <snippet type="string">
<![CDATA[

uniform sampler2D datex;
uniform ivec2 dst;
uniform ivec2 src;

void main(void) {
    ivec2 c = 2 * (ivec2(gl_FragCoord.xy) - dst.xy) + src.xy;
    vec4 c1 = texelFetch2D(datex, c, 0);
    vec4 c2 = texelFetch2D(datex, c + ivec2(1, 0), 0);
    vec4 c3 = texelFetch2D(datex, c + ivec2(0, 1), 0);
    vec4 c4 = texelFetch2D(datex, c + ivec2(1, 1), 0);

    gl_FragColor = vec4(max(max(c1.r, c2.r), max(c3.r, c4.r)));
}
]]>
            </snippet>
        </shader>

    </namespace>

    <namespace name="point">
        <shader name="vert">
            <snippet type="string">
<![CDATA[
uniform vec4 inConsts1;
attribute float colIdx;
uniform sampler1D colTab;

#define MIN_COLV inConsts1.y
#define MAX_COLV inConsts1.z
#define COLTAB_SIZE inConsts1.w

void main(void) {

    float cid = MAX_COLV - MIN_COLV;
    if (cid < 0.000001) {
        gl_FrontColor = gl_Color;
    } else {
        cid = (colIdx - MIN_COLV) / cid;
        cid = clamp(cid, 0.0, 1.0);
        
        cid *= (1.0 - 1.0 / COLTAB_SIZE);
        cid += 0.5 / COLTAB_SIZE;
        
        gl_FrontColor = texture1D(colTab, cid);
    }

    gl_Position = ftransform();

}
]]>
            </snippet>
        </shader>

        <shader name="frag">
            <snippet type="string">
<![CDATA[
float rand(vec2 co) {
    return fract(sin(dot(co.xy ,vec2(12.9898, 78.233))) * 43758.5453);
}

void main(void) {

// some bullshit lighting to fake the impression of smart things happening
    float fac = 0.5 + 0.45 * rand(gl_FragCoord.xy + gl_FragCoord.zz);
    float light = max(0.0, rand(gl_FragCoord.yx + gl_FragCoord.zz) * 9.5 - 9.0);
    gl_FragColor = vec4(gl_Color.rgb * fac + vec3(1.0, 1.0, 1.0) * light, gl_Color.a);
    
}
]]>
            </snippet>
        </shader>

        <shader name="simplevert">
            <snippet type="string">
<![CDATA[
void main(void) {
    vec4 p = ftransform();
    gl_Position = p;
}
]]>
            </snippet>
        </shader>

        <shader name="simplefrag">
            <snippet type="string">
<![CDATA[
void main(void) {
    gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);
}
]]>
            </snippet>
        </shader>

    </namespace>


    <shader name="theOtherSphereVertex">
      <shader name="mipdepth6::theOtherSphereVertex" />
    </shader>
   
    <namespace name="geospheres">
        <shader name="vertex">
            <shader name="mipdepth2::geospheres::vertex" />
        </shader>
        <shader name="geometry">
            <shader name="mipdepth2::geospheres::geometry" />
        </shader>
    </namespace>

    <namespace name="geopoints">
        <shader name="vertex">
            <shader name="mipdepth3::geopoints::vertex" />
        </shader>
        <shader name="geometry">
            <shader name="mipdepth3::geopoints::geometry" />
        </shader>
    </namespace>

    <namespace name="geoinitdepthpoints">
        <shader name="vertex">
            <shader name="mipdepth4::geoinitdepthpoints::vertex" />
        </shader>
        <shader name="geometry">
            <shader name="mipdepth4::geoinitdepthpoints::geometry" />
        </shader>
    </namespace>

    <namespace name="geoinitdepthspheres">
        <shader name="vertex">
            <shader name="mipdepth5::geoinitdepthspheres::vertex" />
        </shader>
        <shader name="geometry">
            <shader name="mipdepth5::geoinitdepthspheres::geometry" />
        </shader>
    </namespace>

    <namespace name="instaspheres">
        <shader name="vertex">
            <shader name="mipdepth2::instaspheres::vertex" />
        </shader>
        <!--<shader name="geometry">
            <shader name="::mipdepth2::geospheres::geometry" />
        </shader>-->
    </namespace>

    <namespace name="instapoints">
        <shader name="vertex">
            <shader name="mipdepth3::instapoints::vertex" />
        </shader>
        <!--<shader name="geometry">
            <shader name="::mipdepth3::geopoints::geometry" />
        </shader>-->
    </namespace>

    <namespace name="instainitdepthpoints">
        <shader name="vertex">
            <shader name="mipdepth4::instainitdepthpoints::vertex" />
        </shader>
        <!--<shader name="geometry">
            <shader name="::mipdepth4::geoinitdepthpoints::geometry" />
        </shader>-->
    </namespace>

    <namespace name="instainitdepthspheres">
        <shader name="vertex">
            <shader name="mipdepth5::instainitdepthspheres::vertex" />
        </shader>
        <!--<shader name="geometry">
            <shader name="::mipdepth5::geoinitdepthspheres::geometry" />
        </shader>-->
    </namespace>

    <namespace name="point2">

    <shader name="lesssimplevert">
        <snippet type="version">120</snippet>
        <snippet type="string">
<![CDATA[
#extension GL_EXT_gpu_shader4 : enable
]]>
        </snippet>

        <snippet name="common::defines"/>

        <snippet name="attributes" type="string">
<![CDATA[
uniform vec4 viewAttr;

#ifdef WITH_SCALING
uniform float scaling;
#endif // WITH_SCALING

#ifndef CALC_CAM_SYS
uniform vec3 camIn;
uniform vec3 camUp;
uniform vec3 camRight;
#endif // CALC_CAM_SYS

// clipping plane attributes
uniform vec4 clipDat;
uniform vec3 clipCol;

uniform vec4 inConsts1;
attribute float colIdx;
uniform sampler1D colTab;

uniform sampler2D depthTex;
uniform ivec3 depthTexParams;
#define DEPTHMIP_WIDTH depthTexParams.x
#define DEPTHMIP_HEIGHT depthTexParams.y
#define DEPTHMIP_MAXLEVEL depthTexParams.z

varying vec4 objPos;
varying vec4 camPos;
varying vec4 lightPos;
varying float squarRad;
varying float rad;

#ifdef RETICLE
varying vec2 centerFragment;
#endif // RETICLE

#define CONSTRAD inConsts1.x
#define MIN_COLV inConsts1.y
#define MAX_COLV inConsts1.z
#define COLTAB_SIZE inConsts1.w
]]>
        </snippet>

        <snippet name="MainParams" type="string">
<![CDATA[
void main(void) {

    // remove the sphere radius from the w coordinates to the rad varyings
    vec4 inPos = gl_Vertex;
    rad = (CONSTRAD < -0.5) ? inPos.w : CONSTRAD;
    inPos.w = 1.0;
    float cid = MAX_COLV - MIN_COLV;
    if (cid < 0.000001) {
        gl_FrontColor = gl_Color;
    } else {
        cid = (colIdx - MIN_COLV) / cid;
        cid = clamp(cid, 0.0, 1.0);
        
        cid *= (1.0 - 1.0 / COLTAB_SIZE);
        cid += 0.5 / COLTAB_SIZE;
        
        gl_FrontColor = texture1D(colTab, cid);
    }

#ifdef WITH_SCALING
    rad *= scaling;
#endif // WITH_SCALING

    squarRad = rad * rad;
]]>
        </snippet>
        
        <snippet name="posTrans" type="string">
 <![CDATA[

    // object pivot point in object space    
    objPos = inPos; // no w-div needed, because w is 1.0 (Because I know)

    // calculate cam position
    camPos = gl_ModelViewMatrixInverse[3]; // (C) by Christoph
    camPos.xyz -= objPos.xyz; // cam pos to glyph space

    // calculate light position in glyph space
    lightPos = gl_ModelViewMatrixInverse * gl_LightSource[0].position;
]]>
        </snippet>

        <snippet name="clippingPlane" type="string">
<![CDATA[

    // clipping
    float od = clipDat.w - 1.0;
    if (any(notEqual(clipDat.xyz, vec3(0, 0, 0)))) {
        od = dot(objPos.xyz, clipDat.xyz) - rad;
    }

]]>
        </snippet>
        
        <snippet name="SphereTouchPlane" type="file">mipdepth_spheretouchplane.glsl</snippet>

        <snippet name="Output" type="string">
<![CDATA[
    gl_Position = vec4((mins + maxs) * 0.5, 0.0, (od > clipDat.w) ? 0.0 : 1.0);
    maxs = (maxs - mins) * 0.5 * winHalf;
    //gl_PointSize = max(maxs.x, maxs.y) + 0.5; // diameter
]]>
        </snippet>

        <snippet type="string">
<![CDATA[
#ifdef SMALL_SPRITE_LIGHTING
    // for normal crowbaring on very small sprites
    lightPos.w = (clamp(gl_PointSize, 1.0, 5.0) - 1.0) / 4.0;
#else
    lightPos.w = 1.0;
#endif // SMALL_SPRITE_LIGHTING
    
#ifdef RETICLE
    centerFragment = gl_Position.xy / gl_Position.w;
#endif // RETICLE

    gl_PointSize = 1.0;

    // depp texture coordinates ..
    vec2 dtc = gl_Position.xy + vec2(1.0);
    dtc /= vec2(viewAttr.z, viewAttr.w);
    // .. now in 'viewport' coordinates

//#define DEPTHMIP_WIDTH depthTexParams.x
//#define DEPTHMIP_HEIGHT depthTexParams.y
//#define DEPTHMIP_MAXLEVEL depthTexParams.z

    int miplevel = min(max((int(log2(gl_PointSize))), 1), DEPTHMIP_MAXLEVEL);
    float exp = exp2(float(miplevel));

    dtc /= exp;
    ivec2 idtc = ivec2(dtc - vec2(0.5)); // because cast to "ivec2" performs a "round" as sfx !!! WTF !!!
    // now in relative coordinate of the mip level
    idtc.x += int(float(DEPTHMIP_WIDTH * (1.0 - 2.0 / exp)));
    idtc.y += DEPTHMIP_HEIGHT;

    vec4 depth1 = texelFetch2D(depthTex, idtc, 0);
    vec4 depth2 = texelFetch2D(depthTex, idtc + ivec2(1, 0), 0);
    vec4 depth3 = texelFetch2D(depthTex, idtc + ivec2(0, 1), 0);
    vec4 depth4 = texelFetch2D(depthTex, idtc + ivec2(1, 1), 0);

    float depth = max(max(depth1.x, depth2.x), max(depth3.x, depth4.x));

    vec4 depthPos; // ass of sphere in object space
    vec3 v = objPos.xyz - gl_ModelViewMatrixInverse[3].xyz;
    //float l = length(v);
    //v *= (l - rad) / l;
    depthPos.xyz = gl_ModelViewMatrixInverse[3].xyz + v;
    depthPos.w = 1.0;

    depthPos = gl_ModelViewProjectionMatrix * depthPos;
    depthPos.xyz /= depthPos.w;

    depthPos.z -= gl_DepthRange.near;
    depthPos.z /= gl_DepthRange.diff;
    depthPos.z += 1.0;
    depthPos.z *= 0.5;

    depth -= gl_DepthRange.near;
    depth /= gl_DepthRange.diff;

    if (depthPos.z > depth) {
        gl_Position.w = 0.0;
    }

//    gl_FrontColor = vec4(abs(depth - depthPos.z) * 20.0, 0.0, 0.0, 1.0);
    //gl_FrontColor = vec4(abs(depthPos.z));

//    gl_Position.w = 0.0;
}
]]>
        </snippet>
    </shader>
        
    </namespace>

    <namespace name="deferred">
        <shader name="spherevertex">
            <shader name="mipdepth6::spherevertex" />
        </shader>
        <shader name="otherSphereVertex">
            <shader name="mipdepth6::otherSphereVertex" />
        </shader>
            <shader name="spherefragment">
        <shader name="mipdepth6::spherefragment" />
        </shader>
        <shader name="pointfragment">
            <shader name="mipdepth6::pointfragment" />
        </shader>
    </namespace>

    <namespace name="simplesphere">
        <shader name="vertex">
            <shader name="mipdepth6::spherevertex" />
        </shader>
        <shader name="fragment">
            <shader name="mipdepth6::spherefragment" />
        </shader>
    </namespace>

</btf>
