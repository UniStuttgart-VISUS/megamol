<?xml version="1.0" encoding="utf-8"?>
<btf type="MegaMolGLSLShader" version="1.0" namespace="sphere_double">
    <include file="common"/>

    <shader name="vertex">
        <snippet type="version">110</snippet>
		<snippet type="string">#extension GL_ARB_gpu_shader_fp64 : enable</snippet>
        <snippet name="common::defines"/>
        <snippet name="attributes" type="string">
            <![CDATA[
uniform vec4 viewAttr;

#ifdef WITH_SCALING
uniform float scaling;
#endif // WITH_SCALING

#ifndef CALC_CAM_SYS
uniform vec3 camIn;
uniform vec3 camUp;
uniform vec3 camRight;
#endif // CALC_CAM_SYS

// clipping plane attributes
uniform vec4 clipDat;
uniform vec3 clipCol;

uniform vec4 inConsts1;
attribute float colIdx;
uniform sampler1D colTab;

varying dvec4 objPos;
varying dvec4 camPos;
varying dvec4 lightPos;
varying double squarRad;
varying double rad;

#ifdef DEFERRED_SHADING
varying float pointSize;
#endif

#ifdef RETICLE
varying vec2 centerFragment;
#endif // RETICLE

#define CONSTRAD inConsts1.x
#define MIN_COLV inConsts1.y
#define MAX_COLV inConsts1.z
#define COLTAB_SIZE inConsts1.w
]]>
        </snippet>
        <snippet name="MainParams" type="string">
            <![CDATA[
void main(void) {

    // remove the sphere radius from the w coordinates to the rad varyings
    dvec4 inPos = gl_Vertex;
    rad = (CONSTRAD < -0.5) ? inPos.w : CONSTRAD;
    inPos.w = 1.0;
    float cid = MAX_COLV - MIN_COLV;
    if (cid < 0.000001) {
        gl_FrontColor = gl_Color;
    } else {
        cid = (colIdx - MIN_COLV) / cid;
        cid = clamp(cid, 0.0, 1.0);
        
        cid *= (1.0 - 1.0 / COLTAB_SIZE);
        cid += 0.5 / COLTAB_SIZE;
        
        gl_FrontColor = texture1D(colTab, cid);
    }

#ifdef WITH_SCALING
    rad *= scaling;
#endif // WITH_SCALING

    squarRad = rad * rad;
]]>
        </snippet>
        <snippet name="posTrans" type="string">
            <![CDATA[

    // object pivot point in object space    
    objPos = inPos; // no w-div needed, because w is 1.0 (Because I know)

    // calculate cam position
    camPos = gl_ModelViewMatrixInverse[3]; // (C) by Christoph
    camPos.xyz -= objPos.xyz; // cam pos to glyph space

    // calculate light position in glyph space
    lightPos = gl_ModelViewMatrixInverse * gl_LightSource[0].position;
]]>
        </snippet>
        <snippet name="clippingPlane" type="string">
        <![CDATA[

    // clipping
    double od = clipDat.w - 1.0;
    if (any(notEqual(clipDat.xyz, vec3(0, 0, 0)))) {
        od = dot(objPos.xyz, clipDat.xyz) - rad;
    }

]]></snippet>
        <snippet name="SphereTouchPlane" type="string">
            <![CDATA[
    // Sphere-Touch-Plane-Approachâ„¢
    dvec2 winHalf = 2.0 / viewAttr.zw; // window size

    dvec2 d, p, q, h, dd;

    // get camera orthonormal coordinate system
    dvec4 tmp;

#ifdef CALC_CAM_SYS
    // camera coordinate system in object space
    tmp = gl_ModelViewMatrixInverse[3] + gl_ModelViewMatrixInverse[2];
    dvec3 camIn = normalize(tmp.xyz);
    tmp = gl_ModelViewMatrixInverse[3] + gl_ModelViewMatrixInverse[1];
    dvec3 camUp = tmp.xyz;
    dvec3 camRight = normalize(cross(camIn, camUp));
    camUp = cross(camIn, camRight);
#endif // CALC_CAM_SYS

    dvec2 mins, maxs;
    dvec3 testPos;
    dvec4 projPos;

    // projected camera vector
    dvec3 c2 = vec3(dot(camPos.xyz, camRight), dot(camPos.xyz, camUp), dot(camPos.xyz, camIn));

    dvec3 cpj1 = camIn * c2.z + camRight * c2.x;
    dvec3 cpm1 = camIn * c2.x - camRight * c2.z;

    dvec3 cpj2 = camIn * c2.z + camUp * c2.y;
    dvec3 cpm2 = camIn * c2.y - camUp * c2.z;
    
    d.x = length(cpj1);
    d.y = length(cpj2);

    dd = vec2(1.0) / d;

    p = squarRad * dd;
    q = d - p;
    h = sqrt(p * q);
    //h = vec2(0.0);
    
    p *= dd;
    h *= dd;

    cpj1 *= p.x;
    cpm1 *= h.x;
    cpj2 *= p.y;
    cpm2 *= h.y;

    // TODO: rewrite only using four projections, additions in homogenous coordinates and delayed perspective divisions.
    testPos = objPos.xyz + cpj1 + cpm1;
    projPos = gl_ModelViewProjectionMatrix * vec4(testPos, 1.0);
    projPos /= projPos.w;
    mins = projPos.xy;
    maxs = projPos.xy;

    testPos -= 2.0 * cpm1;
    projPos = gl_ModelViewProjectionMatrix * vec4(testPos, 1.0);
    projPos /= projPos.w;
    mins = min(mins, projPos.xy);
    maxs = max(maxs, projPos.xy);

    testPos = objPos.xyz + cpj2 + cpm2;
    projPos = gl_ModelViewProjectionMatrix * vec4(testPos, 1.0);
    projPos /= projPos.w;
    mins = min(mins, projPos.xy);
    maxs = max(maxs, projPos.xy);

    testPos -= 2.0 * cpm2;
    projPos = gl_ModelViewProjectionMatrix * vec4(testPos, 1.0);
    projPos /= projPos.w;
    mins = min(mins, projPos.xy);
    maxs = max(maxs, projPos.xy);
]]>
        </snippet>
        <snippet name="Output" type="string">
        <![CDATA[
    gl_Position = vec4((mins + maxs) * 0.5, 0.0, (od > clipDat.w) ? 0.0 : 1.0);
    maxs = (maxs - mins) * 0.5 * winHalf;
    gl_PointSize = float(max(maxs.x, maxs.y) + 0.5);
#ifdef DEFERRED_SHADING
    pointSize = gl_PointSize;
#endif
]]>
        </snippet>
        <snippet type="string">
            <![CDATA[
#ifdef SMALL_SPRITE_LIGHTING
    // for normal crowbaring on very small sprites
    lightPos.w = (clamp(gl_PointSize, 1.0, 5.0) - 1.0) / 4.0;
#else
    lightPos.w = 1.0;
#endif // SMALL_SPRITE_LIGHTING
    
#ifdef RETICLE
    centerFragment = gl_Position.xy / gl_Position.w;
#endif // RETICLE

    // gl_PointSize = 32.0;

}
]]>
        </snippet>
    </shader>

    <shader name="fragment">
        <snippet type="version">110</snippet>
		<snippet type="string">#extension GL_ARB_gpu_shader_fp64 : enable</snippet>
        <snippet name="common::defines"/>
        <snippet name="common::lighting::simple"/>
        <snippet name="body1" type="string">
            <![CDATA[
#ifdef BACKSIDE_ENABLED
uniform float hitsideFlag;
#endif // BACKSIDE_ENABLED

// clipping plane attributes
uniform vec4 clipDat;
uniform vec4 clipCol;

uniform vec4 viewAttr;

FLACH varying dvec4 objPos;
FLACH varying dvec4 camPos;
FLACH varying dvec4 lightPos;
FLACH varying double squarRad;
FLACH varying double rad;

#ifdef RETICLE
FLACH varying vec2 centerFragment;
#endif // RETICLE

void main(void) {
    dvec4 coord;
    dvec3 ray;
    double lambda;

    // transform fragment coordinates from window coordinates to view coordinates.
    coord = gl_FragCoord 
        * dvec4(viewAttr.z, viewAttr.w, 2.0, 0.0) 
        + dvec4(-1.0, -1.0, -1.0, 1.0);
    

    // transform fragment coordinates from view coordinates to object coordinates.
    coord = gl_ModelViewProjectionMatrixInverse * coord;
    coord /= coord.w;
    coord -= objPos; // ... and to glyph space
    

    // calc the viewing ray
    ray = normalize(coord.xyz - camPos.xyz);

    // chose color for lighting
    vec4 color = gl_Color;
    //vec4 color = vec4(uplParams.xyz, 1.0);

    // calculate the geometry-ray-intersection
    double d1 = -dot(camPos.xyz, ray);                       // projected length of the cam-sphere-vector onto the ray
    double d2s = dot(camPos.xyz, camPos.xyz) - d1 * d1;      // off axis of cam-sphere-vector and ray
    double radicand = squarRad - d2s;                        // square of difference of projected length and lambda
#ifdef CLIP
    if (radicand < 0.0) { 
#ifdef DISCARD_COLOR_MARKER
        color = vec3(1.0, 0.0, 0.0);       
#else // DISCARD_COLOR_MARKER
        discard; 
#endif // DISCARD_COLOR_MARKER
    }
#endif // CLIP

    double sqrtRadicand = sqrt(radicand);
#ifdef BACKSIDE_ENABLED
    lambda = d1 - sqrtRadicand * hitsideFlag;             // lambda
#else // BACKSIDE_ENABLED
    lambda = d1 - sqrtRadicand;                           // lambda
#endif // BACKSIDE_ENABLED

    dvec3 sphereintersection = lambda * ray + camPos.xyz;    // intersection point
    dvec3 normal = sphereintersection / rad;


    if (any(notEqual(clipDat.xyz, vec3(0, 0, 0)))) {
        dvec3 planeNormal = normalize(clipDat.xyz);
        dvec3 clipPlaneBase = planeNormal * clipDat.w;
        double d = -dot(planeNormal, clipPlaneBase - objPos.xyz);
        double dist1 = dot(sphereintersection, planeNormal) + d;
        double dist2 = d;
        double t = -(dot(planeNormal, camPos.xyz) + d) / dot(planeNormal, ray);
        dvec3 planeintersect = camPos.xyz + t * ray;
        if (dist1 > 0.0) {
            if (dist2 < rad) {
                if (length(planeintersect) < rad) {
                    sphereintersection = planeintersect;
                    normal = planeNormal;
                    color = mix(color, vec4(clipCol.rgb, 1.0), clipCol.a);
                } else {
                    discard;
                }
            } else {
                discard;
            }
        }
    }


    // "calc" normal at intersection point
#ifdef SMALL_SPRITE_LIGHTING
    normal = mix(-ray, normal, lightPos.w);
#endif // SMALL_SPRITE_LIGHTING

#ifdef AXISHINTS
    // debug-axis-hints
    double mc = min(abs(normal.x), min(abs(normal.y), abs(normal.z)));
    if (mc < 0.05)            { color = vec3(0.5); }
    if (abs(normal.x) > 0.98) { color = vec3(1.0, 0.0, 0.0); }
    if (abs(normal.y) > 0.98) { color = vec3(0.0, 1.0, 0.0); }
    if (abs(normal.z) > 0.98) { color = vec3(0.0, 0.0, 1.0); }
    if (normal.x < -0.99)     { color = vec3(0.5); }
    if (normal.y < -0.99)     { color = vec3(0.5); }
    if (normal.z < -0.99)     { color = vec3(0.5); }
#endif // AXISHINTS
]]>
</snippet>
<snippet name="out-lighting" type="string">
            <![CDATA[
    // phong lighting with directional light
	vec3 fRay = vec3(ray);
	vec3 fNorm = vec3(normal);
    gl_FragColor = vec4(LocalLighting(
		fRay, fNorm, vec3(lightPos.xyz), color.rgb), color.a);
    //gl_FragColor = color;
]]>
  </snippet>
  <snippet name="out-depth" type="string">
    <![CDATA[
    // calculate depth
#ifdef DEPTH
    dvec4 Ding = dvec4(sphereintersection + objPos.xyz, 1.0);
    double depth = dot(gl_ModelViewProjectionMatrixTranspose[2], Ding);
    double depthW = dot(gl_ModelViewProjectionMatrixTranspose[3], Ding);
    gl_FragDepth = float(((depth / depthW) + 1.0) * 0.5);
#ifndef CLIP
    gl_FragDepth = (radicand < 0.0) ? 1.0 : ((depth / depthW) + 1.0) * 0.5;
    gl_FragColor.rgb = (radicand < 0.0) ? gl_Color.rgb : gl_FragColor.rgb;
#endif // CLIP

#ifdef DISCARD_COLOR_MARKER
    Ding = dvec4(objPos.xyz, 1.0);
    depth = dot(gl_ModelViewProjectionMatrixTranspose[2], Ding);
    depthW = dot(gl_ModelViewProjectionMatrixTranspose[3], Ding);
    gl_FragDepth = ((depth / depthW) + 1.0) * 0.5;
#endif // DISCARD_COLOR_MARKER

#endif // DEPTH
]]>
</snippet>
<snippet name="footer" type="string">
<![CDATA[
#ifdef RETICLE
    coord = gl_FragCoord 
        * vec4(viewAttr.z, viewAttr.w, 2.0, 0.0) 
        + vec4(-1.0, -1.0, -1.0, 1.0);
    if (min(abs(coord.x - centerFragment.x), abs(coord.y - centerFragment.y)) < 0.002) {
        //gl_FragColor.rgb = vec3(1.0, 1.0, 0.5);
        gl_FragColor.rgb += vec3(0.3, 0.3, 0.5);
    }
#endif // RETICLE
//    gl_FragColor.rgb = normal;
}
]]>
        </snippet>
    </shader>

</btf>
