<?xml version="1.0" encoding="utf-8"?>
<btf type="MegaMolGLSLShader" version="1.0" namespace="mipdepth5">

    <namespace name="geoinitdepthspheres">
        <shader name="vertex">
            <snippet type="string"><![CDATA[
/****************************************************************************/
#version 130
#extension GL_EXT_gpu_shader4 : enable
void main(void) {
    gl_Position = gl_Vertex;
}
/****************************************************************************/
]]>
            </snippet>
        </shader>

        <shader name="geometry">
            <snippet type="string"><![CDATA[
/****************************************************************************/
#version 130
#extension GL_EXT_geometry_shader4 : enable
#extension GL_EXT_gpu_shader4 : enable

uniform vec3 cellPos;

uniform vec4 viewAttr;

uniform vec3 camIn;
uniform vec3 camUp;
uniform vec3 camRight;

uniform vec4 inConsts1;

out vec4 objPos;
out vec4 camPos;
out float squarRad;
out float rad;

#define CONSTRAD inConsts1.x
#define MIN_COLV inConsts1.y
#define MAX_COLV inConsts1.z
#define COLTAB_SIZE inConsts1.w

void main(void) {

    vec4 inPos1 = gl_PositionIn[0];
    vec4 inPos2 = vec4(cellPos + (cellPos - inPos1.xyz), inPos1.w);

    vec2 radii = (CONSTRAD < -0.5) ? vec2(inPos1.w, inPos2.w) : vec2(CONSTRAD);

    inPos1.w = 1.0;
    inPos2.w = 1.0;

    vec4 col1 = gl_FrontColorIn[0];
    vec4 col2 = gl_FrontColorIn[0];

    vec2 sqrRadii = radii * radii;

    vec4 objPos1 = inPos1;
    vec4 objPos2 = inPos2;

    vec4 camPos1 = gl_ModelViewMatrixInverse[3];
    vec4 camPos2 = camPos1;
    camPos1.xyz -= objPos1.xyz; // cam pos to glyph space
    camPos2.xyz -= objPos2.xyz;


    // Sphere-Touch-Plane-Approachâ„¢
    vec2 winHalf = 2.0 / viewAttr.zw; // window size
    vec4 d, p, q, h, dd;

    // get camera orthonormal coordinate system
//    vec4 tmp;

    vec4 mins, maxs;

    vec3 testPos1, testPos2;
    vec4 projPos1, projPos2;

    // projected camera vector
    vec3 c2_1 = vec3(dot(camPos1.xyz, camRight), dot(camPos1.xyz, camUp), dot(camPos1.xyz, camIn));
    vec3 c2_2 = vec3(dot(camPos2.xyz, camRight), dot(camPos2.xyz, camUp), dot(camPos2.xyz, camIn));


    vec3 cpj1_1 = camIn * c2_1.z + camRight * c2_1.x;
    vec3 cpj1_2 = camIn * c2_2.z + camRight * c2_2.x;
    vec3 cpm1_1 = camIn * c2_1.x - camRight * c2_1.z;
    vec3 cpm1_2 = camIn * c2_2.x - camRight * c2_2.z;

    vec3 cpj2_1 = camIn * c2_1.z + camUp * c2_1.y;
    vec3 cpj2_2 = camIn * c2_2.z + camUp * c2_2.y;
    vec3 cpm2_1 = camIn * c2_1.y - camUp * c2_1.z;
    vec3 cpm2_2 = camIn * c2_2.y - camUp * c2_2.z;

    d = vec4(length(cpj1_1), length(cpj2_1), length(cpj1_2), length(cpj2_2));
    dd = vec4(1.0) / d;

    p = sqrRadii.xxyy * dd;
    q = d - p;
    h = sqrt(p * q);

    p *= dd;
    h *= dd;

    cpj1_1 *= p.x;
    cpj1_2 *= p.z;
    cpm1_1 *= h.x;
    cpm1_2 *= h.z;
    cpj2_1 *= p.y;
    cpj2_2 *= p.w;
    cpm2_1 *= h.y;
    cpm2_2 *= h.w;

    testPos1 = objPos1.xyz + cpj1_1 + cpm1_1;
    testPos2 = objPos2.xyz + cpj1_2 + cpm1_2;
    projPos1 = gl_ModelViewProjectionMatrix * vec4(testPos1, 1.0);
    projPos2 = gl_ModelViewProjectionMatrix * vec4(testPos2, 1.0);
    projPos1 /= projPos1.w;
    projPos2 /= projPos2.w;
    mins.xy = projPos1.xy;
    mins.zw = projPos2.xy;
    maxs = mins;

    testPos1 -= 2.0 * cpm1_1;
    testPos2 -= 2.0 * cpm1_2;
    projPos1 = gl_ModelViewProjectionMatrix * vec4(testPos1, 1.0);
    projPos2 = gl_ModelViewProjectionMatrix * vec4(testPos2, 1.0);
    projPos1 /= projPos1.w;
    projPos2 /= projPos2.w;
    mins = min(mins, vec4(projPos1.xy, projPos2.xy));
    maxs = max(maxs, vec4(projPos1.xy, projPos2.xy));

    testPos1 = objPos1.xyz + cpj2_1 + cpm2_1;
    testPos2 = objPos2.xyz + cpj2_2 + cpm2_2;
    projPos1 = gl_ModelViewProjectionMatrix * vec4(testPos1, 1.0);
    projPos2 = gl_ModelViewProjectionMatrix * vec4(testPos2, 1.0);
    projPos1 /= projPos1.w;
    projPos2 /= projPos2.w;
    mins = min(mins, vec4(projPos1.xy, projPos2.xy));
    maxs = max(maxs, vec4(projPos1.xy, projPos2.xy));

    testPos1 -= 2.0 * cpm2_1;
    testPos2 -= 2.0 * cpm2_2;
    projPos1 = gl_ModelViewProjectionMatrix * vec4(testPos1, 1.0);
    projPos2 = gl_ModelViewProjectionMatrix * vec4(testPos2, 1.0);
    projPos1 /= projPos1.w;
    projPos2 /= projPos2.w;
    mins = min(mins, vec4(projPos1.xy, projPos2.xy));
    maxs = max(maxs, vec4(projPos1.xy, projPos2.xy));

    vec4 poss = (mins + maxs) * 0.5;
    maxs = (maxs - mins) * 0.5 * winHalf.xyxy;
    vec2 sizes = max(maxs.xz, maxs.yw) + 0.5; // diameter

    vec3 v = objPos1.xyz - gl_ModelViewMatrixInverse[3].xyz;
    float l = length(v);
    v *= (l + radii.x) / l;
    vec4 depthPos1 = vec4(gl_ModelViewMatrixInverse[3].xyz + v, 1.0);
    v = objPos2.xyz - gl_ModelViewMatrixInverse[3].xyz;
    l = length(v);
    v *= (l + radii.y) / l;
    vec4 depthPos2 = vec4(gl_ModelViewMatrixInverse[3].xyz + v, 1.0);

    depthPos1 = gl_ModelViewProjectionMatrix * depthPos1;
    depthPos2 = gl_ModelViewProjectionMatrix * depthPos2;
    depthPos1.xyz /= depthPos1.w;
    depthPos2.xyz /= depthPos2.w;

    gl_FrontColor = col1;
    gl_Position = vec4(poss.xy, depthPos1.z, 1.0);
    gl_PointSize = sizes.x;
    objPos = objPos1;
    camPos = camPos1;
    squarRad = sqrRadii.x;
    rad = radii.x;

    EmitVertex();
    EndPrimitive();
    gl_FrontColor = col2;
    gl_Position = vec4(poss.zw, depthPos2.z, 1.0);
    gl_PointSize = sizes.y;
    objPos = objPos2;
    camPos = camPos2;
    squarRad = sqrRadii.y;
    rad = radii.y;

    EmitVertex();
    EndPrimitive();

}
/****************************************************************************/
]]>
            </snippet>
        </shader>

    </namespace>

    <namespace name="instainitdepthspheres">
        <shader name="vertex">
            <snippet type="version">140</snippet>
            <snippet name="common::defines" />
            <snippet name="attributes" type="string">
                <![CDATA[
uniform vec4 viewAttr;

#ifdef WITH_SCALING
uniform float scaling;
#endif // WITH_SCALING

#ifndef CALC_CAM_SYS
uniform vec3 camIn;
uniform vec3 camUp;
uniform vec3 camRight;
#endif // CALC_CAM_SYS

uniform vec3 cellPos;
uniform vec4 inConsts1;

out vec4 objPos;
out vec4 camPos;
out float squarRad;
out float rad;

#define CONSTRAD inConsts1.x
#define MIN_COLV inConsts1.y
#define MAX_COLV inConsts1.z
#define COLTAB_SIZE inConsts1.w
]]>
            </snippet>

            <snippet name="MainParams" type="string">
<![CDATA[

void main(void) {

    // remove the sphere radius from the w coordinates to the rad varyings
    vec4 inPos;
    if (gl_InstanceID == 0) {
        inPos = gl_Vertex;
    } else {
        inPos = vec4(cellPos + (cellPos - gl_Vertex.xyz), gl_Vertex.w);
    }
    rad = (CONSTRAD < -0.5) ? inPos.w : CONSTRAD;
    inPos.w = 1.0;

    gl_FrontColor = gl_Color;

#ifdef WITH_SCALING
    rad *= scaling;
#endif // WITH_SCALING

    squarRad = rad * rad;
]]>
            </snippet>
            
            <snippet name="posTrans" type="string">
<![CDATA[

    // object pivot point in object space    
    objPos = inPos; // no w-div needed, because w is 1.0 (Because I know)

    // calculate cam position
    camPos = gl_ModelViewMatrixInverse[3]; // (C) by Christoph
    camPos.xyz -= objPos.xyz; // cam pos to glyph space
]]>
            </snippet>

            <snippet name="SphereTouchPlane" type="file">mipdepth_spheretouchplane.glsl</snippet>

            <snippet name="Output" type="string">
<![CDATA[
    vec4 depthPos; // ass of sphere in object space

    vec3 v = objPos.xyz - gl_ModelViewMatrixInverse[3].xyz;
    float l = length(v);
    v *= (l + rad) / l;
    depthPos.xyz = gl_ModelViewMatrixInverse[3].xyz + v;
    depthPos.w = 1.0;

    depthPos = gl_ModelViewProjectionMatrix * depthPos;
    depthPos.xyz /= depthPos.w;

    gl_Position = vec4((mins + maxs) * 0.5, depthPos.z, 1.0);
    maxs = (maxs - mins) * 0.5 * winHalf;
    gl_PointSize = abs(max(maxs.x, maxs.y)) + 0.5;
}
]]>
            </snippet>
        </shader>
    </namespace>
</btf>
