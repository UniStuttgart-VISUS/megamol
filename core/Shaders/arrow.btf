<?xml version="1.0" encoding="utf-8"?>
<btf type="MegaMolGLSLShader" version="1.0" namespace="arrow">
  <include file="common"/>
  <include file="bitflags"/>

  <shader name="vertex">
        <snippet type="version">110</snippet>
        <snippet type="string">
#extension GL_EXT_gpu_shader4 : enable
        </snippet>
        <snippet name="common::defines"/>
    <snippet name="attributes" type="string">
      <![CDATA[
uniform vec4 viewAttr;

uniform vec3 camIn;
uniform vec3 camUp;
uniform vec3 camRight;

uniform vec4 inConsts1;
uniform sampler1D colTab;
uniform float lengthScale;
uniform float lengthFilter;

#define CONSTRAD inConsts1.x
#define MIN_COLV inConsts1.y
#define MAX_COLV inConsts1.z
#define COLTAB_SIZE inConsts1.w
]]>
    </snippet>
          <snippet name="varyings" type="string">
            <![CDATA[
varying vec3 rad; // r, r^2, len
varying vec4 camPos;
varying vec4 objPos;
varying vec4 lightPos;

varying vec3 rotMatT0;
varying vec3 rotMatT1;
varying vec3 rotMatT2;
]]>
        </snippet>
        <snippet name="::bitflags::main" />
        <snippet type="string">
            <![CDATA[
attribute float colIdx;
attribute vec3 dir;
attribute uint flags;            
            
void main(void) {
]]>
</snippet>
<snippet type="string">
<![CDATA[
    // remove the sphere radius from the w coordinates to the rad varyings
    vec4 inPos = gl_Vertex;
    rad.x = (CONSTRAD < -0.5) ? inPos.w : CONSTRAD;
    inPos.w = 1.0;
    float cid = MAX_COLV - MIN_COLV;
    if (cid < 0.000001) {
        gl_FrontColor = gl_Color;
    } else {
        cid = (colIdx - MIN_COLV) / cid;
        cid = clamp(cid, 0.0, 1.0);
        
        cid *= (1.0 - 1.0 / COLTAB_SIZE);
        cid += 0.5 / COLTAB_SIZE;
        
        gl_FrontColor = texture1D(colTab, cid);
    }
]]>
  </snippet>
  <snippet type="string">
    <![CDATA[
    //const vec4 quatConst = vec4(1.0, -1.0, 0.5, 0.0);
    vec4 tmp, tmp1;

    vec3 fromPos = gl_Vertex.xyz + (dir * 0.5) * lengthScale;
    vec3 toPos = gl_Vertex.xyz - (dir * 0.5) * lengthScale;

    inPos = vec4((fromPos + toPos) * vec3(0.5), 1.0);

    rad.y = rad.x * rad.x;
    //rad.z = 1.0; // half cylinder length

    rotMatT0 = toPos - fromPos;
    rad.z = length(rotMatT0);
    rotMatT0 *= 1.0 / rad.z;
    rad.z *= 0.5;

    rotMatT2 = ((rotMatT0.x > 0.9) || (rotMatT0.x < -0.9)) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0); // normal on tmp
    rotMatT1 = cross(rotMatT0, rotMatT2);
    rotMatT1 = normalize(rotMatT1);
    rotMatT2 = cross(rotMatT1, rotMatT0);

    vec3 ttmp1 = rotMatT0;
    vec3 ttmp2 = rotMatT1;
    vec3 ttmp3 = rotMatT2;

    rotMatT0 = vec3(ttmp1.x, ttmp2.x, ttmp3.x);
    rotMatT1 = vec3(ttmp1.y, ttmp2.y, ttmp3.y);
    rotMatT2 = vec3(ttmp1.z, ttmp2.z, ttmp3.z);

//    vec4 pos = inPos;
//    pos.xyz += cor.x * rotMatT1 + cor.y * rotMatT2;
//    pos = gl_ModelViewProjectionMatrix * pos;
//    pos /= pos.w;
//    gl_Position = pos;

    // calculate cam position
    tmp = gl_ModelViewMatrixInverse[3]; // (C) by Christoph
    tmp.xyz -= inPos.xyz; // cam move
    camPos.xyz = rotMatT0 * tmp.x + rotMatT1 * tmp.y + rotMatT2 * tmp.z;
    camPos.w = 1.0;

    // calculate light position in glyph space
    lightPos = gl_ModelViewMatrixInverse * gl_LightSource[0].position - inPos; // note: w is bullshit now!
    lightPos.xyz = rotMatT0 * lightPos.x + rotMatT1 * lightPos.y + rotMatT2 * lightPos.z;

    objPos = inPos;

    // calculate point sprite
    vec2 winHalf = 2.0 / viewAttr.zw; // window size

    // lumberjackâ„¢ approach
    vec4 pos, projPos;
    vec4 pX, pY, pZ, pOP;
    vec2 mins, maxs, pp;

#define CYL_HALF_LEN rad.z
#define CYL_RAD rad.x

    projPos.w = 0.0;

    //pos = vec4(0.0, 0.0, 0.0, 1.0);
    //projPos.x = dot(rotMatT0.xyz, pos.xyz); // rotate
    //projPos.y = dot(rotMatT1.xyz, pos.xyz);
    //projPos.z = dot(rotMatT2.xyz, pos.xyz);
    pos = objPos; // + projPos; // move
    pos.w = 1.0; // now we're in object space
    pOP = gl_ModelViewProjectionMatrix * pos;

    pos = vec4(1.0, 0.0, 0.0, 1.0);
    projPos.x = dot(rotMatT0.xyz, pos.xyz); // rotate
    projPos.y = dot(rotMatT1.xyz, pos.xyz);
    projPos.z = dot(rotMatT2.xyz, pos.xyz);
    pos = objPos + projPos; // move
    pos.w = 1.0; // now we're in object space
    projPos = gl_ModelViewProjectionMatrix * pos;
    pX = (projPos - pOP) * CYL_HALF_LEN;

    pos = vec4(0.0, 1.0, 0.0, 1.0);
    projPos.x = dot(rotMatT0.xyz, pos.xyz); // rotate
    projPos.y = dot(rotMatT1.xyz, pos.xyz);
    projPos.z = dot(rotMatT2.xyz, pos.xyz);
    pos = objPos + projPos; // move
    pos.w = 1.0; // now we're in object space
    projPos = gl_ModelViewProjectionMatrix * pos;
    pY = (projPos - pOP) * CYL_RAD;

    pos = vec4(0.0, 0.0, 1.0, 1.0);
    projPos.x = dot(rotMatT0.xyz, pos.xyz); // rotate
    projPos.y = dot(rotMatT1.xyz, pos.xyz);
    projPos.z = dot(rotMatT2.xyz, pos.xyz);
    pos = objPos + projPos; // move
    pos.w = 1.0; // now we're in object space
    projPos = gl_ModelViewProjectionMatrix * pos;
    pZ = (projPos - pOP) * CYL_RAD;

    float l = camPos.y * camPos.y + camPos.z * camPos.z;
    vec4 p1, p2, p3, p4;
    if (l < rad.y) { // radius-square
        // camera is inside the cylinder
        //  so choose nearest cap and we are done
        gl_FrontSecondaryColor = vec4(0.5, 0.0, 0.0, 1.0);

        // calculate 4 points of doom
        pos = pOP + pX * sign(camPos.x);

        p1 = pos + pY + pZ;
        p2 = pos - pY + pZ;
        p3 = pos + pY - pZ;
        p4 = pos - pY - pZ;
        /*
        projPos = pos + cor.x * pY + cor.y * pZ;
        gl_Position = projPos / projPos.w;
        */

    } else {
        // camera is outside the cylinder
        //  so find touching planes
        gl_FrontSecondaryColor = vec4(0.0, 0.5, 0.0, 1.0);

        vec2 j = vec2(camPos.y, camPos.z);
        float d = length(j);
        j /= d;
        vec2 m = vec2(j.y, -j.x);
        float p = rad.y / d;
        float q = d - p;
        float h = sqrt(p * q);

        float minCylX = -CYL_HALF_LEN + (((rad.x - p * sign(-CYL_HALF_LEN - camPos.x)) * (-CYL_HALF_LEN - camPos.x)) / (-d * sign(-CYL_HALF_LEN - camPos.x) + rad.x));
        float maxCylX =  CYL_HALF_LEN + (((rad.x + p * sign(CYL_HALF_LEN - camPos.x)) * (CYL_HALF_LEN - camPos.x)) / (d * sign(CYL_HALF_LEN - camPos.x) + rad.x));

        //if (cor.y > 0.0) minCylX = maxCylX;

        pX /= CYL_HALF_LEN;

        vec2 i1 = j * p + m * h;
        i1 /= rad.x;
        vec2 i2 = j * p - m * h;
        i2 /= rad.x;

        //projPos = pOP + pX * minCylX + pY * i.x + pZ * i.y;
        //gl_Position = projPos / projPos.w;
        p1 = pOP + pX * minCylX + pY * i1.x + pZ * i1.y;
        p2 = pOP + pX * maxCylX + pY * i1.x + pZ * i1.y;
        p3 = pOP + pX * minCylX + pY * i2.x + pZ * i2.y;
        p4 = pOP + pX * maxCylX + pY * i2.x + pZ * i2.y;
    }

    p1 /= p1.w;
    p2 /= p2.w;
    p3 /= p3.w;
    p4 /= p4.w;

    vec2 minP = vec2(
      min(min(p1.x, p2.x), min(p3.x, p4.x)),
      min(min(p1.y, p2.y), min(p3.y, p4.y)));
    vec2 maxP = vec2(
      max(max(p1.x, p2.x), max(p3.x, p4.x)),
      max(max(p1.y, p2.y), max(p3.y, p4.y)));

    if (bitflag_test(flags, FLAG_SELECTED, FLAG_SELECTED)) {
        gl_FrontColor = vec4(1.0, 0.0, 0.0, 1.0);
    } else {
    }
    if (bitflag_test(flags, FLAG_FILTERED, FLAG_FILTERED)) {
    } else {
    gl_Position = vec4(
      (minP + maxP) * 0.5,
      0.5, 
      ( CYL_HALF_LEN < lengthFilter * 0.5) ? 0.0 : 1.0
      );
    }
    maxP = (maxP - minP) * 0.5 * winHalf;
    gl_PointSize = max(maxP.x, maxP.y) + 0.5;

}
]]>
        </snippet>
    </shader>

  <shader name="fragment">
    <snippet type="version">110</snippet>
    <snippet name="common::defines"/>
    <snippet name="vertex::attributes"/>
    <snippet name="vertex::varyings"/>
    <snippet name="common::lighting::simple"/>
    <snippet type="string">
      <![CDATA[
void main(void) {
    vec4 coord;
    vec3 ray, tmp;
    const float maxLambda = 50000.0;

    // transform fragment coordinates from window coordinates to view coordinates.
    coord = gl_FragCoord 
        * vec4(viewAttr.z, viewAttr.w, 2.0, 0.0) 
        + vec4(-1.0, -1.0, -1.0, 1.0);

    // transform fragment coordinates from view coordinates to object coordinates.
    coord = gl_ModelViewProjectionMatrixInverse * coord;
    coord /= coord.w;
    coord -= objPos; // ... and move


    // calc the viewing ray
    ray = (rotMatT0 * coord.x) + (rotMatT1 * coord.y) + (rotMatT2 * coord.z);
    ray = normalize(ray - camPos.xyz);

    vec4 cpos = camPos + vec4(rad.z, 0.0, 0.0, 0.0);

    // calculate the geometry-ray-intersection

    // arrow parameters
#define CYL_RAD (rad.x * 0.5)
#define CYL_RAD_SQ (rad.y * 0.25)
#define CYL_LEN (rad.z * 2.0)
#define TIP_RAD rad.x
#define TIP_LEN (rad.z * 0.8)

    // super unoptimized cone code

    float coneF = TIP_RAD / TIP_LEN;
    coneF *= coneF;
    float coneA = coneF * ray.x * ray.x - ray.y * ray.y - ray.z * ray.z;
    float coneB = 2.0 * (coneF * ray.x * cpos.x - ray.y * cpos.y - ray.z * cpos.z);
    float coneC = coneF * cpos.x * cpos.x - cpos.y * cpos.y - cpos.z * cpos.z;

    float rDc = dot(ray.yz, cpos.yz);
    float rDr = dot(ray.yz, ray.yz);

    vec2 radicand = vec2(
        (rDc * rDc) - (rDr * (dot(cpos.yz, cpos.yz) - CYL_RAD_SQ)),
        coneB * coneB - 4.0 * coneA * coneC);
    vec2 divisor = vec2(rDr, 2.0 * coneA);
    vec2 radix = sqrt(radicand);
    vec2 minusB = vec2(-rDc, -coneB);

    vec4 lambda = vec4(
        (minusB.x - radix.x) / divisor.x,
        (minusB.y + radix.y) / divisor.y,
        (minusB.x + radix.x) / divisor.x,
        (minusB.y - radix.y) / divisor.y);

    bvec4 invalid = bvec4(
        (divisor.x == 0.0) || (radicand.x < 0.0),
        (divisor.y == 0.0) || (radicand.y < 0.0),
        (divisor.x == 0.0) || (radicand.x < 0.0),
        (divisor.y == 0.0) || (radicand.y < 0.0));

    vec4 ix = cpos.xxxx + ray.xxxx * lambda;


    invalid.x = invalid.x || (ix.x < TIP_LEN) || (ix.x > CYL_LEN);
    invalid.y = invalid.y || (ix.y < 0.0) || (ix.y > TIP_LEN);
    invalid.z = invalid.z || !(((ix.z > TIP_LEN) || (ix.x > CYL_LEN)) && (ix.z < CYL_LEN));
    invalid.w = invalid.w || !((ix.w > 0.0) && (ix.w < TIP_LEN));

    if (invalid.x && invalid.y && invalid.z && invalid.w) {
#ifdef CLIP
        discard;
#endif // CLIP
    }

    vec3 intersection, color;
    vec3 normal = vec3(1.0, 0.0, 0.0);
    color = gl_Color.rgb;

    if (!invalid.y) {
        invalid.xzw = bvec3(true, true, true);
        intersection = cpos.xyz + (ray * lambda.y);
        normal = normalize(vec3(-TIP_RAD / TIP_LEN, normalize(intersection.yz)));
//        color = vec3(1.0, 0.0, 0.0);
    }
    if (!invalid.x) {
        invalid.zw = bvec2(true, true);
        intersection = cpos.xyz + (ray * lambda.x);
        normal = vec3(0.0, normalize(intersection.yz));
    }
    if (!invalid.z) {
        invalid.w = true;
        lambda.z = (CYL_LEN - cpos.x) / ray.x;
        intersection = cpos.xyz + (ray * lambda.z);
    }
    if (!invalid.w) {
        lambda.w = (TIP_LEN - cpos.x) / ray.x;
        intersection = cpos.xyz + (ray * lambda.w);
    }

    //color.r = 1.0 - intersection.x / CYL_LEN;
    //color.g = 0.0; // intersection.x / CYL_LEN;
    //color.b = intersection.x / CYL_LEN;

    // phong lighting with directional light
	//gl_FragColor = vec4(color.rgb, 1.0);
    gl_FragColor = vec4(LocalLighting(ray, normal, lightPos.xyz, color), 1.0);
    gl_FragColor.rgb = (0.75 * gl_FragColor.rgb) + (0.25 * color);


    // calculate depth
#ifdef DEPTH
    intersection -= (ray * dot(ray, vec3(rad.z, 0.0, 0.0)));
    tmp = intersection;
    intersection.x = dot(rotMatT0, tmp.xyz);
    intersection.y = dot(rotMatT1, tmp.xyz);
    intersection.z = dot(rotMatT2, tmp.xyz);

    intersection += objPos.xyz;

    vec4 Ding = vec4(intersection, 1.0);
    float depth = dot(gl_ModelViewProjectionMatrixTranspose[2], Ding);
    float depthW = dot(gl_ModelViewProjectionMatrixTranspose[3], Ding);
#ifndef CLIP
    if (invalid.x && invalid.y && invalid.z && invalid.w) { 
        gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);
        gl_FragDepth = 0.99999;
    } else {
#endif // CLIP
    gl_FragDepth = ((depth / depthW) + 1.0) * 0.5;
#ifndef CLIP
    }
#endif // CLIP

//    gl_FragColor.rgb *= ;

#endif // DEPTH

#ifdef RETICLE
    coord = gl_FragCoord 
        * vec4(viewAttr.z, viewAttr.w, 2.0, 0.0) 
        + vec4(-1.0, -1.0, -1.0, 1.0);
    if (min(abs(coord.x - centerFragment.x), abs(coord.y - centerFragment.y)) < 0.002) {
    	gl_FragColor.rgb += vec3(0.3, 0.3, 0.5);
    }
#endif // RETICLE
}
]]>
    </snippet>
  </shader>

</btf>
