<?xml version="1.0" encoding="utf-8"?>
<btf type="MegaMolGLSLShader" version="1.0" namespace="simplegeosphere">
  <include file="common"/>

  <snippet name="commondefines" type="string">
    <!-- 
//#define FOGGING_SES
//#define FLATSHADE_SES
#define OGL_DEPTH_SES

#define CLIP
#define DEPTH
#define SMALL_SPRITE_LIGHTING
//#define CALC_CAM_SYS

#ifdef DEBUG
#undef CLIP
#define RETICLE
#define AXISHINTS
#endif // DEBUG

//#define BULLSHIT

#ifndef FLACH
#define FLACH
#endif

//#define SET_COLOR
//#define COLOR1 vec3( 249.0/255.0, 187.0/255.0, 103.0/255.0)
#define COLOR1 vec3( 183.0/255.0, 204.0/255.0, 220.0/255.0)

//#define COLOR_SES
#define COLOR_BLUE vec3( 145.0/255.0, 191.0/255.0, 219.0/255.0)
#define COLOR_GREEN vec3( 161.0/255.0, 215.0/255.0, 106.0/255.0)
#define COLOR_YELLOW vec3( 255.0/255.0, 255.0/255.0, 191.0/255.0)
#define COLOR_RED vec3( 228.0/255.0, 37.0/255.0, 34.0/255.0)

-->
  </snippet>

  <shader name="vertex">
    <snippet type="version">150</snippet>
    <snippet type="string">
      <!--
uniform mat4 modelview;
uniform mat4 proj;
uniform vec4 inConsts1;
uniform sampler1D colTab;

// clipping plane attributes
uniform vec4 clipDat;
uniform vec4 clipCol;

in vec4 vertex;
in vec4 color;

out vec4 inColor;

#define CONSTRAD inConsts1.x
#define MIN_COLV inConsts1.y
#define MAX_COLV inConsts1.z
#define COLTAB_SIZE inConsts1.w

void main(void) {
    gl_Position = vertex;
    float rad = vertex.w;
    if (CONSTRAD > -0.5) {
      gl_Position.w = CONSTRAD;
      rad = CONSTRAD;
    }
    
    // clipping
    if (any(notEqual(clipDat.xyz, vec3(0, 0, 0)))) {
        float od = dot(vertex.xyz, clipDat.xyz) - rad;
        if (od > clipDat.w) {
          gl_Position = vec4(1.0, 1.0, 1.0, 0.0);
        }
    }   
    
    if (COLTAB_SIZE > 0.0) {    
        float cid = MAX_COLV - MIN_COLV;    
        if (cid < 0.000001) {
            inColor = texture(colTab, 0.5 / COLTAB_SIZE);
        } else {
            cid = (color.r - MIN_COLV) / cid;
            cid = clamp(cid, 0.0, 1.0);
        
            cid *= (1.0 - 1.0 / COLTAB_SIZE);
            cid += 0.5 / COLTAB_SIZE;
        
            inColor = texture(colTab, cid);
        }
    } else {
        inColor = color;
    }
}
-->
    </snippet>
  </shader>

  <shader name="geometry">
    <snippet type="version">150</snippet>
    <snippet type="string">
      <!--
layout (points) in;
layout (triangle_strip, max_vertices = 4) out;

uniform mat4 modelview;
uniform mat4 proj;
uniform vec4 viewAttr; // TODO: check fragment position if viewport starts not in (0, 0)
uniform vec4 lightPos;

#ifndef CALC_CAM_SYS
uniform vec3 camIn;
uniform vec3 camUp;
uniform vec3 camRight;
#endif // CALC_CAM_SYS

in vec4 inColor[1];

out vec4 color;
out vec4 objPos;
out vec4 camPos;
out vec4 light;
out float rad;
out float squareRad;

mat4 modelviewproj = proj*modelview; // TODO Move this to the CPU?
mat4 modelviewInv = inverse(modelview);

void main(void) {
    
    // remove the sphere radius from the w coordinates to the rad varyings
    vec4 inPos = gl_in[0].gl_Position;
    rad = inPos.w;
    squareRad = rad*rad;
    inPos.w = 1.0;

    // object pivot point in object space    
    objPos = inPos; // no w-div needed, because w is 1.0 (Because I know)

    // calculate cam position
    camPos = modelviewInv[3]; // (C) by Christoph
    camPos.xyz -= objPos.xyz; // cam pos to glyph space
    
    // calculate light position in glyph space
    // USE THIS LINE TO GET POSITIONAL LIGHTING
    //lightPos = modelviewInv * gl_LightSource[0].position - objPos;
    // USE THIS LINE TO GET DIRECTIONAL LIGHTING
    light = modelviewInv*normalize(lightPos);
    
    color = inColor[0];    
    
       // Sphere-Touch-Plane-Approachâ„¢
    vec2 winHalf = 2.0 / viewAttr.zw; // window size

    vec2 d, p, q, h, dd;

    // get camera orthonormal coordinate system
    vec4 tmp;

/*#ifdef CALC_CAM_SYS
    // camera coordinate system in object space
    tmp = gl_ModelViewMatrixInverse[3] + gl_ModelViewMatrixInverse[2];
    vec3 camIn = normalize(tmp.xyz);
    tmp = gl_ModelViewMatrixInverse[3] + gl_ModelViewMatrixInverse[1];
    vec3 camUp = tmp.xyz;
    vec3 camRight = normalize(cross(camIn, camUp));
    camUp = cross(camIn, camRight);
#endif // CALC_CAM_SYS*/

    vec2 mins, maxs;
    vec3 testPos;
    vec4 projPos;

    
#ifdef HALO
    squarRad = (rad + HALO_RAD) * (rad + HALO_RAD);
#endif // HALO
    
    // projected camera vector
    vec3 c2 = vec3(dot(camPos.xyz, camRight), dot(camPos.xyz, camUp), dot(camPos.xyz, camIn));

    vec3 cpj1 = camIn * c2.z + camRight * c2.x;
    vec3 cpm1 = camIn * c2.x - camRight * c2.z;

    vec3 cpj2 = camIn * c2.z + camUp * c2.y;
    vec3 cpm2 = camIn * c2.y - camUp * c2.z;
    
    d.x = length(cpj1);
    d.y = length(cpj2);

    dd = vec2(1.0) / d;

    p = squareRad * dd;
    q = d - p;
    h = sqrt(p * q);
    //h = vec2(0.0);
    
    p *= dd;
    h *= dd;

    cpj1 *= p.x;
    cpm1 *= h.x;
    cpj2 *= p.y;
    cpm2 *= h.y;

    testPos = objPos.xyz + cpj1 + cpm1;
    projPos = modelviewproj * vec4(testPos, 1.0);
    projPos /= projPos.w;
    mins = projPos.xy;
    maxs = projPos.xy;

    testPos -= 2.0 * cpm1;
    projPos = modelviewproj * vec4(testPos, 1.0);
    projPos /= projPos.w;
    mins = min(mins, projPos.xy);
    maxs = max(maxs, projPos.xy);

    testPos = objPos.xyz + cpj2 + cpm2;
    projPos = modelviewproj * vec4(testPos, 1.0);
    projPos /= projPos.w;
    mins = min(mins, projPos.xy);
    maxs = max(maxs, projPos.xy);

    testPos -= 2.0 * cpm2;
    projPos = modelviewproj * vec4(testPos, 1.0);
    projPos /= projPos.w;
    mins = min(mins, projPos.xy);
    maxs = max(maxs, projPos.xy);

    //gl_Position = vec4((mins + maxs) * 0.5, 0.0, /*1.0*/inPos.w);
    //gl_PointSize = max((maxs.x - mins.x) * winHalf.x, (maxs.y - mins.y) * winHalf.y) * 0.5;
    
    // Cube vertices
    /*vec4 posA =  modelviewproj * vec4(objPos.xyz + (camRight + camUp + camIn)*rad, 1.0);
    vec4 posB =  modelviewproj * vec4(objPos.xyz + (camRight - camUp + camIn)*rad, 1.0);
    vec4 posC =  modelviewproj * vec4(objPos.xyz + (-camRight + camUp + camIn)*rad, 1.0);
    vec4 posD =  modelviewproj * vec4(objPos.xyz + (-camRight - camUp + camIn)*rad, 1.0);
    vec4 posE =  modelviewproj * vec4(objPos.xyz + (-camRight - camUp - camIn)*rad, 1.0);
    vec4 posF =  modelviewproj * vec4(objPos.xyz + (camRight - camUp - camIn)*rad, 1.0);
    vec4 posG =  modelviewproj * vec4(objPos.xyz + (camRight + camUp - camIn)*rad, 1.0);
    vec4 posH =  modelviewproj * vec4(objPos.xyz + (-camRight + camUp - camIn)*rad, 1.0);*/
    
    // Triangle strip
    /*gl_Position = posA; EmitVertex();
    gl_Position = posB; EmitVertex();
    gl_Position = posC; EmitVertex();
    gl_Position = posD; EmitVertex();
    gl_Position = posE; EmitVertex();
    gl_Position = posB; EmitVertex();
    gl_Position = posF; EmitVertex();
    gl_Position = posG; EmitVertex();
    gl_Position = posE; EmitVertex();
    gl_Position = posH; EmitVertex();
    gl_Position = posC; EmitVertex();
    gl_Position = posG; EmitVertex();
    gl_Position = posA; EmitVertex();
    gl_Position = posB; EmitVertex();
    gl_Position = posC; EmitVertex();
    gl_Position = posD; EmitVertex();
    gl_Position = posA; EmitVertex();
    gl_Position = posB; EmitVertex();*/
    gl_Position = vec4(mins.x, maxs.y, 0.0, inPos.w); EmitVertex();
    gl_Position = vec4(mins.x, mins.y, 0.0, inPos.w); EmitVertex();
    gl_Position = vec4(maxs.x, maxs.y, 0.0, inPos.w); EmitVertex();
    gl_Position = vec4(maxs.x, mins.y, 0.0, inPos.w); EmitVertex();
    EndPrimitive();
}
-->
    </snippet>
  </shader>

  <shader name="fragment">
    <snippet type="version">150</snippet>
    <snippet name="commondefines"/>
    <snippet name="::common::lighting::simple"/>
    <snippet type="string">
      <!--
uniform vec4 viewAttr; // TODO: check fragment position if viewport starts not in (0, 0)
uniform mat4 modelview;
uniform mat4 proj;

// clipping plane attributes
uniform vec4 clipDat;
uniform vec4 clipCol;

in vec4 color;
in vec4 objPos;
in vec4 camPos;
in vec4 light;
in float rad;
in float squareRad;

#ifndef CALC_CAM_SYS
uniform vec3 camIn;
uniform vec3 camUp;
uniform vec3 camRight;
#endif // CALC_CAM_SYS

mat4 modelviewproj = proj*modelview; // TODO Move this to the CPU?
mat4 modelviewprojInv = inverse(modelviewproj);
mat4 modelviewprojTrans = transpose(modelviewproj);

void main(void) {
    vec4 coord;
    vec3 ray;
    float lambda;
    vec3 colOut;
    vec3 sphereintersection = vec3( 0.0);
    vec3 normal;

    // transform fragment coordinates from window coordinates to view coordinates.
    coord = gl_FragCoord 
        * vec4(viewAttr.z, viewAttr.w, 2.0, 0.0) 
        + vec4(-1.0, -1.0, -1.0, 1.0);
    
    // transform fragment coordinates from view coordinates to object coordinates.
    coord = modelviewprojInv * coord;
    coord /= coord.w;
    coord -= objPos; // ... and to glyph space
    
    // calc the viewing ray
    ray = normalize(coord.xyz - camPos.xyz);

    // calculate the geometry-ray-intersection
    float d1 = -dot(camPos.xyz, ray);                       // projected length of the cam-sphere-vector onto the ray
    float d2s = dot(camPos.xyz, camPos.xyz) - d1 * d1;      // off axis of cam-sphere-vector and ray
    float radicand = squareRad - d2s;                        // square of difference of projected length and lambda
#ifdef CLIP
    lambda = d1 - sqrt(radicand);                           // lambda

    float radicand2 = 0.0;
    if( radicand < 0.0 ) {
        discard;
    } else {
        // chose color for lighting
        colOut = color.rgb;
        sphereintersection = lambda * ray + camPos.xyz;    // intersection point
        // "calc" normal at intersection point
        normal = sphereintersection / rad;
    }    
#endif // CLIP

    if (any(notEqual(clipDat.xyz, vec3(0, 0, 0)))) {
        vec3 planeNormal = normalize(clipDat.xyz);
        vec3 clipPlaneBase = planeNormal * clipDat.w;
        float d = -dot(planeNormal, clipPlaneBase - objPos.xyz);
        float dist1 = dot(sphereintersection, planeNormal) + d;
        float dist2 = d;
        float t = -(dot(planeNormal, camPos.xyz) + d) / dot(planeNormal, ray);
        vec3 planeintersect = camPos.xyz + t * ray;
        if (dist1 > 0.0) {
            if (dist2 < rad) {
                if (length(planeintersect) < rad) {
                    sphereintersection = planeintersect;
                    normal = planeNormal;
                    colOut = mix(colOut, clipCol.rgb, clipCol.a);
                } else {
                    discard;
                }
            } else {
                discard;
            }
        }
    }

    // phong lighting with directional light
    //gl_FragColor = vec4(LocalLighting(ray, normal, lightPos.xyz, color), 1.0);
    gl_FragColor = vec4(LocalLighting(ray, normal, light.xyz, colOut), color.w);
    
    // calculate depth
#ifdef DEPTH
    vec4 Ding = vec4(sphereintersection + objPos.xyz, 1.0);
    float depth = dot(modelviewprojTrans[2], Ding);
    float depthW = dot(modelviewprojTrans[3], Ding);
    gl_FragDepth = ((depth / depthW) + 1.0) * 0.5;
    
#ifndef CLIP
    gl_FragDepth = (radicand < 0.0) ? 1.0 : ((depth / depthW) + 1.0) * 0.5;
    gl_FragColor.rgb = (radicand < 0.0) ? color.rgb : gl_FragColor.rgb;
#endif // CLIP

#endif // DEPTH

    
#ifdef RETICLE
    coord = gl_FragCoord 
        * vec4(viewAttr.z, viewAttr.w, 2.0, 0.0) 
        + vec4(-1.0, -1.0, -1.0, 1.0);
    if (min(abs(coord.x - centerFragment.x), abs(coord.y - centerFragment.y)) < 0.002) {
        //gl_FragColor.rgb = vec3(1.0, 1.0, 0.5);
        gl_FragColor.rgb += vec3(0.3, 0.3, 0.5);
    }
#endif // RETICLE

//gl_FragColor.rgb = normal; // DEBUG
//gl_FragColor = color; // DEBUG
}
-->
    </snippet>
  </shader>
</btf>
