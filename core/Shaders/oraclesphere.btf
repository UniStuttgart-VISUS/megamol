<?xml version="1.0" encoding="utf-8"?>
<btf type="MegaMolGLSLShader" version="1.0" namespace="oraclesphere">
    <include file="common"/>
    <include file="simplesphere"/>

    <shader name="mixvertex">
        <snippet type="version">110</snippet>
        <snippet type="string">
            <![CDATA[
void main(void) {
    gl_Position = ftransform();
    gl_TexCoord[0] = gl_MultiTexCoord0;
    gl_TexCoord[1] = gl_MultiTexCoord1;
}
]]>
        </snippet>
    </shader>

    <shader name="mixfragment">
        <snippet type="version">110</snippet>
        <snippet name="common::defines"/>
        <snippet type="string">
            <![CDATA[
uniform sampler2D paramTex;
uniform sampler2D colourTex;
]]>
        </snippet>
        <snippet name="LightDirectional" type="file">lightdirectional.glsl</snippet>
        <snippet type="string">
            <![CDATA[

uniform vec4 viewAttr;
uniform vec3 globCamPos;

uniform vec3 lightPos;

void main(void) {
    vec4 params = texture2D(paramTex, gl_TexCoord[0].xy);
    vec4 colour = texture2D(colourTex, gl_TexCoord[0].xy);

    //vec4 coord;
    vec3 camPos = globCamPos - params.xyz;
    vec3 ray = normalize(-gl_TexCoord[1].xyz);
    float squarRad = params.w * params.w;
    float lambda;

    // calculate the geometry-ray-intersection
    float d1 = -dot(camPos.xyz, ray);                       // projected length of the cam-sphere-vector onto the ray
    float d2s = dot(camPos.xyz, camPos.xyz) - d1 * d1;      // off axis of cam-sphere-vector and ray
    float radicand = squarRad - d2s;                        // square of difference of projected length and lambda
#ifdef CLIP
    if (radicand < 0.0) { 
#ifdef DISCARD_COLOR_MARKER
        colour = vec4(1.0, 0.0, 0.0, 1.0);
#else // DISCARD_COLOR_MARKER
        discard; 
#endif // DISCARD_COLOR_MARKER
    }
#endif // CLIP

    float sqrtRadicand = sqrt(radicand);
    lambda = d1 - sqrtRadicand;                           // lambda

    vec3 sphereintersection = lambda * ray + camPos.xyz;    // intersection point
    vec3 normal = sphereintersection / params.w;

/*
    if (any(notEqual(clipDat.xyz, vec3(0, 0, 0)))) {
        vec3 planeNormal = normalize(clipDat.xyz);
        vec3 clipPlaneBase = planeNormal * clipDat.w;
        float d = -dot(planeNormal, clipPlaneBase - objPos.xyz);
        float dist1 = dot(sphereintersection, planeNormal) + d;
        float dist2 = d;
        float t = -(dot(planeNormal, camPos.xyz) + d) / dot(planeNormal, ray);
        vec3 planeintersect = camPos.xyz + t * ray;
        if (dist1 > 0.0) {
            if (dist2 < rad) {
                if (length(planeintersect) < rad) {
                    sphereintersection = planeintersect;
                    normal = planeNormal;
                    color = vec4(clipCol, 1.0);
                } else {
                    discard;
                }
            } else {
                discard;
            }
        }
    }
*/

    // phong lighting with directional light
    gl_FragColor = vec4(LocalLighting(ray, normal, lightPos, colour.rgb), colour.a);

    gl_FragDepth = 0.5;

    /*

    // calculate depth
#ifdef DEPTH
    vec4 Ding = vec4(sphereintersection + objPos.xyz, 1.0);
    float depth = dot(gl_ModelViewProjectionMatrixTranspose[2], Ding);
    float depthW = dot(gl_ModelViewProjectionMatrixTranspose[3], Ding);
    gl_FragDepth = ((depth / depthW) + 1.0) * 0.5;
#ifndef CLIP
    gl_FragDepth = (radicand < 0.0) ? 1.0 : ((depth / depthW) + 1.0) * 0.5;
    gl_FragColor.rgb = (radicand < 0.0) ? gl_Color.rgb : gl_FragColor.rgb;
#endif // CLIP

#ifdef DISCARD_COLOR_MARKER
    Ding = vec4(objPos.xyz, 1.0);
    depth = dot(gl_ModelViewProjectionMatrixTranspose[2], Ding);
    depthW = dot(gl_ModelViewProjectionMatrixTranspose[3], Ding);
    gl_FragDepth = ((depth / depthW) + 1.0) * 0.5;
#else // DISCARD_COLOR_MARKER

#endif // DEPTH

    */

}
]]>
        </snippet>
    </shader>

    <shader name="vertex">
        <shader name="simplesphere::vertex"/>
    </shader>

    <shader name="fragment">
        <snippet type="version">110</snippet>
        <snippet name="common::defines"/>
        <snippet type="string">
            <![CDATA[
#ifdef BACKSIDE_ENABLED
uniform float hitsideFlag;
#endif // BACKSIDE_ENABLED

// clipping plane attributes
uniform vec4 clipDat;
uniform vec3 clipCol;

uniform vec4 viewAttr;

uniform float datascale;

FLACH varying vec4 objPos;
FLACH varying vec4 camPos;
FLACH varying vec4 lightPos;
FLACH varying float squarRad;
FLACH varying float rad;

#ifdef RETICLE
FLACH varying vec2 centerFragment;
#endif // RETICLE

void main(void) {
    vec4 coord;
    vec3 ray;
    float lambda;
    float lambdaFactor = 0.0001; // TODO: What is the right value?
    float distScale = rad * lambdaFactor / squarRad;

    // transform fragment coordinates from window coordinates to view coordinates.
    coord = gl_FragCoord 
        * vec4(viewAttr.z, viewAttr.w, 2.0, 0.0) 
        + vec4(-1.0, -1.0, -1.0, 1.0);

    // transform fragment coordinates from view coordinates to object coordinates.
    coord = gl_ModelViewProjectionMatrixInverse * coord;
    coord /= coord.w;
    coord -= objPos; // ... and to glyph space

    // calc the viewing ray
    ray = normalize(coord.xyz - camPos.xyz);

    lambda = length(camPos.xyz) - rad;
    lambda *= lambdaFactor;

    //lambda = dot(camPos.xyz, camPos.xyz) - squarRad;
    //lambda *= 0.00001;

    //lambda = abs(camPos.x) + abs(camPos.y) + abs(camPos.z);
    //lambda *= 0.001;

    //lambda = 0.5;

    vec3 d = camPos.xyz - dot(camPos.xyz, ray) * ray;
    //gl_FragDepth = (dot(d, d) > squarRad) ? -10000.0 : lambda;
    gl_FragDepth = lambda + dot(d, d) * distScale;

    //gl_FragDepth = lambda;
    gl_FragData[0].rgba = vec4(objPos.xyz, rad) * datascale;
    gl_FragData[1] = gl_Color;
}
]]>
        </snippet>
    </shader>

</btf>
