<?xml version="1.0" encoding="utf-8"?>
<btf type="MegaMolGLSLShader" version="1.0" namespace="mipdepth2">

    <namespace name="geospheres">
        <shader name="vertex">
            <snippet type="string"><![CDATA[
/****************************************************************************/
#version 130
#extension GL_EXT_gpu_shader4 : enable

in float colIdx;
out float colourIndex;

void main(void) {
    gl_Position = gl_Vertex;
    gl_FrontColor = gl_Color;
    colourIndex = colIdx;
}
/****************************************************************************/
]]>
            </snippet>
        </shader>

        <shader name="geometry">
            <snippet type="string"><![CDATA[
/****************************************************************************/
#version 130
#extension GL_EXT_geometry_shader4 : enable
#extension GL_EXT_gpu_shader4 : enable

#define CLIP
#define DEPTH

uniform vec4 viewAttr;
uniform vec3 camIn;
uniform vec3 camUp;
uniform vec3 camRight;

uniform vec3 cellPos;

uniform vec4 inConsts1;
in float colourIndex[];
uniform sampler1D colTab;

uniform sampler2D depthTex;
uniform ivec3 depthTexParams;
#define DEPTHMIP_WIDTH depthTexParams.x
#define DEPTHMIP_HEIGHT depthTexParams.y
#define DEPTHMIP_MAXLEVEL depthTexParams.z

out vec4 objPos;
out vec4 camPos;
out vec4 lightPos;
out float squarRad;
out float rad;

#define CONSTRAD inConsts1.x
#define MIN_COLV inConsts1.y
#define MAX_COLV inConsts1.z
#define COLTAB_SIZE inConsts1.w

void main(void) {

    vec4 inPos1 = gl_PositionIn[0];
    vec4 inPos2 = vec4(cellPos + (cellPos - inPos1.xyz), inPos1.w);

    vec2 radii = (CONSTRAD < -0.5) ? vec2(inPos1.w, inPos2.w) : vec2(CONSTRAD);

    inPos1.w = 1.0;
    inPos2.w = 1.0;

    vec4 col1, col2;

    float colRange = MAX_COLV - MIN_COLV;
    if (colRange < 0.000001) {
        col1 = gl_FrontColorIn[0];
        col2 = gl_FrontColorIn[0];
    } else {
        vec2 colVals = vec2(colourIndex[0]);
        colVals = (colVals - MIN_COLV) / colRange;
        colVals = clamp(colVals, 0.0, 1.0);

        colVals *= (1.0 - 1.0 / COLTAB_SIZE);
        colVals += 0.5 / COLTAB_SIZE;

        col1 = texture1D(colTab, colVals.x);
        col2 = texture1D(colTab, colVals.y);
    }

    vec2 sqrRadii = radii * radii;

    vec4 objPos1 = inPos1;
    vec4 objPos2 = inPos2;

    vec4 camPos1 = gl_ModelViewMatrixInverse[3];
    vec4 camPos2 = camPos1;
    camPos1.xyz -= objPos1.xyz; // cam pos to glyph space
    camPos2.xyz -= objPos2.xyz;

    lightPos = gl_ModelViewMatrixInverse * gl_LightSource[0].position;
    lightPos.w = 1.0;

    // Sphere-Touch-Plane-Approachâ„¢
    vec2 winHalf = 2.0 / viewAttr.zw; // window size
    vec4 d, p, q, h, dd;

    // get camera orthonormal coordinate system
    //vec4 tmp;

    vec4 mins, maxs;

    vec3 testPos1, testPos2;
    vec4 projPos1, projPos2;

    // projected camera vector
    vec3 c2_1 = vec3(dot(camPos1.xyz, camRight), dot(camPos1.xyz, camUp), dot(camPos1.xyz, camIn));
    vec3 c2_2 = vec3(dot(camPos2.xyz, camRight), dot(camPos2.xyz, camUp), dot(camPos2.xyz, camIn));


    vec3 cpj1_1 = camIn * c2_1.z + camRight * c2_1.x;
    vec3 cpj1_2 = camIn * c2_2.z + camRight * c2_2.x;
    vec3 cpm1_1 = camIn * c2_1.x - camRight * c2_1.z;
    vec3 cpm1_2 = camIn * c2_2.x - camRight * c2_2.z;

    vec3 cpj2_1 = camIn * c2_1.z + camUp * c2_1.y;
    vec3 cpj2_2 = camIn * c2_2.z + camUp * c2_2.y;
    vec3 cpm2_1 = camIn * c2_1.y - camUp * c2_1.z;
    vec3 cpm2_2 = camIn * c2_2.y - camUp * c2_2.z;

    d = vec4(length(cpj1_1), length(cpj2_1), length(cpj1_2), length(cpj2_2));
    dd = vec4(1.0) / d;

    p = sqrRadii.xxyy * dd;
    q = d - p;
    h = sqrt(p * q);

    p *= dd;
    h *= dd;

    cpj1_1 *= p.x;
    cpj1_2 *= p.z;
    cpm1_1 *= h.x;
    cpm1_2 *= h.z;
    cpj2_1 *= p.y;
    cpj2_2 *= p.w;
    cpm2_1 *= h.y;
    cpm2_2 *= h.w;

    testPos1 = objPos1.xyz + cpj1_1 + cpm1_1;
    testPos2 = objPos2.xyz + cpj1_2 + cpm1_2;
    projPos1 = gl_ModelViewProjectionMatrix * vec4(testPos1, 1.0);
    projPos2 = gl_ModelViewProjectionMatrix * vec4(testPos2, 1.0);
    projPos1 /= projPos1.w;
    projPos2 /= projPos2.w;
    mins.xy = projPos1.xy;
    mins.zw = projPos2.xy;
    maxs = mins;

    testPos1 -= 2.0 * cpm1_1;
    testPos2 -= 2.0 * cpm1_2;
    projPos1 = gl_ModelViewProjectionMatrix * vec4(testPos1, 1.0);
    projPos2 = gl_ModelViewProjectionMatrix * vec4(testPos2, 1.0);
    projPos1 /= projPos1.w;
    projPos2 /= projPos2.w;
    mins = min(mins, vec4(projPos1.xy, projPos2.xy));
    maxs = max(maxs, vec4(projPos1.xy, projPos2.xy));

    testPos1 = objPos1.xyz + cpj2_1 + cpm2_1;
    testPos2 = objPos2.xyz + cpj2_2 + cpm2_2;
    projPos1 = gl_ModelViewProjectionMatrix * vec4(testPos1, 1.0);
    projPos2 = gl_ModelViewProjectionMatrix * vec4(testPos2, 1.0);
    projPos1 /= projPos1.w;
    projPos2 /= projPos2.w;
    mins = min(mins, vec4(projPos1.xy, projPos2.xy));
    maxs = max(maxs, vec4(projPos1.xy, projPos2.xy));

    testPos1 -= 2.0 * cpm2_1;
    testPos2 -= 2.0 * cpm2_2;
    projPos1 = gl_ModelViewProjectionMatrix * vec4(testPos1, 1.0);
    projPos2 = gl_ModelViewProjectionMatrix * vec4(testPos2, 1.0);
    projPos1 /= projPos1.w;
    projPos2 /= projPos2.w;
    mins = min(mins, vec4(projPos1.xy, projPos2.xy));
    maxs = max(maxs, vec4(projPos1.xy, projPos2.xy));

    vec4 poss = (mins + maxs) * 0.5;
    maxs = (maxs - mins) * 0.5 * winHalf.xyxy;
    vec2 sizes = max(maxs.xz, maxs.yw) + 0.5; // diameter

//////////////    gl_Position = vec4((mins + maxs) * 0.5, 0.0, (od > clipDat.w) ? 0.0 : 1.0);
//////////////    maxs = (maxs - mins) * 0.5 * winHalf;
//////////////    gl_PointSize = max(maxs.x, maxs.y) + 0.5; 

    // depth texture coordinates ...
    vec4 dtc = poss + vec4(1.0);
    dtc /= viewAttr.zwzw; // ... in 'viewport' coordinates

    ivec2 levels = clamp(ivec2(log2(sizes)), 1, DEPTHMIP_MAXLEVEL);
    vec2 exps = exp2(vec2(levels));

    dtc /= exps.xxyy;
    ivec4 idtc = ivec4(dtc - vec4(0.5)); // because cast to "ivec2" performs a "round" as sfx !!! WTF !!!
    // now in relative coordinate of the mip level
    idtc += ivec4(
        int(float(DEPTHMIP_WIDTH * (1.0 - 2.0 / exps.x))),
        DEPTHMIP_HEIGHT,
        int(float(DEPTHMIP_WIDTH * (1.0 - 2.0 / exps.y))),
        DEPTHMIP_HEIGHT);

    vec2 depths =
        max(
            max(
                vec2(
                    texelFetch2D(depthTex, idtc.xy, 0).r,
                    texelFetch2D(depthTex, idtc.zw, 0).r),
                vec2(
                    texelFetch2D(depthTex, idtc.xy + ivec2(1, 0), 0).r,
                    texelFetch2D(depthTex, idtc.zw + ivec2(1, 0), 0).r)
            ), max(
                vec2(
                    texelFetch2D(depthTex, idtc.xy + ivec2(0, 1), 0).r,
                    texelFetch2D(depthTex, idtc.zw + ivec2(0, 1), 0).r),
                vec2(
                    texelFetch2D(depthTex, idtc.xy + ivec2(1, 1), 0).r,
                    texelFetch2D(depthTex, idtc.zw + ivec2(1, 1), 0).r)
            )
        );

    vec4 depthPos1 = vec4(objPos1.xyz, 1.0);
    vec4 depthPos2 = vec4(objPos2.xyz, 1.0);
//////////////    vec3 v = objPos.xyz - gl_ModelViewMatrixInverse[3].xyz;
//////////////    //float l = length(v);
//////////////    //v *= (l - rad) / l;
//////////////    depthPos.xyz = gl_ModelViewMatrixInverse[3].xyz + v;
//////////////    depthPos.w = 1.0;

    depthPos1 = gl_ModelViewProjectionMatrix * depthPos1;
    depthPos1.xyz /= depthPos1.w;
    depthPos2 = gl_ModelViewProjectionMatrix * depthPos2;
    depthPos2.xyz /= depthPos2.w;

    depthPos1.z -= gl_DepthRange.near;
    depthPos2.z -= gl_DepthRange.near;
    depthPos1.z /= gl_DepthRange.diff;
    depthPos2.z /= gl_DepthRange.diff;
    depthPos1.z += 1.0;
    depthPos2.z += 1.0;
    depthPos1.z *= 0.5;
    depthPos2.z *= 0.5;

    depths -= vec2(gl_DepthRange.near);
    depths /= vec2(gl_DepthRange.diff);

    if (depthPos1.z <= depths.x) {
        gl_FrontColor = col1;
        gl_Position = vec4(poss.xy, 0.0, 1.0);
        gl_PointSize = sizes.x;
        objPos = objPos1;
        camPos = camPos1;
        squarRad = sqrRadii.x;
        rad = radii.x;

        EmitVertex();
        EndPrimitive();
    }

    if (depthPos2.z <= depths.y) {
        gl_FrontColor = col2;
        gl_Position = vec4(poss.zw, 0.0, 1.0);
        gl_PointSize = sizes.y;
        objPos = objPos2;
        camPos = camPos2;
        squarRad = sqrRadii.y;
        rad = radii.y;

        EmitVertex();
        EndPrimitive();
    }

}

/****************************************************************************/
]]>
            </snippet>
        </shader>

    </namespace>

    <namespace name="instaspheres">
        <shader name="vertex">
            <snippet type="string"><![CDATA[
/****************************************************************************/
#version 140
#extension GL_EXT_geometry_shader4 : enable
#extension GL_EXT_gpu_shader4 : enable
]]>
            </snippet>
            <snippet name="common::defines"/>
            <snippet name="attributes" type="string">
                <![CDATA[
uniform vec4 viewAttr;

#ifdef WITH_SCALING
uniform float scaling;
#endif // WITH_SCALING

#ifndef CALC_CAM_SYS
uniform vec3 camIn;
uniform vec3 camUp;
uniform vec3 camRight;
#endif // CALC_CAM_SYS

uniform vec3 cellPos;

// clipping plane attributes
uniform vec4 clipDat;
uniform vec3 clipCol;

uniform vec4 inConsts1;
in float colIdx;
uniform sampler1D colTab;

uniform sampler2D depthTex;
uniform ivec3 depthTexParams;
#define DEPTHMIP_WIDTH depthTexParams.x
#define DEPTHMIP_HEIGHT depthTexParams.y
#define DEPTHMIP_MAXLEVEL depthTexParams.z

out vec4 objPos;
out vec4 camPos;
out vec4 lightPos;
out float squarRad;
out float rad;

#ifdef RETICLE
out vec2 centerFragment;
#endif // RETICLE

#define CONSTRAD inConsts1.x
#define MIN_COLV inConsts1.y
#define MAX_COLV inConsts1.z
#define COLTAB_SIZE inConsts1.w
]]>
        </snippet>
        <snippet name="MainParams" type="string">
            <![CDATA[
void main(void) {

    // remove the sphere radius from the w coordinates to the rad varyings
    vec4 inPos;
    if (gl_InstanceID == 0) {
        inPos = gl_Vertex;
    } else {
        inPos = vec4(cellPos + (cellPos - gl_Vertex.xyz), gl_Vertex.w);
    }
    rad = (CONSTRAD < -0.5) ? inPos.w : CONSTRAD;
    inPos.w = 1.0;
    float cid = MAX_COLV - MIN_COLV;
    if (cid < 0.000001) {
        gl_FrontColor = gl_Color;
    } else {
        cid = (colIdx - MIN_COLV) / cid;
        cid = clamp(cid, 0.0, 1.0);
        
        cid *= (1.0 - 1.0 / COLTAB_SIZE);
        cid += 0.5 / COLTAB_SIZE;
        
        gl_FrontColor = texture1D(colTab, cid);
    }

#ifdef WITH_SCALING
    rad *= scaling;
#endif // WITH_SCALING

    squarRad = rad * rad;
]]>
        </snippet>

        <snippet name="posTrans" type="string">
<![CDATA[

    // object pivot point in object space    
    objPos = inPos; // no w-div needed, because w is 1.0 (Because I know)

    // calculate cam position
    camPos = gl_ModelViewMatrixInverse[3]; // (C) by Christoph
    camPos.xyz -= objPos.xyz; // cam pos to glyph space

    // calculate light position in glyph space
    lightPos = gl_ModelViewMatrixInverse * gl_LightSource[0].position;
]]>
        </snippet>

        <snippet name="clippingPlane" type="string">
<![CDATA[

    // clipping
    float od = clipDat.w - 1.0;
    if (any(notEqual(clipDat.xyz, vec3(0, 0, 0)))) {
        od = dot(objPos.xyz, clipDat.xyz) - rad;
    }

]]>
        </snippet>
        
        <snippet name="SphereTouchPlane" type="file">mipdepth_spheretouchplane.glsl</snippet>

        <snippet name="Output" type="string">
<![CDATA[
    gl_Position = vec4((mins + maxs) * 0.5, 0.0, (od > clipDat.w) ? 0.0 : 1.0);
    maxs = (maxs - mins) * 0.5 * winHalf;
    gl_PointSize = max(maxs.x, maxs.y) + 0.5; // diameter
]]>
        </snippet>
        <snippet type="string">
<![CDATA[

#ifdef SMALL_SPRITE_LIGHTING
    // for normal crowbaring on very small sprites
    lightPos.w = (clamp(gl_PointSize, 1.0, 5.0) - 1.0) / 4.0;
#else
    lightPos.w = 1.0;
#endif // SMALL_SPRITE_LIGHTING
    
#ifdef RETICLE
    centerFragment = gl_Position.xy / gl_Position.w;
#endif // RETICLE

    // gl_PointSize = 32.0;

    // depp texture coordinates ..
    vec2 dtc = gl_Position.xy + vec2(1.0);
    dtc /= vec2(viewAttr.z, viewAttr.w);
    // .. now in 'viewport' coordinates

//#define DEPTHMIP_WIDTH depthTexParams.x
//#define DEPTHMIP_HEIGHT depthTexParams.y
//#define DEPTHMIP_MAXLEVEL depthTexParams.z

    int miplevel = min(max((int(log2(gl_PointSize))), 1), DEPTHMIP_MAXLEVEL);
    float exp = exp2(float(miplevel));

    dtc /= exp;
    ivec2 idtc = ivec2(dtc - vec2(0.5)); // because cast to "ivec2" performs a "round" as sfx !!! WTF !!!
    // now in relative coordinate of the mip level
    idtc.x += int(float(DEPTHMIP_WIDTH * (1.0 - 2.0 / exp)));
    idtc.y += DEPTHMIP_HEIGHT;

    vec4 depth1 = texelFetch2D(depthTex, idtc, 0);
    vec4 depth2 = texelFetch2D(depthTex, idtc + ivec2(1, 0), 0);
    vec4 depth3 = texelFetch2D(depthTex, idtc + ivec2(0, 1), 0);
    vec4 depth4 = texelFetch2D(depthTex, idtc + ivec2(1, 1), 0);

    float depth = max(max(depth1.x, depth2.x), max(depth3.x, depth4.x));

    vec4 depthPos; // ass of sphere in object space
    vec3 v = objPos.xyz - gl_ModelViewMatrixInverse[3].xyz;
    //float l = length(v);
    //v *= (l - rad) / l;
    depthPos.xyz = gl_ModelViewMatrixInverse[3].xyz + v;
    depthPos.w = 1.0;

    depthPos = gl_ModelViewProjectionMatrix * depthPos;
    depthPos.xyz /= depthPos.w;

    depthPos.z -= gl_DepthRange.near;
    depthPos.z /= gl_DepthRange.diff;
    depthPos.z += 1.0;
    depthPos.z *= 0.5;

    depth -= gl_DepthRange.near;
    depth /= gl_DepthRange.diff;

    if (depthPos.z > depth) {
        gl_Position.w = 0.0;
    }

//    gl_FrontColor = vec4(abs(depth - depthPos.z) * 20.0, 0.0, 0.0, 1.0);
    //gl_FrontColor = vec4(abs(depthPos.z));

//    gl_Position.w = 0.0;
}
]]>
            </snippet>
        </shader>

    </namespace>

</btf>
