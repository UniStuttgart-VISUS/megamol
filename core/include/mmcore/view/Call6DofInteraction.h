/*
 * Call6DofInteraction.h
 *
 * Copyright (C) 2014 by VISUS (Universitaet Stuttgart).
 * Alle Rechte vorbehalten.
 */

#ifndef MEGAMOLCORE_CALL6DOFPARAMS_H_INCLUDED
#define MEGAMOLCORE_CALL6DOFPARAMS_H_INCLUDED
#if (defined(_MSC_VER) && (_MSC_VER > 1000))
#pragma once
#endif /* (defined(_MSC_VER) && (_MSC_VER > 1000)) */

#include <array>
#include <cstdint>

#include "mmcore/Call.h"
#include "mmcore/factories/CallAutoDescription.h"

#include "vislib/graphics/graphicstypes.h"
#include "vislib/math/Point.h"
#include "vislib/math/Quaternion.h"


namespace megamol {
namespace core {
namespace view {

/**
 * A call that transports interaction data generated by a 6 DOF device like
 * a tracker.
 */
class Call6DofInteraction : public Call {

public:
    typedef uint32_t ButtonMaskType;
    typedef vislib::math::Point<vislib::graphics::SceneSpaceType, 3> PointType;
    typedef vislib::math::Quaternion<vislib::graphics::SceneSpaceType> QuaternionType;

    /**
     * Answer the name of this module.
     *
     * @return The name of this module.
     */
    static inline const char* ClassName(void) {
        return "Call6DofInteraction";
    }

    /**
     * Answer a human readable description of this module.
     *
     * @return A human readable description of this module.
     */
    static inline const char* Description(void) {
        return "Transports interaction parameters from a 6 DOF device.";
    }

    /**
     * Answer the number of functions used for this call.
     *
     * @return The number of functions used for this call.
     */
    static inline unsigned int FunctionCount(void) {
        return static_cast<unsigned int>(Call6DofInteraction::INTENTS.size());
    }

    /**
     * Answer the name of the function used for this call.
     *
     * @param idx The index of the function to return it's name.
     *
     * @return The name of the requested function.
     */
    static const char* FunctionName(unsigned int idx);

    /** Index of the function retrieving all data from the device. */
    static const unsigned int IDX_GET_STATE;

    /** Initialises a new instance. */
    Call6DofInteraction(void);

    /** Finalises the instance. */
    virtual ~Call6DofInteraction(void);

    /**
     * Answer the state of all buttons.
     *
     * @return The state mask, which of each bit represents abutton
     *         of the device.
     */
    inline ButtonMaskType GetButtonStates(void) const {
        return this->buttonStates;
    }

    /**
     * Answer the current orientation of the interaction device.
     *
     * @return The orientation of the interaction device.
     */
    inline const QuaternionType& GetOrientation(void) const {
        return this->orientation;
    }

    /**
     * Answer the current position of the interaction device.
     *
     * @return The position of the interaction device.
     */
    inline const PointType& GetPosition(void) const {
        return this->position;
    }

    /**
     * Gets the rigid body to retrieve the state of.
     *
     * The caller will set this parameter to the name it is interested in.
     * If the string is empty, the callee should use the first rigid body
     * it can find.
     *
     * @return The name of the ridgid body to retrieve the state of.
     */
    inline const std::string& GetRigidBody(void) const {
        return this->rigidBody;
    }

    /**
     * Answer whether the given button is pressed according to the button
     * state mask.
     *
     * @param button The (zero-based) index of the button to be tested.
     */
    inline bool IsButtonDown(const int button) const {
        return ((this->buttonStates & (1 << button)) != 0);
    }

    bool IsValid(void) const;

    /**
     * Update the state of a specific button.
     *
     * @param button The (zero-based) index of the button to be updated.
     * @param isDown The new state of the button.
     */
    void SetButtonState(const int button, const bool isDown);

    /**
     * Update the state of all buttons.
     *
     * @param buttonStates The mask representing the state of all buttons.
     */
    inline void SetButtonStates(const ButtonMaskType buttonStates) {
        this->buttonStates = buttonStates;
    }

    /**
     * Update the current orientation of the interaction device.
     *
     * @param orientation
     */
    inline void SetOrientation(const QuaternionType& orientation) {
        this->orientation = orientation;
    }

    /**
     * Update the current position of the interaction device.
     *
     * @param position
     */
    inline void SetPosition(const PointType& position) {
        this->position = position;
    }

    /**
     * Set the name of the rigid body to retrieve the state of. If this
     * string is empty, use the first one found.
     *
     * @param rigidBody The name of the rigid body to retrieve the state of.
     */
    inline void SetRigidBody(const std::string& rigidBody) {
        this->rigidBody = rigidBody;
    }

private:
    /** The intents that are provided by the call. */
    static const std::array<std::string, 1> INTENTS;

    /** Hold the state of the buttons. */
    ButtonMaskType buttonStates;

#ifdef _MSC_VER
#pragma warning(disable : 4251)
#endif /* _MSC_VER */
    /** Holds the current orientation of the device. */
    QuaternionType orientation;

    /** Holds the current position of the device. */
    PointType position;

    /** The name of the rigid body to retrieve the state of. */
    std::string rigidBody;
#ifdef _MSC_VER
#pragma warning(default : 4251)
#endif /* _MSC_VER */
};

/** Description class typedef. */
typedef factories::CallAutoDescription<Call6DofInteraction> Call6DofInteractionDescription;

} /* end namespace view */
} /* end namespace core */
} /* end namespace megamol */

#endif /* MEGAMOLCORE_CALL6DOFPARAMS_H_INCLUDED */
