project(expat)

set(expat_SRCS
  src/xmlparse.c
  src/xmlrole.c
  src/xmltok.c
  src/xmltok_impl.c
  src/xmltok_ns.c)

add_library(expat STATIC ${expat_SRCS})
target_compile_definitions(${PROJECT_NAME} PRIVATE XML_LARGE_SIZE)
target_include_directories(expat PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/src)

if(UNIX)
  # configuration options
  set(XML_CONTEXT_BYTES 1024)
  set(XML_DTD ON)
  set(XML_NS ON)

  if(XML_DTD)
    target_compile_definitions(expat XML_DTD=1)
  else()
    target_compile_definitions(expat XML_DTD=0)
  endif()
  if(XML_NS)
    target_compile_definitions(expat XML_NS=1)
  else()
    target_compile_definitions(expat XML_NS=0)
  endif()

  target_compile_definitions(expat XML_CONTEXT_BYTES=1024)

  include(CheckIncludeFiles)
  include(CheckFunctionExists)
  include(CheckSymbolExists)
  include(TestBigEndian)
  include(CheckTypeSize)

  test_big_endian(ENDIAN_TEST)
  if(ENDIAN_TEST)
    target_compile_definitions(expat BYTEORDER=4321)
  else()
    target_compile_definitions(expat BYTEORDER=1234)
  endif()

  check_function_exists(bcopy HAVE_BCOPY)
  if(HAVE_BCOPY)
    target_compile_definitions(expat HAVE_BCOPY)
  endif()
  check_include_files(dlfcn.h HAVE_DLFCN_H)
  if(HAVE_DLFCN_H)
    target_compile_definitions(expat HAVE_DLFCN_H)
  endif()
  check_include_files(fcntl.h HAVE_FCNTL_H)
  if(HAVE_FCNTL_H)
    target_compile_definitions(expat HAVE_FCNTL_H)
  endif()
  check_function_exists(getpagesize HAVE_GETPAGESIZE)
  if(HAVE_GETPAGESIZE)
    target_compile_definitions(expat HAVE_GETPAGESIZE)
  endif()
  check_include_files(inttypes.h HAVE_INTTYPES_H)
  if(HAVE_INTTYPES_H)
    target_compile_definitions(expat HAVE_INTTYPES_H)
  endif()
  check_function_exists(memmove HAVE_MEMMOVE)
  if(HAVE_MEMMOVE)
    target_compile_definitions(expat HAVE_MEMMOVE)
  endif()
  check_include_files(memory.h HAVE_MEMORY_H)
  if(HAVE_MEMORY_H)
    target_compile_definitions(expat HAVE_MEMORY_H)
  endif()
  check_function_exists(mmap HAVE_MMAP)
  if(HAVE_MMAP)
    target_compile_definitions(expat HAVE_MMAP)
  endif()
  check_include_files(stdint.h HAVE_STDINT_H)
  if(HAVE_STDINT_H)
    target_compile_definitions(expat HAVE_STDINT_H)
  endif()
  check_include_files(stdlib.h HAVE_STDLIB_H)
  if(HAVE_STDLIB_H)
    target_compile_definitions(expat HAVE_STDLIB_H)
  endif()
  check_include_files(strings.h HAVE_STRINGS_H)
  if(HAVE_STRINGS_H)
    target_compile_definitions(expat HAVE_STRINGS_H)
  endif()
  check_include_files(string.h HAVE_STRING_H)
  if(HAVE_STRING_H)
    target_compile_definitions(expat HAVE_STRING_H)
  endif()
  check_include_files("sys/stat.h" HAVE_SYS_STAT_H)
  if(HAVE_SYS_STAT_H)
    target_compile_definitions(expat HAVE_SYS_STAT_H)
  endif()
  check_include_files("sys/types.h" HAVE_SYS_TYPES_H)
  if(HAVE_SYS_TYPES_H)
    target_compile_definitions(expat HAVE_SYS_TYPES_H)
  endif()
  check_include_files(unistd.h HAVE_UNISTD_H)
  if(HAVE_UNISTD_H)
    target_compile_definitions(expat HAVE_UNISTD_H)
  endif()
endif()

if(CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
  set_target_properties(${PROJECT_NAME} PROPERTIES LINK_FLAGS "/ignore:4996")
elseif(CMAKE_CXX_COMPILER_ID MATCHES "GNU")
  target_compile_options(${PROJECT_NAME} PRIVATE -fshort-wchar -fno-strict-aliasing)
endif()
