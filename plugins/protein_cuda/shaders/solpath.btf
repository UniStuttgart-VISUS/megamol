<?xml version="1.0" encoding="utf-8"?>
<btf type="MegaMolGLSLShader" version="1.0" namespace="solpath">

  <namespace name="pathline">
    <shader name="vert">
      <snippet type="version">120</snippet>
      <snippet type="string">
        <![CDATA[

uniform vec4 paramSpan; // timeMin, 1/timeRange, speedMin, 1/speedRange
#define TIMEMIN       paramSpan.x
#define TIMERANGEINV  paramSpan.y
#define SPEEDMIN      paramSpan.z
#define SPEEDRANGEINV paramSpan.w

attribute vec2 params; // time, cluster
#define TIME    params.x
#define CLUSTER params.y

varying vec2 values; // time, speed
#define OUTTIME  values.x
#define OUTSPEED values.y

void main() {
  gl_Position = gl_ModelViewProjectionMatrix * vec4(gl_Vertex.xyz, 1.0f);

  OUTTIME = clamp((TIME - TIMEMIN) * TIMERANGEINV, 0.0, 1.0);
  OUTSPEED = clamp((gl_Vertex.w - SPEEDMIN) * SPEEDRANGEINV, 0.0, 1.0);
}
]]>
      </snippet>
    </shader>

    <shader name="frag">
      <snippet type="version">120</snippet>
      <snippet type="string">
        <![CDATA[

varying vec2 values;

void main() {
  float t = values.x;
  t *= 3.0;
  vec3 c, cd;
  if (t < 1.0) {
    c = vec3(1.0, 0.0, 0.0);
    cd = vec3(0.0, 1.0, 0.0);
  } else if (t < 2.0) {
    c = vec3(1.0, 1.0, 0.0);
    cd = vec3(-1.0, 0.0, 1.0);
    t -= 1.0;
  } else {
    c = vec3(0.0, 1.0, 1.0);
    cd = vec3(0.0, -1.0, 0.0);
    t -= 2.0;
  }

  float a = values.y;
  float b = 1.0 - a;
  gl_FragColor = vec4((c + cd * t) * a + b * vec3(0.3, 0.3, 0.3), 1.0);
}
]]>
      </snippet>
    </shader>
  </namespace>

  <namespace name="dots">
    <shader name="vert">
      <snippet type="version">120</snippet>
      <snippet type="string">
        <![CDATA[

uniform vec4 paramSpan; // timeMin, 1/timeRange, speedMin, 1/speedRange
#define TIMEMIN       paramSpan.x
#define TIMERANGEINV  paramSpan.y
#define SPEEDMIN      paramSpan.z
#define SPEEDRANGEINV paramSpan.w

attribute vec2 params; // time, cluster
#define TIME    params.x
#define CLUSTER params.y

void main() {
  gl_Position = gl_ModelViewProjectionMatrix * vec4(gl_Vertex.xyz, 1.0f);
  gl_FrontColor = vec4(0.5, 0.75, 1.0, gl_Color.a);
}
]]>
      </snippet>
    </shader>

    <shader name="frag">
      <snippet type="version">120</snippet>
      <snippet type="string">
        <![CDATA[
void main() {
  gl_FragColor = gl_Color;
}
]]>
      </snippet>
    </shader>
  </namespace>

</btf>
