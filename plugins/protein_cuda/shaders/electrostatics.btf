<?xml version="1.0" encoding="utf-8"?>
<btf type="MegaMolGLSLShader" version="1.0" namespace="electrostatics">    

    <include file="colormaps"/>

    <snippet name="ppLighting" type="string">
<!--
// ray:      the eye to fragment ray vector
// normal:   the normal of this fragment
// lightPos: the position of the light source
// color:    the base material color
vec3 LocalLighting(const in vec3 ray, const in vec3 normal, const in vec3 lightPos, 
    const in vec3 color, const vec4 lightparams) {

    vec3 lightDir = normalize(lightPos);

//    vec4 lightparams = vec4(0.2, 0.8, 0.4, 10.0);
#define LIGHT_AMBIENT lightparams.x
#define LIGHT_DIFFUSE lightparams.y
#define LIGHT_SPECULAR lightparams.z
#define LIGHT_EXPONENT lightparams.w
    float nDOTl = dot(normal, lightDir);

    vec3 r = normalize(2.0 * vec3(nDOTl) * normal - lightDir);
    return 
        LIGHT_AMBIENT * color +
        LIGHT_DIFFUSE * color * max(nDOTl, 0.0) +
        LIGHT_SPECULAR * vec3(pow(max(dot(r, -ray), 0.0), LIGHT_EXPONENT));
}
-->
    </snippet>
    
    <snippet name="colorMix" type="string">
<!--

/* Mix three colors (RGBA) */
vec4 MixColors (float val, 
                float min, 
                float thresh, 
                float max,
                vec4 colorMin,
                vec4 colorThresh,
                vec4 colorMax) {
    val = clamp(val, min, max);
    if (val < thresh) {
        return (val-min)/(thresh-min)*colorThresh + 
            (1.0f - (val-min)/(thresh-min))*colorMin;
    } 
    else {
        return ((val-thresh)/(max-thresh))*colorMax + 
            (1.0f - ((val-thresh)/(max-thresh)))*colorThresh;
    }
}

/* Mix three colors (RGB) */
vec3 MixColors (float val, 
                float min, 
                float thresh, 
                float max,
                vec3 colorMin,
                vec3 colorThresh,
                vec3 colorMax) {
    val = clamp(val, min, max);
    if (val < thresh) {
        return (val-min)/(thresh-min)*colorThresh + 
            (1.0f - (val-min)/(thresh-min))*colorMin;
    } 
    else {
        return ((val-thresh)/(max-thresh))*colorMax + 
            (1.0f - ((val-thresh)/(max-thresh)))*colorThresh;
    }
}

/* Mix two colors (RGBA) */
vec4 MixColors(float val, 
               float min, 
               float max,
               vec4 colorMin,
               vec4 colorMax) {
    val = clamp(val, min, max);
    return colorMin*(1.0f - (abs(val-min)/abs(max-min)))+
        colorMax*(abs(val-min)/abs(max-min));
}

/* Mix two colors (RGB) */
vec3 MixColors(float val, 
               float min, 
               float max,
               vec3 colorMin,
               vec3 colorMax) {
    val = clamp(val, min, max);
    return colorMin*(1.0f - (abs(val-min)/abs(max-min)))+
        colorMax*(abs(val-min)/abs(max-min));
}
    
-->
    </snippet>
    
    <namespace name="pplsurface">
    
        <shader name="vertexMapped">
        <snippet type="version">120</snippet>
        <snippet type="string">
<!--

uniform sampler3D potentialTex0;
uniform sampler3D potentialTex1;

attribute vec3 posNew;
attribute vec3 normal;
attribute vec3 texCoordNew;
attribute float corruptTriangleFlag;
attribute float pathLen;
attribute float surfAttrib;

varying vec3 lightDir;
varying vec3 view;
varying vec3 normalFrag; 
varying vec3 posNewFrag; 
varying float pathLenFrag;
varying float surfAttribFrag;
varying float corruptFrag;

void main() {   
    
    // Vertex positions
    gl_Position = gl_ModelViewProjectionMatrix*vec4(posNew, 1.0);
    
    // Get view vector in eye space
    view = (gl_ModelViewMatrix*vec4(posNew, 1.0)).xyz;
    
    // Transformation of normal into eye space
    normalFrag = gl_NormalMatrix*normal;
    
    // Get the direction of the light
    // Note: is already transformed using the modelview matrix when calling glLight
    lightDir = gl_LightSource[0].position.xyz;
    
    // Texture coordinates
    gl_TexCoord[0].stp = texCoordNew;
    
    // Object space positions
    posNewFrag = posNew; 
    
    // Path length
    pathLenFrag = pathLen;
    
    // Surface attribute
    surfAttribFrag = surfAttrib;
    
    corruptFrag =corruptTriangleFlag;
}
-->
        </snippet>
        </shader>

        <shader name="fragmentMapped">
        <snippet type="version">120</snippet>
        <snippet name="colorMix" />
        <snippet name="ppLighting" />
        <snippet name="colormaps::RGB2MSH" />
        <snippet name="colormaps::MSH2RGB" />
        <snippet name="colormaps::COOLWARM" />
        <snippet name="colormaps::HSV2RGB" />
        <snippet type="string">
<!--
uniform sampler3D potentialTex0;
uniform sampler3D potentialTex1;
uniform int colorMode;
uniform int renderMode;
uniform int unmappedTrisColorMode;
uniform vec3 colorMin;
uniform vec3 colorMax;
uniform vec3 colorUniform;
uniform float minPotential;
uniform float maxPotential;
uniform float alphaScl;
uniform float maxPosDiff;
uniform int uncertaintyMeasurement;

varying vec3 lightDir;
varying vec3 view;
varying vec3 normalFrag;
varying vec3 posNewFrag; // Interpolated WS position
varying float pathLenFrag;
varying float surfAttribFrag;
varying float corruptFrag;

void main() {
    
    vec4 lightparams, color;
    
    if (renderMode == 1) { // Points
        lightparams = vec4(1.0, 0.0, 0.0, 1.0);
    } else if (renderMode == 2) { // Wireframe
        lightparams = vec4(1.0, 0.0, 0.0, 1.0);
    } else if (renderMode == 3) { // Surface
        lightparams = vec4(0.2, 0.8, 0.0, 10.0);
    }
    
    // Determine color
    if (colorMode == 0) { // Uniform color
        
        //color = vec4(colorUniform, 1.0 - pathLenFrag/maxPosDiff);
        color = vec4(colorUniform, 1.0);
        
    } else if (colorMode == 1) { // Normal
        //lightparams = vec4(1.0, 0.0, 0.0, 1.0);
        color = vec4(normalize(normalFrag), 1.0);
        color = vec4(colorUniform, 1.0 - pathLenFrag/maxPosDiff); // DEBUG
    } else if (colorMode == 2) { // Texture coordinates
        lightparams = vec4(1.0, 0.0, 0.0, 1.0);
        color = vec4(gl_TexCoord[0].stp, 1.0);
    } else if (colorMode == 4) { // Uncertainty
        float diff;
  //      if (uncertaintyMeasurement == 0) { // Euclidean distance
  //          diff = length(posOldFrag-posNewFrag);
  //      } else if (uncertaintyMeasurement == 1) { // Path length
            diff = pathLenFrag;
  //      }
        color = MixColors(diff, 0.0, maxPosDiff*0.5, 
            maxPosDiff, 
            vec4(1.0, 1.0, 1.0, 1.0), 
            vec4(1.0, 1.0, 0.0, 1.0), 
            vec4(1.0, 0.0, 0.0, 1.0));
            
        float potDiff = diff;        
        
        //vec3 colOrangeMsh = vec3(100, 0.9746*potDiff/(maxPotential-minPotential), 0.8968);
        vec3 colYellowMsh = vec3(102.44, 0.6965*potDiff/maxPosDiff, 1.5393);
        //vec3 blueMsh = vec3(90, 1.08*potDiff/maxPosDiff, -1.1);
    
        color = vec4(MSH2RGB(colYellowMsh.r, colYellowMsh.g, colYellowMsh.b), 1.0);

    } else if (colorMode == 5) { // Surface potential 0
            
        // Interpolation in MSH color space
        vec3 colMsh = CoolWarmMsh(texture3D(potentialTex0, gl_TexCoord[0].stp).a, 
                        minPotential, 0.0, maxPotential);
        color = vec4(MSH2RGB(colMsh.x, colMsh.y, colMsh.z), 1.0);
        
    } else if (colorMode == 6) { // Surface potential 1
            
        // Interpolation in MSH color space
        vec3 colMsh = CoolWarmMsh(surfAttribFrag, 
              minPotential, 0.0, maxPotential);
        color = vec4(MSH2RGB(colMsh.x, colMsh.y, colMsh.z), 1.0);

    } else if (colorMode == 7) { // Surface potential difference
      
        float potDiff = surfAttribFrag;        
        
        //vec3 colOrangeMsh = vec3(100, 0.9746*potDiff/(maxPotential-minPotential), 0.8968);
        vec3 colYellowMsh = vec3(102.44, 0.6965*potDiff/(maxPotential-minPotential), 1.5393);
        //vec3 blueMsh = vec3(90, 1.08*potDiff/(maxPotential-minPotential), -1.1);
    
        color = vec4(MSH2RGB(colYellowMsh.r, colYellowMsh.g, colYellowMsh.b), 1.0 - pathLenFrag/maxPosDiff);
        
    } else if (colorMode == 8) { // Surface potential sign switch
      
        //lightparams = vec4(0.7, 0.4, 0.0, 1.0);
        //float potOld = texture3D(potentialTex1, gl_TexCoord[1].stp).a;
        //float potNew = texture3D(potentialTex0, gl_TexCoord[0].stp).a;
        //float potDiff = abs(potOld-potNew); 
        // Calc euclidian distance
        // Calc euclidian distance
        float posDiff;
//        if (uncertaintyMeasurement == 0) { // Euclidean distance
//            posDiff = length(posOldFrag-posNewFrag);
//        } else if (uncertaintyMeasurement == 1) { // Path length
            posDiff = pathLenFrag;
//        }
        
        float signSwitchedFlag = surfAttribFrag;
        
        
        //vec3 colTurquoiseMsh = vec3(109.81, 0.9746*signSwitchedFlag, 0.8968);
        //vec3 colDiffMsh = (1.0 - posDiff/maxPosDiff)*colOrangeMsh + (posDiff/maxPosDiff)*colWhiteMsh;
        
        // Green
        //vec3 colorSign = vec3(0.57, 0.76, 0.0)*signSwitchedFlag + (1.0-signSwitchedFlag)*vec3(1.0, 1.0, 1.0);
        
        // Yellow
        //vec3 colorSign = vec3(1.0, 0.84, 0.0)*signSwitchedFlag + (1.0-signSwitchedFlag)*vec3(1.0, 1.0, 1.0);
        vec3 colorSign = vec3(0.96, 0.74, 0.06)*signSwitchedFlag + (1.0-signSwitchedFlag)*vec3(1.0, 1.0, 1.0);

        color = vec4(colorSign, 1.0 - posDiff/maxPosDiff);
        
        // Draw interior darker
        //if (dot(view, normalFrag) > 0) {
        //    colDiff *= 0.75;
        //}
        
        //color = vec4(colDiff, 1.0 - posDiff/maxPosDiff);
        //color = vec4(colDiff, 1.0);
        
        // Set for corrupt triangles
        //color = color*(1.0 - corruptTriangleFlagFrag) + 
        //        vec4(1.0, 0.0, 1.0, 1.0)*corruptTriangleFlagFrag;
        //color.a *= (1.0 - corruptTriangleFlagFrag);
        //color.rgb *= 1.0 - corruptTriangleFlagFrag;
    } else if (colorMode == 9) { // Mesh laplacian
        float potDiff = surfAttribFrag;        
        
        //vec3 colOrangeMsh = vec3(100, 0.9746*(1.0-potDiff/(maxPotential-minPotential)), 0.8968);
        vec3 colYellowMsh = vec3(102.44, 0.6965*(potDiff/(maxPotential-minPotential)), 1.5393);
        //vec3 blueMsh = vec3(90, 1.08*potDiff/(maxPotential-minPotential), -1.1);
    
        color = vec4(MSH2RGB(colYellowMsh.r, colYellowMsh.g, colYellowMsh.b), 1.0);
    } else { // Invalid color mode
        color = vec4(0.5, 1.0, 1.0, 1.0);
    }
   
   //color.a *= (1.0 - corruptFrag);
   // Alpha scaling by the user
    color.a *= alphaScl;
    vec3 n = normalFrag;
    
    vec4 corruptColor;
    if (unmappedTrisColorMode == 0) {
        corruptColor = color;
    } else if (unmappedTrisColorMode == 1) {
        corruptColor = vec4(color.rgb, 0.0);
    } else if (unmappedTrisColorMode == 2) {
        corruptColor = vec4(0.0, 0.458823529, 0.650980392, 1.0);
    }
    color = corruptFrag*corruptColor + (1.0-corruptFrag)*color;
    //color = vec4(0.0, 0.458823529, 0.650980392, 1.0);
    
    /*if (corruptFrag > 0) {
        // 230,97,1
        //color.rgb = vec3(0.90, 0.38, 0.0);
        
        //#e7be40
        // 231, 190, 64
        //color.rgb = vec3(0.905882353, 0.745098039, 0.250980392);
//        color.rgb = vec3(0.654901961, 0.494117647, 0.0);
        //color.rgb = vec3(0.0, 0.458823529, 0.650980392);
//        color.rgb = vec3(0.0, 0.5, 0.7);
    }*/
    
    if (gl_FrontFacing) {
        gl_FragColor = vec4(LocalLighting(normalize(view), normalize(n), 
            normalize(lightDir), color.rgb, lightparams), color.a);
    } else {
        gl_FragColor = vec4(LocalLighting(normalize(view), normalize(-n), 
            normalize(lightDir), color.rgb*0.7, lightparams), color.a);
    }
    
    
    
    
            

}
-->
            </snippet>
        </shader>
    
        <shader name="vertex">
        <snippet type="version">120</snippet>
        <snippet type="string">
<!--
attribute vec3 pos;
attribute vec3 normal;
attribute vec3 texCoord;

varying vec3 lightDir;
varying vec3 view;
varying vec3 normalFrag; 
varying vec3 posWS;

void main() {   
    
    // Vertex positions
    gl_Position = gl_ModelViewProjectionMatrix*vec4(pos, 1.0);
    //gl_Position = gl_ModelViewProjectionMatrix*gl_Vertex; // Vertex positions
    posWS = pos;
    
    // Get view vector in eye space
    view = (gl_ModelViewMatrix*vec4(pos, 1.0)).xyz;
    
    // Transformation of normal into eye space
    normalFrag = gl_NormalMatrix*normal;
    
    // Get the direction of the light
    //lightDir = vec3(gl_LightSource[0].position)-view;
    lightDir = gl_LightSource[0].position.xyz;
    
    // Texture coordinate
    gl_TexCoord[0].stp = texCoord;
}
-->
        </snippet>
        </shader>

        <shader name="fragment">
        <snippet type="version">120</snippet>
        <snippet name="colorMix" />
        <snippet name="ppLighting" />
        <snippet name="colormaps::RGB2MSH" />
        <snippet name="colormaps::MSH2RGB" />
        <snippet name="colormaps::COOLWARM" />
        <snippet name="colormaps::HSV2RGB" />
        <snippet type="string">
<!--
uniform sampler3D potentialTex;
uniform int colorMode;
uniform int renderMode;
uniform vec3 colorMin;
uniform vec3 colorMax;
uniform vec3 colorUniform;
uniform float minPotential;
uniform float maxPotential;
uniform float alphaScl;

varying vec3 lightDir;
varying vec3 view;
varying vec3 normalFrag; 
varying vec3 posWS;

void main() {

    // DEBUG clipping planes
    //if (posWS.z < 49) return;
    //if (posWS.z > 50) return;
    
    //if (posWS.z > 50) return;
    
    vec4 lightparams, color;
    
    // Determine lighting parameters
    if (renderMode == 1) { // Points
        lightparams = vec4(1.0, 0.0, 0.0, 1.0);
    } else if (renderMode == 2) { // Wireframe
        lightparams = vec4(1.0, 0.0, 0.0, 1.0);
    } else if (renderMode == 3) { // Surface
        lightparams = vec4(0.2, 0.8, 0.0, 10.0);
    }
    
    // Determine color
    if (colorMode == 0) { // Uniform color
        color = vec4(colorUniform, 1.0);
        //color = vec4(0.0, 0.0, 0.0, 1.0);
    } else if (colorMode == 1) { // Normal
        lightparams = vec4(1.0, 0.0, 0.0, 1.0);
        color = vec4(normalize(normalFrag), 1.0);
    } else if (colorMode == 2) { // Texture coordinates
        lightparams = vec4(1.0, 0.0, 0.0, 1.0);
        color = vec4(gl_TexCoord[0].stp, 1.0);
    } else if (colorMode == 3) { // Surface potential
            
        // Interpolation in MSH color space
        vec3 colMsh = CoolWarmMsh(texture3D(potentialTex, gl_TexCoord[0].stp).a, 
                        minPotential, 0.0, maxPotential);
        //vec3 colMsh = vec3(1.0, 1.0, 0.0);
        color = vec4(MSH2RGB(colMsh.x, colMsh.y, colMsh.z), 1.0);
            
    } else { // Invalid color mode
        color = vec4(0.5, 1.0, 1.0, 1.0);
    }
   
    // Apply scaling of alpha value
    color.a *= alphaScl;
    
    gl_FragColor = vec4(LocalLighting(normalize(view), normalize(normalFrag), 
            normalize(lightDir), color.rgb, lightparams), color.a);
}

-->
            </snippet>
        </shader>
        
                <shader name="vertexWithFlag">
        <snippet type="version">120</snippet>
        <snippet type="string">
<!--
attribute vec3 pos;
attribute float flag;

varying vec3 lightDir;
varying vec3 view;
varying vec3 posWS;
varying float flagFrag;

void main() {   
    
    // Vertex positions
    gl_Position = gl_ModelViewProjectionMatrix*vec4(pos, 1.0);
    posWS = pos;
    
    // Get view vector in eye space
    view = (gl_ModelViewMatrix*vec4(pos, 1.0)).xyz;
    
    // Transformation of normal into eye space
    //normalFrag = gl_NormalMatrix*normal;
    
    // Get the direction of the light
    //lightDir = vec3(gl_LightSource[0].position)-view;
    lightDir = gl_LightSource[0].position.xyz;
    
    // Vertex flag
    flagFrag = flag;
}
-->
        </snippet>
        </shader>

        <shader name="fragmentWithFlag">
        <snippet type="version">120</snippet>
        <snippet name="colorMix" />
        <snippet name="ppLighting" />
        <snippet name="colormaps::RGB2MSH" />
        <snippet name="colormaps::MSH2RGB" />
        <snippet name="colormaps::COOLWARM" />
        <snippet name="colormaps::HSV2RGB" />
        <snippet type="string">
<!--
varying vec3 lightDir;
varying vec3 view;
varying vec3 posWS;
varying float flagFrag;

void main() {
    
    vec4 lightparams;
    vec3 color;

    lightparams = vec4(1.0, 0.0, 0.0, 1.0);
    
    color = flagFrag*(vec3(1.0, 0.0, 0.0)) + (1.0-flagFrag)*vec3(0.7, 0.8, 1.0);
    //color = vec3(1.0, 0.0, 0.0);
    
    //gl_FragColor = vec4(LocalLighting(normalize(view), normalize(normalFrag), 
    //        normalize(lightDir), color.rgb, lightparams), 1.0);
    
            
    gl_FragColor = vec4(color.rgb, 1.0);
}

-->
            </snippet>
        </shader>
        
        
        
    <shader name="vertexUncertainty">
        <snippet type="version">120</snippet>
        <snippet type="string">
<!--
attribute vec3 pos;
attribute vec3 normal;
attribute float uncertainty;

varying vec3 lightDir;
varying vec3 view;
varying vec3 posWS;
varying float uncertaintyFrag;
varying vec3 normalFrag; 

void main() {   
    
    // Vertex positions
    gl_Position = gl_ModelViewProjectionMatrix*vec4(pos, 1.0);
    posWS = pos;
    
    // Get view vector in eye space
    view = (gl_ModelViewMatrix*vec4(pos, 1.0)).xyz;
    
    // Transformation of normal into eye space
    normalFrag = gl_NormalMatrix*normal;
    
    // Get the direction of the light
    //lightDir = vec3(gl_LightSource[0].position)-view;
    lightDir = gl_LightSource[0].position.xyz;
    
    // Vertex flag
    uncertaintyFrag = uncertainty;
}
-->
        </snippet>
        </shader>

        <shader name="fragmentUncertainty">
        <snippet type="version">120</snippet>
        <snippet name="colorMix" />
        <snippet name="ppLighting" />
        <snippet name="colormaps::RGB2MSH" />
        <snippet name="colormaps::MSH2RGB" />
        <snippet name="colormaps::COOLWARM" />
        <snippet name="colormaps::HSV2RGB" />
        <snippet type="string">
<!--
varying vec3 lightDir;
varying vec3 view;
varying vec3 posWS;
varying float uncertaintyFrag;
varying vec3 normalFrag; 

uniform float maxUncertainty;

void main() {
    
    vec4 lightparams;
    vec4 color;

    //lightparams = vec4(0.2, 0.8, 0.0, 10.0);
    //lightparams = vec4(0.2, 0.0, 0.0, 10.0);
    vec3 colOrangeMsh = vec3(100, 0.9746*uncertaintyFrag/maxUncertainty, 0.8968);
        //vec3 colYellowMsh = vec3(100, 0.81*potDiff/(maxPotential-minPotential), 1.7951);
        //vec3 blueMsh = vec3(90, 1.08*potDiff/(maxPotential-minPotential), -1.1);
    
    color = vec4(MSH2RGB(colOrangeMsh.r, colOrangeMsh.g, colOrangeMsh.b), 1.0);
    
    //vec3 colMsh = CoolWarmMsh(uncertaintyFrag, 0.0, maxUncertainty/2.0, maxUncertainty);
    //color = MSH2RGB(colMsh.x, colMsh.y, colMsh.z);
    
    //gl_FragColor = vec4(LocalLighting(normalize(view), normalize(normalFrag), 
    //        normalize(lightDir), color.rgb, lightparams), 1.0);
    
    gl_FragColor = color;

}

-->
            </snippet>
        </shader>
    </namespace>
</btf>
