<?xml version="1.0" encoding="utf-8"?>
<btf type="MegaMolGLSLShader" version="1.0" namespace="volumemesh">


    <shader name="normalVertex">
      <snippet type="version">120</snippet>
      <snippet type="string">
        <![CDATA[
varying vec3 normal;

void main(void)
{
    gl_Position = gl_Vertex;
    normal = gl_Normal;
    gl_FrontColor = gl_Color;
}
]]>
      </snippet>
    </shader>

    <shader name="normalGeometry">
      <snippet type="version">120</snippet>
      <snippet type="string">
        <![CDATA[
#extension GL_EXT_geometry_shader4 : enable

uniform float normalsLength;

varying in vec3 normal[];

void main()
{
    //assert(gl_VerticesIn == 3);
    //assert(GL_GEOMETRY_INPUT_TYPE_EXT == GL_TRIANGLES);
    //assert(GL_GEOMETRY_OUTPUT_TYPE_EXT == GL_LINE_STRIP);
    //assert(GL_GEOMETRY_VERTICES_OUT_EXT == 6);

    for (int i = 0; i < gl_VerticesIn; ++i)
    {
        gl_Position = gl_ModelViewProjectionMatrix * gl_PositionIn[i];
        gl_FrontColor = gl_FrontColorIn[i];
        EmitVertex();

        gl_Position = gl_ModelViewProjectionMatrix * (gl_PositionIn[i] + (vec4(normal[i], 0) * normalsLength));
        gl_FrontColor = gl_FrontColorIn[i];
        EmitVertex();

        EndPrimitive();
    }
}
]]>
      </snippet>
    </shader>
	
	    <shader name="normalFragment">
      <snippet type="version">120</snippet>
      <snippet type="string">
        <![CDATA[
void main()
{
	gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);
	//gl_FragColor = gl_Color;
}
]]>
      </snippet>
    </shader>

</btf>
