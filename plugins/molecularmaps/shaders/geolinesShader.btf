<?xml version="1.0" encoding="utf-8"?>
<btf type="MegaMolGLSLShader" version="1.0" namespace="geolinesShader">
    <include file="common"/>

    <shader name="vertex">
        <snippet type="version">130</snippet>
        <snippet name="common::defines"/>
        <snippet name="vertex" type = "string">
            <![CDATA[
uniform vec4 sphere;
uniform vec3 frontVertex;

#define PI  3.1415
            
void main(void) {
    gl_FrontColor = gl_Color;
    vec3 relCoord = normalize(gl_Vertex.xyz - sphere.xyz);
    vec3 relCoord2 = normalize(frontVertex - sphere.xyz);
    
    float lambda = sign(relCoord.x) * PI / 2.0;
    if( abs(relCoord.z) > 0.001 ) {
      lambda = atan(relCoord.x, relCoord.z);
    }
    float lambda2 = 0.0;
    if( abs(relCoord2.z) > 0.001 ) {
      lambda2 = atan(relCoord2.x, relCoord2.z);
    }
    
    gl_Position = vec4((lambda - lambda2) / PI, relCoord.y, -0.1, 1.0);
}
            ]]>
        </snippet>
    </shader>

    <shader name="geometry">
        <snippet type="version">130</snippet>
        <snippet name="common::defines"/>
        <snippet name="geometry" type = "string">
            <![CDATA[
#extension GL_EXT_geometry_shader4 : enable
#extension GL_EXT_gpu_shader4 : enable

void main(void)
{
    vec3 v0 = vec3(gl_PositionIn[0].xyz) / gl_PositionIn[0].w;
    vec3 v1 = vec3(gl_PositionIn[1].xyz) / gl_PositionIn[1].w;

    // shift positions that are outside the map
    if (v0.x > 1.0) {
        v0.x -= 2.0;
    }
    if (v0.x < -1.0) {
        v0.x += 2.0;
    }
    //if (v0.x > 0.75) {
    //    v0.x -= 2.0;
    //} else if (v0.x < -1.0) {
    //    v0.x += 2.0;
    //}
    if (v1.x > 1.0) {
        v1.x -= 2.0;
    } 
    if (v1.x < -1.0) {
        v1.x += 2.0;
    }
    
    if( v0.x > 0.5 && v1.x < -0.5) {
        gl_FrontColor = gl_FrontColorIn[0];
        gl_Position = vec4( v0, 1.0);
        EmitVertex();
        
        gl_FrontColor = gl_FrontColorIn[1];
        gl_Position = vec4( v1 + vec3(2.0, 0.0, 0.0), 1.0);
        EmitVertex();
        EndPrimitive();
        
        gl_FrontColor = gl_FrontColorIn[0];            
        gl_Position = vec4( v0 - vec3(2.0, 0.0, 0.0), 1.0);
        EmitVertex();
        
        gl_FrontColor = gl_FrontColorIn[1];
        gl_Position = vec4( v1, 1.0);
        EmitVertex();
        EndPrimitive();
    } else if( v0.x < -0.5 && v1.x > 0.5) {
        gl_FrontColor = gl_FrontColorIn[0];
        gl_Position = vec4( v0 + vec3(2.0, 0.0, 0.0), 1.0);
        EmitVertex();
        
        gl_FrontColor = gl_FrontColorIn[1];
        gl_Position = vec4( v1, 1.0);
        EmitVertex();
        EndPrimitive();
        
        gl_FrontColor = gl_FrontColorIn[0];            
        gl_Position = vec4( v0, 1.0);
        EmitVertex();
        
        gl_FrontColor = gl_FrontColorIn[1];
        gl_Position = vec4( v1 - vec3(2.0, 0.0, 0.0), 1.0);
        EmitVertex();
        EndPrimitive();
    } else {
        gl_FrontColor = gl_FrontColorIn[0];
        gl_Position = vec4( v0, 1.0);
        EmitVertex();
        
        gl_FrontColor = gl_FrontColorIn[1];
        gl_Position = vec4( v1, 1.0);
        EmitVertex();
        EndPrimitive();
    }
}
            ]]>
        </snippet>
    </shader>
  
    <shader name="fragment">
        <snippet type="version">120</snippet>
        <snippet name="common::defines"/>
        <snippet name="common::lighting::simple"/>
        <snippet name="fragment" type="string">
            <![CDATA[
void main(void) 
{
    gl_FragColor = gl_Color;
}
]]>
        </snippet>
    </shader>

</btf>
