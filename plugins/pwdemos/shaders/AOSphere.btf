<?xml version="1.0" encoding="utf-8"?>
<btf type="MegaMolGLSLShader" version="1.0" namespace="AOSphere">
  <include file="common"/>

  <namespace name="base">
    <namespace name="vertex">
      <snippet name="attributes" type="string">
      <![CDATA[
uniform vec4 viewAttr;

#ifdef WITH_SCALING
uniform float scaling;
#endif // WITH_SCALING

#ifndef CALC_CAM_SYS
uniform vec3 camIn;
uniform vec3 camUp;
uniform vec3 camRight;
#endif // CALC_CAM_SYS

// clipping plane attributes
uniform vec4 clipDat;
uniform vec3 clipCol;

uniform vec3 posOrigin;
uniform vec3 posExtents;
uniform vec3 aoSampDist;
uniform float aoSampFact;

uniform vec4 inConsts1;
attribute float colIdx;
uniform sampler1D colTab;

varying vec4 objPos;
varying vec4 camPos;
varying vec4 lightPos;
varying vec2 radii; // vec2(r, r^2)

#ifdef DEFERRED_SHADING
varying float pointSize;
#endif

#ifdef RETICLE
varying vec2 centerFragment;
#endif // RETICLE

#define CONSTRAD inConsts1.x
#define MIN_COLV inConsts1.y
#define MAX_COLV inConsts1.z
#define COLTAB_SIZE inConsts1.w
]]>
    </snippet>
      <snippet name="MainParams" type="string">
        <![CDATA[
void main(void) {

    // remove the sphere radius from the w coordinates to the rad varyings
    vec4 inPos = gl_Vertex;
    float rad = (CONSTRAD < -0.5) ? inPos.w : CONSTRAD;
    inPos.w = 1.0;
    float cid = MAX_COLV - MIN_COLV;
    if (cid < 0.000001) {
        gl_FrontColor = gl_Color;
    } else {
        cid = (colIdx - MIN_COLV) / cid;
        cid = clamp(cid, 0.0, 1.0);
        
        cid *= (1.0 - 1.0 / COLTAB_SIZE);
        cid += 0.5 / COLTAB_SIZE;
        
        gl_FrontColor = texture1D(colTab, cid);
    }

#ifdef WITH_SCALING
    rad *= scaling;
#endif // WITH_SCALING
    float radsqr = rad * rad;

    radii = vec2(rad, radsqr);
]]>
      </snippet>
      <snippet name="posTrans" type="string">
        <![CDATA[

    // object pivot point in object space    
    objPos = inPos; // no w-div needed, because w is 1.0 (Because I know)

    // calculate cam position
    camPos = gl_ModelViewMatrixInverse[3]; // (C) by Christoph
    camPos.xyz -= objPos.xyz; // cam pos to glyph space

    // calculate light position in glyph space
    lightPos = gl_ModelViewMatrixInverse * gl_LightSource[0].position;
]]>
      </snippet>
      <snippet name="clippingPlane" type="string">
        <![CDATA[

    // clipping
    float od = clipDat.w - 1.0;
    if (any(notEqual(clipDat.xyz, vec3(0, 0, 0)))) {
        od = dot(objPos.xyz, clipDat.xyz) - rad;
    }

]]>
      </snippet>
      <snippet name="SphereTouchPlane" type="string">
        <![CDATA[
    // Sphere-Touch-Plane-Approachâ„¢
    vec2 winHalf = 2.0 / viewAttr.zw; // window size

    vec2 d, p, q, h, dd;

    // get camera orthonormal coordinate system
    vec4 tmp;

#ifdef CALC_CAM_SYS
    // camera coordinate system in object space
    tmp = gl_ModelViewMatrixInverse[3] + gl_ModelViewMatrixInverse[2];
    vec3 camIn = normalize(tmp.xyz);
    tmp = gl_ModelViewMatrixInverse[3] + gl_ModelViewMatrixInverse[1];
    vec3 camUp = tmp.xyz;
    vec3 camRight = normalize(cross(camIn, camUp));
    camUp = cross(camIn, camRight);
#endif // CALC_CAM_SYS

    vec2 mins, maxs;
    vec3 testPos;
    vec4 projPos;

    // projected camera vector
    vec3 c2 = vec3(dot(camPos.xyz, camRight), dot(camPos.xyz, camUp), dot(camPos.xyz, camIn));

    vec3 cpj1 = camIn * c2.z + camRight * c2.x;
    vec3 cpm1 = camIn * c2.x - camRight * c2.z;

    vec3 cpj2 = camIn * c2.z + camUp * c2.y;
    vec3 cpm2 = camIn * c2.y - camUp * c2.z;
    
    d.x = length(cpj1);
    d.y = length(cpj2);

    dd = vec2(1.0) / d;

    p = radsqr * dd;
    q = d - p;
    h = sqrt(p * q);
    //h = vec2(0.0);
    
    p *= dd;
    h *= dd;

    cpj1 *= p.x;
    cpm1 *= h.x;
    cpj2 *= p.y;
    cpm2 *= h.y;

    // TODO: rewrite only using four projections, additions in homogenous coordinates and delayed perspective divisions.
    testPos = objPos.xyz + cpj1 + cpm1;
    projPos = gl_ModelViewProjectionMatrix * vec4(testPos, 1.0);
    projPos /= projPos.w;
    mins = projPos.xy;
    maxs = projPos.xy;

    testPos -= 2.0 * cpm1;
    projPos = gl_ModelViewProjectionMatrix * vec4(testPos, 1.0);
    projPos /= projPos.w;
    mins = min(mins, projPos.xy);
    maxs = max(maxs, projPos.xy);

    testPos = objPos.xyz + cpj2 + cpm2;
    projPos = gl_ModelViewProjectionMatrix * vec4(testPos, 1.0);
    projPos /= projPos.w;
    mins = min(mins, projPos.xy);
    maxs = max(maxs, projPos.xy);

    testPos -= 2.0 * cpm2;
    projPos = gl_ModelViewProjectionMatrix * vec4(testPos, 1.0);
    projPos /= projPos.w;
    mins = min(mins, projPos.xy);
    maxs = max(maxs, projPos.xy);
]]>
      </snippet>
      <snippet name="Output" type="string">
        <![CDATA[
    gl_Position = vec4((mins + maxs) * 0.5, 0.0, (od > clipDat.w) ? 0.0 : 1.0);
    maxs = (maxs - mins) * 0.5 * winHalf;
    gl_PointSize = max(maxs.x, maxs.y) + 0.5;
#ifdef DEFERRED_SHADING
    pointSize = gl_PointSize;
#endif
]]>
      </snippet>
      <snippet name="End" type="string">
        <![CDATA[
#ifdef SMALL_SPRITE_LIGHTING
    // for normal crowbaring on very small sprites
    lightPos.w = (clamp(gl_PointSize, 1.0, 5.0) - 1.0) / 4.0;
#else
    lightPos.w = 1.0;
#endif // SMALL_SPRITE_LIGHTING
    
#ifdef RETICLE
    centerFragment = gl_Position.xy / gl_Position.w;
#endif // RETICLE

    // gl_PointSize = 32.0;

}
]]>
      </snippet>
    </namespace>
    <namespace name="fragment">
      <snippet name="attributes" type="string">
        <![CDATA[
#ifdef BACKSIDE_ENABLED
uniform float hitsideFlag;
#endif // BACKSIDE_ENABLED

// clipping plane attributes
uniform vec4 clipDat;
uniform vec3 clipCol;

uniform vec3 posOrigin;
uniform vec3 posExtents;
uniform vec3 aoSampDist;
uniform float aoSampFact;

uniform vec4 viewAttr;
uniform vec2 frustumPlanes;

FLACH varying vec4 objPos;
FLACH varying vec4 camPos;
FLACH varying vec4 lightPos;
FLACH varying vec2 radii; // vec2(r, r^2)

#ifdef RETICLE
FLACH varying vec2 centerFragment;
#endif // RETICLE
]]>
      </snippet>
      <snippet name="mainbody" type="string">
        <![CDATA[
#define RAD radii.x
#define RADSQR radii.y
void main(void) {
    vec4 coord;
    vec3 ray;
    float lambda;

    // transform fragment coordinates from window coordinates to view coordinates.
    coord = gl_FragCoord 
        * vec4(viewAttr.z, viewAttr.w, 2.0, 0.0) 
        + vec4(-1.0, -1.0, -1.0, 1.0);

    // transform fragment coordinates from view coordinates to object coordinates.
    coord = gl_ModelViewProjectionMatrixInverse * coord;
    coord /= coord.w;
    coord -= objPos; // ... and to glyph space

    // calc the viewing ray
    ray = normalize(coord.xyz - camPos.xyz);

    // chose color for lighting
    vec4 color = gl_Color;
    //vec4 color = vec4(uplParams.xyz, 1.0);

    // calculate the geometry-ray-intersection
    float d1 = -dot(camPos.xyz, ray);                       // projected length of the cam-sphere-vector onto the ray
    float d2s = dot(camPos.xyz, camPos.xyz) - d1 * d1;      // off axis of cam-sphere-vector and ray
    float radicand = RADSQR - d2s;                          // square of difference of projected length and lambda
#ifdef CLIP
    if (radicand < 0.0) { 
#ifdef DISCARD_COLOR_MARKER
        color = vec3(1.0, 0.0, 0.0);       
#else // DISCARD_COLOR_MARKER
        discard; 
#endif // DISCARD_COLOR_MARKER
    }
#endif // CLIP

    float sqrtRadicand = sqrt(radicand);
#ifdef BACKSIDE_ENABLED
    lambda = d1 - sqrtRadicand * hitsideFlag;             // lambda
#else // BACKSIDE_ENABLED
    lambda = d1 - sqrtRadicand;                           // lambda
#endif // BACKSIDE_ENABLED

    vec3 sphereintersection = lambda * ray + camPos.xyz;    // intersection point
    vec3 normal = sphereintersection / RAD;

    if (any(notEqual(clipDat.xyz, vec3(0, 0, 0)))) {
        vec3 planeNormal = normalize(clipDat.xyz);
        vec3 clipPlaneBase = planeNormal * clipDat.w;
        float d = -dot(planeNormal, clipPlaneBase - objPos.xyz);
        float dist1 = dot(sphereintersection, planeNormal) + d;
        float dist2 = d;
        float t = -(dot(planeNormal, camPos.xyz) + d) / dot(planeNormal, ray);
        vec3 planeintersect = camPos.xyz + t * ray;
        if (dist1 > 0.0) {
            if (dist2 < RAD) {
                if (length(planeintersect) < RAD) {
                    sphereintersection = planeintersect;
                    normal = planeNormal;
                    //color = vec4(clipCol, 1.0);
                } else {
                    discard;
                }
            } else {
                discard;
            }
        }
    }

    // "calc" normal at intersection point
#ifdef SMALL_SPRITE_LIGHTING
    normal = mix(-ray, normal, lightPos.w);
#endif // SMALL_SPRITE_LIGHTING

#ifdef AXISHINTS
    // debug-axis-hints
    float mc = min(abs(normal.x), min(abs(normal.y), abs(normal.z)));
    if (mc < 0.05)            { color = vec3(0.5); }
    if (abs(normal.x) > 0.98) { color = vec3(1.0, 0.0, 0.0); }
    if (abs(normal.y) > 0.98) { color = vec3(0.0, 1.0, 0.0); }
    if (abs(normal.z) > 0.98) { color = vec3(0.0, 0.0, 1.0); }
    if (normal.x < -0.99)     { color = vec3(0.5); }
    if (normal.y < -0.99)     { color = vec3(0.5); }
    if (normal.z < -0.99)     { color = vec3(0.5); }
#endif // AXISHINTS
]]>
      </snippet>
      <snippet name="out-lighting" type="string">
        <![CDATA[
    // phong lighting with directional light
    gl_FragColor = vec4(LocalLighting(ray, normal, lightPos.xyz, color.rgb), color.a);
    //gl_FragColor = color;
]]>
      </snippet>
      <snippet name="out-depth" type="string">
        <![CDATA[
    // calculate depth
#ifdef DEPTH
    vec4 Ding = vec4(sphereintersection + objPos.xyz, 1.0);
    float depth = dot(gl_ModelViewProjectionMatrixTranspose[2], Ding);
    float depthW = dot(gl_ModelViewProjectionMatrixTranspose[3], Ding);
    gl_FragDepth = ((depth / depthW) + 1.0) * 0.5;
#ifndef CLIP
    gl_FragDepth = (radicand < 0.0) ? 1.0 : ((depth / depthW) + 1.0) * 0.5;
    gl_FragColor.rgb = (radicand < 0.0) ? gl_Color.rgb : gl_FragColor.rgb;
#endif // CLIP

#ifdef DISCARD_COLOR_MARKER
    Ding = vec4(objPos.xyz, 1.0);
    depth = dot(gl_ModelViewProjectionMatrixTranspose[2], Ding);
    depthW = dot(gl_ModelViewProjectionMatrixTranspose[3], Ding);
    gl_FragDepth = ((depth / depthW) + 1.0) * 0.5;
#endif // DISCARD_COLOR_MARKER

#endif // DEPTH
]]>
      </snippet>
      <snippet name="footer" type="string">
        <![CDATA[
#ifdef RETICLE
    coord = gl_FragCoord 
        * vec4(viewAttr.z, viewAttr.w, 2.0, 0.0) 
        + vec4(-1.0, -1.0, -1.0, 1.0);
    if (min(abs(coord.x - centerFragment.x), abs(coord.y - centerFragment.y)) < 0.002) {
        //gl_FragColor.rgb = vec3(1.0, 1.0, 0.5);
        gl_FragColor.rgb += vec3(0.3, 0.3, 0.5);
    }
#endif // RETICLE
//    gl_FragColor.rgb = normal;
}
]]>
      </snippet>
    </namespace>
  </namespace>

  <namespace name="mainaxes">
    <shader name="vertex">
      <snippet type="version">110</snippet>
      <snippet name="common::defines" />
      <snippet name="base::vertex::attributes" />
      <snippet type="string">
        <![CDATA[
uniform sampler3D aoVol;
varying vec3 aoPos;
varying vec3 aoNeg;
]]>
      </snippet>
      <snippet name="base::vertex::MainParams" />
      <snippet type="string">
        <![CDATA[
    vec3 aop = (inPos.xyz - posOrigin) / posExtents;
    vec4 aod = vec4((vec3(rad) + aoSampDist) / posExtents, 0.0);
    //vec4 aod = vec4(0.0);
    aoPos.x = 1.0 - (texture3D(aoVol, aop + aod.xww).r * aoSampFact);
    aoPos.y = 1.0 - (texture3D(aoVol, aop + aod.wyw).r * aoSampFact);
    aoPos.z = 1.0 - (texture3D(aoVol, aop + aod.wwz).r * aoSampFact);
    aoNeg.x = 1.0 - (texture3D(aoVol, aop - aod.xww).r * aoSampFact);
    aoNeg.y = 1.0 - (texture3D(aoVol, aop - aod.wyw).r * aoSampFact);
    aoNeg.z = 1.0 - (texture3D(aoVol, aop - aod.wwz).r * aoSampFact);
]]>
      </snippet>
      <snippet name="base::vertex::posTrans" />
      <snippet name="base::vertex::clippingPlane" />
      <snippet name="base::vertex::SphereTouchPlane" />
      <snippet name="base::vertex::Output" />
      <snippet name="base::vertex::End" />
    </shader>
    <shader name="fragLightAO">
      <snippet type="version">110</snippet>
      <snippet name="common::defines"/>
      <snippet name="LightDirectional" type="file">lightdirectional.glsl</snippet>
      <snippet name="base::fragment::attributes" />
      <snippet type="string">
        <![CDATA[
FLACH varying vec3 aoPos;
FLACH varying vec3 aoNeg;
]]>
      </snippet>
      <snippet name="base::fragment::mainbody" />
      <snippet name="base::fragment::out-lighting" />
      <snippet name="evalAO" type="string">
        <![CDATA[
    vec3 aoFac = vec3(
      (normal.x > 0.0) ? aoPos.x : aoNeg.x,
      (normal.y > 0.0) ? aoPos.y : aoNeg.y,
      (normal.z > 0.0) ? aoPos.z : aoNeg.z);
    aoFac.x *= (normal.x * normal.x);
    aoFac.y *= (normal.y * normal.y);
    aoFac.z *= (normal.z * normal.z);
    float aoFactor = aoFac.x + aoFac.y + aoFac.z;
]]>
      </snippet>
      <snippet type="string">gl_FragColor.xyz *= aoFactor;</snippet>
      <snippet name="base::fragment::out-depth" />
      <snippet name="base::fragment::footer" />
    </shader>
    <shader name="fragColourAO">
      <snippet type="version">110</snippet>
      <snippet name="common::defines"/>
      <snippet name="LightDirectional" type="file">lightdirectional.glsl</snippet>
      <snippet name="base::fragment::attributes" />
      <snippet type="string">
        <![CDATA[
FLACH varying vec3 aoPos;
FLACH varying vec3 aoNeg;
]]>
      </snippet>
      <snippet name="base::fragment::mainbody" />
      <snippet name="base::fragment::out-lighting" />
      <snippet name="fragLightAO::evalAO" />
      <snippet type="string">gl_FragColor.xyz = color.xyz * aoFactor;</snippet>
      <snippet name="base::fragment::out-depth" />
      <snippet name="base::fragment::footer" />
    </shader>
    <shader name="fragAO">
      <snippet type="version">110</snippet>
      <snippet name="common::defines"/>
      <snippet name="LightDirectional" type="file">lightdirectional.glsl</snippet>
      <snippet name="base::fragment::attributes" />
      <snippet type="string">
        <![CDATA[
FLACH varying vec3 aoPos;
FLACH varying vec3 aoNeg;
]]>
      </snippet>
      <snippet name="base::fragment::mainbody" />
      <snippet name="base::fragment::out-lighting" />
      <snippet name="fragLightAO::evalAO" />
      <snippet type="string">gl_FragColor.xyz = vec3(aoFactor);</snippet>
      <snippet name="base::fragment::out-depth" />
      <snippet name="base::fragment::footer" />
    </shader>
    <shader name="fragMultipleRT">
      <snippet type="version">110</snippet>
      <snippet name="common::defines"/>
      <snippet name="base::fragment::attributes" />
      <snippet name="base::fragment::mainbody" />
      <snippet type="string">
        <![CDATA[
gl_FragData[0] = color;
gl_FragData[1] = vec4(gl_NormalMatrix * normal, 1.0);
        
gl_FragData[0] = color;
gl_FragData[1] = vec4(gl_NormalMatrix * normal, 1.0);

    // calculate depth
#ifdef DEPTH
    vec4 Ding = vec4(sphereintersection + objPos.xyz, 1.0);
    float depth = dot(gl_ModelViewProjectionMatrixTranspose[2], Ding);
    float depthW = dot(gl_ModelViewProjectionMatrixTranspose[3], Ding);
    //gl_FragDepth = ((depth / depthW) + 1.0) * 0.5;
    
    // Map near ... far to 0 ... 1
    //gl_FragDepth = (-dot(gl_ModelViewMatrixTranspose[2], Ding) - frustumPlanes.x) / (frustumPlanes.y - frustumPlanes.x);
    gl_FragDepth = (-dot(gl_ModelViewMatrixTranspose[2], Ding) - frustumPlanes.x) / (frustumPlanes.y - frustumPlanes.x);

#ifndef CLIP
    gl_FragDepth = (radicand < 0.0) ? 1.0 : 
        //((depth / depthW) + 1.0) * 0.5;
        //(-dot(gl_ModelViewMatrixTranspose[2], Ding) 
        //- frustumPlanes.x) / (frustumPlanes.y - frustumPlanes.x);
        -dot(gl_ModelViewMatrixTranspose[2], Ding) / frustumPlanes.y;
    gl_FragColor.rgb = (radicand < 0.0) ? gl_Color.rgb : gl_FragColor.rgb;
#endif // CLIP

#ifdef DISCARD_COLOR_MARKER
    Ding = vec4(objPos.xyz, 1.0);
    depth = dot(gl_ModelViewProjectionMatrixTranspose[2], Ding);
    depthW = dot(gl_ModelViewProjectionMatrixTranspose[3], Ding);
    //gl_FragDepth = ((depth / depthW) + 1.0) * 0.5;
    gl_FragDepth = 
        //(-dot(gl_ModelViewMatrixTranspose[2], Ding) -
        //frustumPlanes.x) / (frustumPlanes.y - frustumPlanes.x);
        -dot(gl_ModelViewMatrixTranspose[2], Ding) / frustumPlanes.y;
#endif // DISCARD_COLOR_MARKER

#endif // DEPTH
]]>
      </snippet>
      <!--<snippet name="base::fragment::out-depth" />-->
      <snippet name="base::fragment::footer" />
    </shader>
  </namespace>

  <namespace name="normals">
    <shader name="vertex">
      <snippet type="version">110</snippet>
      <snippet name="common::defines" />
      <snippet name="base::vertex::attributes" />
      <snippet name="base::vertex::MainParams" />
      <snippet name="base::vertex::posTrans" />
      <snippet name="base::vertex::clippingPlane" />
      <snippet name="base::vertex::SphereTouchPlane" />
      <snippet name="base::vertex::Output" />
      <snippet name="base::vertex::End" />
    </shader>
    <shader name="fragLightAO">
      <snippet type="version">110</snippet>
      <snippet name="common::defines"/>
      <snippet name="LightDirectional" type="file">lightdirectional.glsl</snippet>
      <snippet name="base::fragment::attributes" />
      <snippet type="string">
        <![CDATA[
uniform sampler3D aoVol;
]]>
      </snippet>
      <snippet name="base::fragment::mainbody" />
      <snippet name="base::fragment::out-lighting" />
      <snippet name="evalAO" type="string">
        <![CDATA[
    vec3 aoPos = sphereintersection + objPos.xyz;
    aoPos += normal * aoSampDist;
    aoPos = (aoPos - posOrigin) / posExtents;
    float aoFactor = 1.0 - (texture3D(aoVol, aoPos).r * aoSampFact);
]]>
      </snippet>
      <snippet type="string">gl_FragColor.xyz *= aoFactor;</snippet>
      <snippet name="base::fragment::out-depth" />
      <snippet name="base::fragment::footer" />
    </shader>
    <shader name="fragColourAO">
      <snippet type="version">110</snippet>
      <snippet name="common::defines"/>
      <snippet name="LightDirectional" type="file">lightdirectional.glsl</snippet>
      <snippet name="base::fragment::attributes" />
      <snippet type="string">
        <![CDATA[
uniform sampler3D aoVol;
]]>
      </snippet>
      <snippet name="base::fragment::mainbody" />
      <snippet name="base::fragment::out-lighting" />
      <snippet name="fragLightAO::evalAO" />
      <snippet type="string">gl_FragColor.xyz = color.xyz * aoFactor;</snippet>
      <snippet name="base::fragment::out-depth" />
      <snippet name="base::fragment::footer" />
    </shader>
    <shader name="fragAO">
      <snippet type="version">110</snippet>
      <snippet name="common::defines"/>
      <snippet name="LightDirectional" type="file">lightdirectional.glsl</snippet>
      <snippet name="base::fragment::attributes" />
      <snippet type="string">
        <![CDATA[
uniform sampler3D aoVol;
]]>
      </snippet>
      <snippet name="base::fragment::mainbody" />
      <snippet name="base::fragment::out-lighting" />
      <snippet name="fragLightAO::evalAO" />
      <snippet name="base::fragment::out-depth" />
      <snippet type="string">
        gl_FragColor.xyz = vec3(aoFactor);
        //float grey = ((depth / depthW) + 1.0) * 0.5;
        //vec3 camIn = (gl_ModelViewMatrixInverse[3] + gl_ModelViewMatrixInverse[2]).xyz;
        //camIn = normalize(camIn);
        //float grey = abs(dot(normal, camIn));
        //gl_FragColor = vec4(vec3(grey), 1.0);
      </snippet>
      <snippet name="base::fragment::footer" />
    </shader>
    <shader name="fragMultipleRT">
      <snippet type="version">110</snippet>
      <snippet name="common::defines"/>
      <snippet name="base::fragment::attributes" />
      <snippet name="base::fragment::mainbody" />
        <snippet type="string">
        <![CDATA[
        
gl_FragData[0] = color;
gl_FragData[1] = vec4(gl_NormalMatrix * normal, 1.0);

    // calculate depth
#ifdef DEPTH
    vec4 Ding = vec4(sphereintersection + objPos.xyz, 1.0);
    float depth = dot(gl_ModelViewProjectionMatrixTranspose[2], Ding);
    float depthW = dot(gl_ModelViewProjectionMatrixTranspose[3], Ding);
    //gl_FragDepth = ((depth / depthW) + 1.0) * 0.5;
    
    // Map near ... far to 0 ... 1
    //gl_FragDepth = (-dot(gl_ModelViewMatrixTranspose[2], Ding) - frustumPlanes.x) / (frustumPlanes.y - frustumPlanes.x);
    gl_FragDepth = (-dot(gl_ModelViewMatrixTranspose[2], Ding) - frustumPlanes.x) / (frustumPlanes.y - frustumPlanes.x);

#ifndef CLIP
    gl_FragDepth = (radicand < 0.0) ? 1.0 : 
        //((depth / depthW) + 1.0) * 0.5;
        //(-dot(gl_ModelViewMatrixTranspose[2], Ding) 
        //- frustumPlanes.x) / (frustumPlanes.y - frustumPlanes.x);
        -dot(gl_ModelViewMatrixTranspose[2], Ding) / frustumPlanes.y;
    gl_FragColor.rgb = (radicand < 0.0) ? gl_Color.rgb : gl_FragColor.rgb;
#endif // CLIP

#ifdef DISCARD_COLOR_MARKER
    Ding = vec4(objPos.xyz, 1.0);
    depth = dot(gl_ModelViewProjectionMatrixTranspose[2], Ding);
    depthW = dot(gl_ModelViewProjectionMatrixTranspose[3], Ding);
    //gl_FragDepth = ((depth / depthW) + 1.0) * 0.5;
    gl_FragDepth = 
        //(-dot(gl_ModelViewMatrixTranspose[2], Ding) -
        //frustumPlanes.x) / (frustumPlanes.y - frustumPlanes.x);
        -dot(gl_ModelViewMatrixTranspose[2], Ding) / frustumPlanes.y;
#endif // DISCARD_COLOR_MARKER

#endif // DEPTH

]]>
    </snippet>
    <!--<snippet name="base::fragment::out-depth"/>-->
    <snippet name="base::fragment::footer" />
    </shader>
  </namespace>

    <namespace name="volume">
        <shader name="updateVolumeVertex">
            <snippet type="version">120</snippet>
            <snippet type="string">
                <!--
// Copyright (c) 2011  Michael Krone <kroneml@vis.uni-stuttgart.de>
//                     Visualization Research Center (VISUS),
//                     University of Stuttgart, Germany
//                     http://www.vis.uni-stuttgart.de/~kroneml/

uniform vec3 minOS;
uniform vec3 rangeOS;
uniform float genFac;
uniform float voxelVol;
uniform vec3 volSize;
uniform float sliceDepth;
uniform float radius;

varying float density;

void main(void) {
    // multiple VBO version
    //int d = int( floor( sliceDepth + 0.5));
    
    vec3 pos = clamp( floor( ( ( gl_Vertex.xyz - minOS) / rangeOS ) * volSize), vec3( 0.0), volSize );
    
    float spVol;
    if( radius < 0.0 )
      spVol = ( 4.0 / 3.0) * 3.14159265 * gl_Vertex.w * gl_Vertex.w * gl_Vertex.w;
    else
      spVol = ( 4.0 / 3.0) * 3.14159265 * radius * radius * radius;
    
    // multiple VBO version
    /*
    if( d != int( pos.z + 1.0) ) {
        gl_Position = vec4( 0.0, 0.0, 1000.0, 0.0);
        density = 0.0;
    } else {
        gl_Position = vec4( 
            2.0 * ( pos.xy + vec2( 1.0)) / ( volSize.xy + vec2( 2.0)) - vec2( 1.0),
            0.0, 1.0);
        density = (spVol / voxelVol) * genFac;
    }
    */
    // multiple VBO version
    gl_Position = vec4( 
        2.0 * ( pos.xy + vec2( 1.0)) / ( volSize.xy + vec2( 2.0)) - vec2( 1.0),
        0.0, 1.0);
    density = (spVol / voxelVol) * genFac;

}
-->
            </snippet>
        </shader>

        <shader name="updateVolumeFragment">
            <snippet type="version">120</snippet>
            <snippet type="string">
                <!--
// Copyright (c) 2011  Michael Krone <kroneml@vis.uni-stuttgart.de>
//                     Visualization Research Center (VISUS),
//                     University of Stuttgart, Germany
//                     http://www.vis.uni-stuttgart.de/~kroneml/

varying float density;

void main(void) {
    gl_FragColor = vec4( density, density, density, 1.0);
}
-->
            </snippet>
        </shader>
    </namespace>

</btf>
