<?xml version="1.0" encoding="utf-8"?>
<btf namespace="fragment_count" type="MegaMolGLSLShader" version="1.0">

  <include file="cs_id" />

  <snippet name="buffers" type="string">
    <![CDATA[
layout(std430, binding = 10) coherent buffer FragmentMinMax
{
  uvec2 fragmentMinMax[];
};
    ]]>
  </snippet>

  <snippet name="uniforms" type="string">
    <![CDATA[
layout(binding = 0) uniform sampler1D transferFunction;
layout(binding = 1) uniform sampler2D fragmentCount;

uniform vec2 scaling = vec2(1.0);
uniform mat4 modelView = mat4(1.0);
uniform mat4 projection = mat4(1.0);

uniform vec4 clearColor = vec4(0.0);

uniform uint invocationCount = 0;
uniform int sqrtDensity = 1;
    ]]>
  </snippet>

  <shader name="comp">
    <snippet type="version">430</snippet>
    <snippet type="string">
      <![CDATA[
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
        ]]>
    </snippet>
    <snippet name="::fragment_count::buffers" />
    <snippet name="::fragment_count::uniforms" />
    <snippet name="::cs_id::getInvocationID" />
    <snippet type="string">
      <![CDATA[
uniform uvec2 resolution = uvec2(0);
uniform uvec2 fragmentCountStepSize = uvec2(16);

void main()
{
  if (any(greaterThanEqual(gl_GlobalInvocationID.xy, resolution)))
  {
    return;
  }

  uint invocationID = getInvocationID();
  fragmentMinMax[invocationID] = uvec2(4294967295u, 0u);
 
  memoryBarrierBuffer();
  uvec2 texCoord = gl_GlobalInvocationID.xy;
  
  uint thisMin = 4294967295u;
  uint thisMax = 0;

  texCoord.y = gl_GlobalInvocationID.y;
  while (texCoord.y < resolution.y) {
    texCoord.x = gl_GlobalInvocationID.x;
    while (texCoord.x < resolution.x) {
      vec4 texel = texelFetch(fragmentCount, ivec2(texCoord), 0) - clearColor;
      uint count = uint(texel.r);
      if (count >= 0 && count < thisMin) {
        thisMin = count;
      }
      if (count > thisMax) {
        thisMax = count;
      }
      texCoord.x += fragmentCountStepSize.x;
    }
    texCoord.y += fragmentCountStepSize.y;
  }    

  fragmentMinMax[invocationID] = uvec2(thisMin, thisMax);
  
//  barrier();
  memoryBarrierBuffer();
  
  if (invocationID == 0)
  {
    for (uint index = 1; index < invocationCount; ++index)
    {
      uvec2 thatMinMax = fragmentMinMax[index];
        
      if (thatMinMax.x < thisMin)
      {
        thisMin = thatMinMax.x;
      }
        
      if (thatMinMax.y > thisMax)
      {
        thisMax = thatMinMax.y;
      }
    }
    
    fragmentMinMax[0] = uvec2(thisMin, thisMax);
  }
}
        ]]>
    </snippet>
  </shader>

  <shader name="vert">
    <snippet type="version">430</snippet>
    <snippet name="::fragment_count::buffers" />
    <snippet name="::fragment_count::uniforms" />
    <snippet type="string">
      <![CDATA[
uniform vec2 bottomLeft = vec2(-1.0);
uniform vec2 topRight = vec2(1.0);
uniform float depth = 0.0;

smooth out vec2 texCoord;

void main()
{
  const vec2 vertices[6] =
  {
  // b_l, b_r, t_r
  bottomLeft, vec2(topRight.x, bottomLeft.y), topRight
  // t_r, t_l, b_l
  , topRight, vec2(bottomLeft.x, topRight.y), bottomLeft
  };
  
  const vec2 texCoords[6] =
  {
  // b_l, b_r, t_r
  vec2(0.0), vec2(1.0, 0.0), vec2(1.0)
  // t_r, t_l, b_l
  , vec2(1.0), vec2(0.0, 1.0), vec2(0.0)
  };
  
  texCoord = texCoords[gl_VertexID];

  vec4 vertex = vec4(vertices[gl_VertexID], depth, 1.0);
  
  gl_Position = /*projection * modelView */ vertex;
}
        ]]>
    </snippet>
  </shader>

  <shader name="frag">
    <snippet type="version">430</snippet>
    <snippet name="::fragment_count::buffers" />
    <snippet name="::fragment_count::uniforms" />
    <snippet type="string">
      <![CDATA[
smooth in vec2 texCoord;

layout(location = 0) out vec4 fragColor;

void main()
{
  vec4 frags = texture(fragmentCount, texCoord) - clearColor;
  
  uvec2 globalMinMax = fragmentMinMax[0].xy;
  
  if (frags.r >= 0) {
    float value = (frags.r - globalMinMax[0]) / (globalMinMax[1] - globalMinMax[0]);
    if (sqrtDensity == 1) {
      value = sqrt(value);
    }
    value = clamp(value, 0.0, 1.0);
    fragColor = texture(transferFunction, value);
  } else {
    fragColor = clearColor;
  }
}
        ]]>
    </snippet>
  </shader>

</btf>
