<?xml version="1.0" encoding="utf-8"?>
<btf namespace="pc_item_draw" type="MegaMolGLSLShader" version="1.0">

  <include file="pc" />
  <include file="core_utils" />

  <namespace name="continuous">
    <snippet name="uniforms" type="string">
      <![CDATA[
layout(binding = 1) uniform sampler2D fragCount;
layout(early_fragment_tests) in;
uniform vec4 clearColor = vec4(0.0);
      ]]>
    </snippet>

    <shader name="comp">
      <snippet type="version">440</snippet>
      <snippet name="::pc::extensions" />
      <snippet name="::pc::useLineStrip" />
      <snippet name="::pc::buffers" />
      <snippet name="::pc::uniforms" />
      <snippet name="::pc_item_draw::continuous::uniforms" />
      <snippet type="string">
        <![CDATA[
layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

uniform uvec2 resolution = uvec2(0);
//uniform uvec2 stepSize = uvec2(3);
uniform uvec2 fragmentCountStepSize = uvec2(16);

void main()
{

  uint minFrag = 4294967295u;
  uint maxFrag = 0;

  uvec2 start = min(gl_GlobalInvocationID.xy * fragmentCountStepSize, resolution);
  uvec2 end = min(start + fragmentCountStepSize, resolution);
  uvec2 texCoord = start;

  if (any(greaterThanEqual(start, resolution)) || any(greaterThan(end, resolution)))
  {
    return;
  }

  while (texCoord.y < end.y)
  {
    texCoord.x = start.x;

    while (texCoord.x < end.x)
    {
      vec4 texel = texelFetch(fragCount, ivec2(texCoord), 0) - clearColor;
      uint count = uint(texel.r);

      if (count > 0 && count < minFrag)
      {
        minFrag = count;
      }

      if (count > maxFrag)
      {
        maxFrag = count;
      }

      ++texCoord.x;
    }

    ++texCoord.y;
  }

  atomicMin(minFragmentCount, minFrag);
  atomicMax(maxFragmentCount, maxFrag);
}
        ]]>
      </snippet>
    </shader>

    <shader name="vert">
      <snippet type="version">440</snippet>
      <snippet name="::pc::extensions" />
      <snippet name="::pc::uniforms" />
      <snippet name="::pc_item_draw::continuous::uniforms" />
      <snippet type="string">
        <![CDATA[
uniform vec2 bottomLeft = vec2(-1.0);
uniform vec2 topRight = vec2(1.0);

smooth out vec2 texCoord;

void main()
{
  const vec2 vertices[6] =
  {
  // b_l, b_r, t_r
  bottomLeft, vec2(topRight.x, bottomLeft.y), topRight
  // t_r, t_l, b_l
  , topRight, vec2(bottomLeft.x, topRight.y), bottomLeft
  };

  const vec2 texCoords[6] =
  {
  // b_l, b_r, t_r
  vec2(0.0), vec2(1.0, 0.0), vec2(1.0)
  // t_r, t_l, b_l
  , vec2(1.0), vec2(0.0, 1.0), vec2(0.0)
  };

  texCoord = texCoords[gl_VertexID];

  vec4 vertex = vec4(vertices[gl_VertexID], pc_item_defaultDepth, 1.0);

  gl_Position = /*projection * modelView */ vertex;
}
        ]]>
      </snippet>
    </shader>

    <shader name="frag">
      <snippet type="version">440</snippet>
      <snippet name="::core_utils::tflookup" />
      <snippet name="::core_utils::tfconvenience" />
      <snippet name="::pc::extensions" />
      <snippet name="::pc::buffers" />
      <snippet name="::pc::uniforms" />
      <snippet name="::pc_item_draw::continuous::uniforms" />
      <snippet type="string">
        <![CDATA[
smooth in vec2 texCoord;
layout(early_fragment_tests) in;
layout(location = 0) out vec4 fragColor;

void main()
{
  vec4 frags = texture(fragCount, texCoord) - clearColor;

  if (frags.r >= minFragmentCount)
  {
    float value = (frags.r - minFragmentCount) / (maxFragmentCount - minFragmentCount);
    value = clamp(value, 0.0, 1.0);
    fragColor = tflookup(value);
    //fragColor = vec4(vec3(gl_FragCoord.z), 1.0);
  }
  else
  {
    fragColor = clearColor;
  }
}
        ]]>
      </snippet>
    </shader>
  </namespace>
</btf>
