<?xml version="1.0" encoding="utf-8"?>
<btf type="MegaMolGLSLShader" version="1.0" namespace="proteincartoon">
    
    <shader name="vertex">
      <snippet type="version">400</snippet>
      <snippet type="string">
        <!--
in vec4 Position;

void main() {
    gl_Position = Position;
}
-->
      </snippet>
    </shader>

    <shader name="tesscontrol">
      <snippet type="version">400</snippet>
      <snippet type="string">
        <!--
uniform int uOuter0, uOuter1;
layout( vertices = 4 ) out;

void main() {
    gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;
    gl_TessLevelOuter[0] = float( uOuter0);
    gl_TessLevelOuter[1] = float( uOuter1);
}
-->
      </snippet>
    </shader>

    <shader name="tesseval">
      <snippet type="version">400</snippet>
      <snippet type="string">
        <!--
layout( isolines, equal_spacing) in;

void main() {
    vec4 p0 = gl_in[0].gl_Position;
    vec4 p1 = gl_in[1].gl_Position;
    vec4 p2 = gl_in[2].gl_Position;
    vec4 p3 = gl_in[3].gl_Position;
    float u = gl_TessCoord.x;
    // the basis functions:
    float b0 = (1.0 - u) * (1.0 - u) * (1.0 - u);
    float b1 = 3. * u * (1.0 - u) * (1.0 - u);
    float b2 = 3. * u * u * (1.0 - u);
    float b3 = u * u * u;
    gl_Position = b0*p0 + b1*p1 + b2*p2 + b3*p3;
}
-->
      </snippet>
    </shader>

    <shader name="geometry">
      <snippet type="version">400</snippet>
      <snippet type="string">
        <!--
void main()
{

}
-->
      </snippet>
    </shader>

    <shader name="fragment">
      <snippet type="version">400</snippet>
      <snippet type="string">
        <!--
out vec4 FragColor;

void main()
{
    FragColor = vec4( 1.0, 1.0, 0.0, 1.0);
}
-->
      </snippet>
    </shader>

</btf>
