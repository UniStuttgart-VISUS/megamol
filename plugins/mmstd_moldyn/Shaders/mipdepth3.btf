<?xml version="1.0" encoding="utf-8"?>
<btf type="MegaMolGLSLShader" version="1.0" namespace="mipdepth3">

    <namespace name="geopoints">
        <shader name="vertex">
            <snippet type="string"><![CDATA[
/****************************************************************************/
#version 130
#extension GL_EXT_gpu_shader4 : enable

in float colIdx;
out float colourIndex;

void main(void) {
    gl_Position = gl_Vertex;
    gl_FrontColor = gl_Color;
    colourIndex = colIdx;
}
/****************************************************************************/
]]>
            </snippet>
        </shader>

        <shader name="geometry">
            <snippet type="string"><![CDATA[
/****************************************************************************/
#version 130
#extension GL_EXT_geometry_shader4 : enable
#extension GL_EXT_gpu_shader4 : enable

uniform vec4 inConsts1;
in float colourIndex[];
uniform sampler1D colTab;

uniform vec3 cellPos;

#define MIN_COLV inConsts1.y
#define MAX_COLV inConsts1.z
#define COLTAB_SIZE inConsts1.w

void main(void) {

    vec4 inPos1 = gl_PositionIn[0];
    vec4 inPos2 = vec4(cellPos + (cellPos - inPos1.xyz), inPos1.w);

    inPos1.w = 1.0;
    inPos2.w = 1.0;

    vec4 col1, col2;

    float colRange = MAX_COLV - MIN_COLV;
    if (colRange < 0.000001) {
        col1 = gl_FrontColorIn[0];
        col2 = gl_FrontColorIn[0];
    } else {
        vec2 colVals = vec2(colourIndex[0]);
        colVals = (colVals - MIN_COLV) / colRange;
        colVals = clamp(colVals, 0.0, 1.0);

        colVals *= (1.0 - 1.0 / COLTAB_SIZE);
        colVals += 0.5 / COLTAB_SIZE;

        col1 = texture1D(colTab, colVals.x);
        col2 = texture1D(colTab, colVals.y);
    }

    gl_Position = gl_ModelViewProjectionMatrix * inPos1;
    gl_FrontColor = col1;
    EmitVertex();
    EndPrimitive();

    gl_Position = gl_ModelViewProjectionMatrix * inPos2;
    gl_FrontColor = col2;
    EmitVertex();
    EndPrimitive();

}
/****************************************************************************/
]]>
            </snippet>
        </shader>

    </namespace>

    <namespace name="instapoints">
        <shader name="vertex">
            <snippet type="string">
    <![CDATA[
/****************************************************************************/
#version 140
#extension GL_EXT_gpu_shader4 : enable


uniform vec4 inConsts1;
in float colIdx;
uniform sampler1D colTab;
uniform vec3 cellPos;

#define MIN_COLV inConsts1.y
#define MAX_COLV inConsts1.z
#define COLTAB_SIZE inConsts1.w

void main(void) {

    float cid = MAX_COLV - MIN_COLV;
    if (cid < 0.000001) {
        gl_FrontColor = gl_Color;
    } else {
        cid = (colIdx - MIN_COLV) / cid;
        cid = clamp(cid, 0.0, 1.0);
        
        cid *= (1.0 - 1.0 / COLTAB_SIZE);
        cid += 0.5 / COLTAB_SIZE;
        
        gl_FrontColor = texture1D(colTab, cid);
    }
    vec4 inPos;
    if (gl_InstanceID == 0) {
        inPos = gl_Vertex;
    } else {
        inPos = vec4(cellPos + (cellPos - gl_Vertex.xyz), gl_Vertex.w);
    }
    gl_Position = gl_ModelViewProjectionMatrix * inPos;

}
]]>
            </snippet>
        </shader>
    </namespace>

</btf>
