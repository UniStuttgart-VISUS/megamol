<?xml version="1.0" encoding="utf-8"?>
<btf type="MegaMolGLSLShader" version="1.0" namespace="BrickStatsRenderer">

    <snippet name="uniforms" type="string">
            <![CDATA[
#extension GL_ARB_shader_storage_buffer_object : require
#extension GL_EXT_gpu_shader4 : require

uniform mat4 modelView;
uniform mat4 projection;
uniform float scaling;
]]>
    </snippet>
    <snippet type="string" name="buffers">
<![CDATA[

struct BlockInfo {
  uint highOffset; // actually uint64
  uint lowOffset;
  uint highSize; // actually uint64
  uint lowSize;
  //vislib::math::Cuboid: left, bottom, back, right, top, front
  float bounds[6];
  float means[3];
  float stddevs[3];
};

layout(std430, binding=0) buffer StatsBlock {
    BlockInfo stats[];
};
]]>
    </snippet>

    <namespace name="stats">
        <shader name="vertex">
            <snippet type="version">450</snippet>
            <snippet name="BrickStatsRenderer::uniforms" />
            <snippet name="BrickStatsRenderer::buffers" />
            <snippet name="Main" type="string">
        <![CDATA[
out vec3 col;

void main(void) {

    uint ID = gl_VertexID / 6;
    int localID = gl_VertexID % 6;
    vec3 pos = vec3(stats[ID].means[0], stats[ID].means[1], stats[ID].means[2]);
    float var = (localID % 2) * 2.0 - 1.0;
    int axis = (localID / 2);
    pos[axis] += var * stats[ID].stddevs[axis];
    gl_Position = projection * modelView * vec4(scaling * pos, 1.0);
    col = vec3(0.0);
    col[axis] = 1.0;
}
]]>
        
            </snippet>
        </shader>

        <shader name="fragment">
            <snippet type="version">450</snippet>
            <snippet name="BrickStatsRenderer::uniforms" />
            <snippet name="BrickStatsRenderer::buffers" />
            <snippet name="Main" type="string">
            <![CDATA[
in vec3 col;

layout(location = 0) out vec4 fragColor;

void main(void) {
    fragColor = vec4(col, 1.0);
}
]]>
            </snippet>
        </shader>
    </namespace>

    <namespace name="boxes">
        <shader name="vertex">
            <snippet type="version">450</snippet>
            <snippet name="BrickStatsRenderer::uniforms" />
            <snippet name="BrickStatsRenderer::buffers" />
            <snippet name="Main" type="string">
        <![CDATA[
out vec3 col;

const vec3 vertices[] = {{0,0,0}, {1,0,0}, {0,1,0}, {1,1,0}, {0,0,0}, {0,1,0}, {1,0,0}, {1,1,0}, // front
                        {0,0,1}, {1,0,1}, {0,1,1}, {1,1,1}, {0,0,1}, {0,1,1}, {1,0,1}, {1,1,1}, // back
                        {0,0,0}, {0,0,1}, {0,1,0}, {0,1,1}, {1,0,0}, {1,0,1}, {1,1,0}, {1,1,1}};

void main(void) {

    uint ID = gl_VertexID / 24;
    int localID = gl_VertexID % 24;
    vec3 pos;
    pos.x = mix(stats[ID].bounds[0], stats[ID].bounds[3], vertices[localID].x);
    pos.y = mix(stats[ID].bounds[1], stats[ID].bounds[4], vertices[localID].y);
    pos.z = mix(stats[ID].bounds[2], stats[ID].bounds[5], vertices[localID].z);

    gl_Position = projection * modelView * vec4(scaling * pos, 1.0);
    col = vec3(1.0);
}
]]>
        
            </snippet>
        </shader>

        <shader name="fragment">
            <snippet type="version">450</snippet>
            <snippet name="BrickStatsRenderer::uniforms" />
            <snippet name="BrickStatsRenderer::buffers" />
            <snippet name="Main" type="string">
            <![CDATA[
in vec3 col;

layout(location = 0) out vec4 fragColor;

void main(void) {
    fragColor = vec4(col, 1.0);
}
]]>
            </snippet>
        </shader>
    </namespace>

</btf>
