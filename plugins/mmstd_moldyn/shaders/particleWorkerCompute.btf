<?xml version="1.0" encoding="utf-8"?>
<btf type="MegaMolGLSLShader" version="1.0" namespace="particleWorkerCompute">


  <shader name="work_on_clusters">
    <snippet type="version">430</snippet>
    <snippet type="string">
      <![CDATA[

layout (local_size_x = 1024) in;

layout(std430, binding = 0) buffer ClusterInfos
{
  uint ci[];  // count, start, ... , data[count]
};

layout(std430, binding = 1) buffer VBO
{
  float vbo[];
};

layout(std430, binding = 2) buffer CBO
{
  float cbo[];
};

uniform uint count;
uniform uint pos_stride;
uniform uint col_stride;

void main()
{
    uint id = gl_GlobalInvocationID.y * (gl_NumWorkGroups.x * gl_WorkGroupSize.x) + gl_GlobalInvocationID.x;
    if(id >= count)
        return;
    
    uint particle_count = ci[2*id + 0];
    uint particle_start = ci[2*id + 1];
  
    uint X = 0, Y = 1, Z = 2;
    uint R = 0, G = 1, B = 2, A = 3;
    if(pos_stride == col_stride) //interleaved
    {
        X = 0;
        Y = 1;
        Z = 2;
        R = 3;
        G = 4;
        B = 5;
        A = 6;
    }
  
    vec4 col = vec4(vec3(id)/count, 1.0);
    for(uint i = particle_start; i < particle_start + particle_count; ++i)
    {
        cbo[ci[i]*col_stride + R] = col.r;
        cbo[ci[i]*col_stride + G] = col.g;
        cbo[ci[i]*col_stride + B] = col.b;
        cbo[ci[i]*col_stride + A] = col.a;
    }
}

    ]]>
    </snippet>
  </shader>

  <snippet name="vbo" type="string">
    <![CDATA[

      layout(std430, binding = 0) buffer VBO
      {
        float vbo[];
      };

      #define _X 0
      #define _Y 1
      #define _Z 2
      #define _R 3
      #define _G 4
      #define _B 5
      #define _A 6

      uniform uint stride;
      uniform uint count;
      
      uint vboID(uint i)
      {
        return i*(stride/4);
      }
    
    ]]>
  </snippet>

  <snippet name="particlelist" type="string">
    <![CDATA[

      layout(std430, binding = 1) buffer ParticleList
      {
        uint pl[];
      };

      #define _ID   0
      #define _NEXT 1
      
      uniform uint particleListStride;
      
      uint plID(uint i)
      {
          return (i * particleListStride / 4);
      }
   
    ]]>
  </snippet>

  <shader name="initParticlelist">
    <snippet type="version">440</snippet>
    <snippet name="::particleWorkerCompute::vbo"/>
    <snippet name="::particleWorkerCompute::particlelist"/>
    <snippet name="code" type="string">
      <![CDATA[
        layout (local_size_x = 1024) in;

        void main()
        {
          uint id = gl_GlobalInvocationID.y * (gl_NumWorkGroups.x * gl_WorkGroupSize.x) + gl_GlobalInvocationID.x;
          if(id >= count)
            return;

          pl[plID(id) + _ID] = id;
          pl[plID(id) + _NEXT] = 0;
        }

      ]]>
    </snippet>
  </shader>

  <shader name="makeParticleList">
    <snippet type="version">440</snippet>
    <snippet name="::particleWorkerCompute::vbo"/>
    <snippet name="::particleWorkerCompute::particlelist"/>
    <snippet name="code" type="string">
      <![CDATA[
        layout (local_size_x = 1024) in;

        uniform float radius;
      
        void main()
        {
          uint id = gl_GlobalInvocationID.y * (gl_NumWorkGroups.x * gl_WorkGroupSize.x) + gl_GlobalInvocationID.x;
          if(id >= count)
            return;

          uint idx = vboID(id);
          uint part_idx = plID(id);

          vec3 me = vec3(vbo[idx + _X], vbo[idx + _Y], vbo[idx + _Z]);

          for(uint i = 0; i < count; ++i)
          {
            if(i == id)
              continue;

            uint iidx = vboID(i);
            uint part_iidx = plID(i);

            vec3 you = vec3(vbo[iidx + _X], vbo[iidx + _Y], vbo[iidx + _Z]);
            if(distance(you, me) < 2.0 * radius)
            {
              uint tryItAgain = 1;
              while(tryItAgain > 0 && tryItAgain < 100)
              {
                // find end of 1st list
                  uint last_idx = part_idx;
                  uint next_idx = pl[last_idx + _NEXT];
                  while(next_idx != 0)
                  {
                    last_idx = next_idx;
                    next_idx = pl[plID(last_idx) + _NEXT];
                  }
                
                // find end of 2nd list
                  uint last_iidx = part_iidx;
                  uint next_iidx = pl[last_iidx + _NEXT];
                  while(next_iidx != 0)
                  {
                    last_iidx = next_iidx;
                    next_iidx = pl[plID(last_iidx) + _NEXT];
                  }
                  
                // find real cluster id of 1st list
                  uint cluster_idx = part_idx;
                  while(pl[plID(cluster_idx) + _ID] != cluster_idx)
                    cluster_idx = pl[plID(cluster_idx) + _ID];
              
                // find real cluster id of 2nd list
                  uint cluster_iidx = part_iidx;
                  while(pl[plID(cluster_iidx) + _ID] != cluster_iidx)
                    cluster_iidx = pl[plID(cluster_iidx) + _ID];

                // find smaller cluster
                uint small_cluster_id = cluster_idx;
                uint big_cluster_id = cluster_iidx;
                if(cluster_iidx < cluster_idx)
                {
                  small_cluster_id = cluster_iidx;
                  big_cluster_id = cluster_idx;
                }
                // else: variablenvorbelegung
                
                // concat min_id list to the other one
                //pl[small_cluster_id + _NEXT] = big_cluster_id
                // if old != null another thread was faster and we neet to find the end again
                uint old = atomicCompSwap(pl[small_cluster_id + _NEXT], 0, big_cluster_id);
                if(old != 0)
                  tryItAgain++;
                else
                {
                  tryItAgain = 0;
                  // exchange cluster-id on new list-entry
                  atomicExchange(pl[big_cluster_id + _ID], small_cluster_id);
                }
              }  
            }
          }
        }

      ]]>
    </snippet>
  </shader>
  
  <shader name="grid">
    <snippet type="version">440</snippet>
    <snippet name="::particleWorkerCompute::vbo"/>
    <snippet name="code" type="string">
      <![CDATA[
        layout (local_size_x = 1024) in;

        float modulo(float v, float lower, float upper)
        {
          if(v < lower)
            return upper + (v - lower);
          else if(v > upper)
            return lower + (v - upper);
          else
            return v;
        }

        void main()
        {
          uint id = gl_GlobalInvocationID.y * (gl_NumWorkGroups.x * gl_WorkGroupSize.x) + gl_GlobalInvocationID.x;
          uint idx = id*(stride/4);
          if(id >= count)
            return;

          vbo[idx + _X] = modulo(vbo[idx + _X], 0.0f, 200.0f);
          vbo[idx + _Y] = modulo(vbo[idx + _Y], 0.0f, 200.0f);
          vbo[idx + _Z] = modulo(vbo[idx + _Z], 0.0f, 200.0f);

          if(vbo[idx + _X] < 0.0)
          {
            vbo[idx + _R] = 0.0f;
            vbo[idx + _G] = 0.0f;
            vbo[idx + _B] = 1.0f;
          }
          else
          {
            vbo[idx + _R] = 1.0f;
            vbo[idx + _G] = 0.0f;
            vbo[idx + _B] = 0.0f;
          }
        }

      ]]>
    </snippet>
  </shader>

  <snippet name="prefix_type_float" type="string">
    <![CDATA[
      #define PREFIX_SUM_TYPE float
    ]]>
  </snippet>

  <snippet name="prefix_type_uint" type="string">
    <![CDATA[
      #define PREFIX_SUM_TYPE uint
    ]]>
  </snippet>

  <shader name="prefixSum">
    <snippet type="version">440</snippet>
    <snippet name="code" type="string">
      <![CDATA[
      layout (local_size_x = 1024) in;

      layout(std430, binding = 0) coherent buffer InputBuffer
      {
        PREFIX_SUM_TYPE inputBuffer[];
      };

      layout(std430, binding = 1) coherent buffer OutputBuffer
      {
        PREFIX_SUM_TYPE outputBuffer[];
      };

      shared PREFIX_SUM_TYPE intermediate[gl_WorkGroupSize.x*2];
      
      uniform uint count;
      uniform PREFIX_SUM_TYPE add = PREFIX_SUM_TYPE(0);
      uniform uint exclusive = 0;
      uniform uint memoryOffset = 0;
      uniform uint memoryOffsetStartAdd = 0;
      uniform uint addMemoryOffsetStartAdd = 0;
// von nvidia
      void main()
      {
        uint id = gl_LocalInvocationID.x;
        uint offset = 1;
        
        if(2*id > count)
          return;

        intermediate[2*id + 0] = inputBuffer[memoryOffset+2*id + 0];
        intermediate[2*id + 1] = inputBuffer[memoryOffset+2*id + 1];
        
        PREFIX_SUM_TYPE addValue = add;
        
        if(addMemoryOffsetStartAdd == 1)
          addValue += outputBuffer[uint(memoryOffsetStartAdd)];
        
        if (id == 0 && exclusive == 0) { intermediate[0] += addValue; } // add

        uint d;
        for (d = count>>1; d > 0; d >>= 1)
        { 
          barrier();
          memoryBarrierShared();
          if (id < d)  
          { 
            uint ai = offset*(2*id+1)-1;  
            uint bi = offset*(2*id+2)-1;
            
            intermediate[bi] += intermediate[ai];  
          }
          offset *= 2;  
        }
   
        if(exclusive == 0)
        {
          offset = 1;  
          for (d = 1; d < count; d *= 2) // traverse down tree & build scan  
          {  
            barrier();
            memoryBarrierShared();
            if (id < d)                       
            {  
              uint ai = offset*(2*id+1);  
              uint bi = offset*(2*id+2);  
              intermediate[bi] += intermediate[ai];
            }  
            offset *= 2;  
          }
        }
        else //exclusive
        {
          if (id == 0) { intermediate[count - 1] = addValue; } // clear the last element
 
          for (d = 1; d < count; d *= 2) // traverse down tree & build scan  
          {  
            offset >>= 1;  
            barrier();
            memoryBarrierShared();
            if (id < d)                       
            {  

              uint ai = offset*(2*id+1)-1;  
              uint bi = offset*(2*id+2)-1;  

              PREFIX_SUM_TYPE t = intermediate[ai];
              intermediate[ai] = intermediate[bi]; 
              intermediate[bi] += t;   
            }  
          }
        }

        barrier();
        memoryBarrierShared();
    
        outputBuffer[memoryOffset+2*id + 0] = intermediate[2*id + 0];
        outputBuffer[memoryOffset+2*id + 1] = intermediate[2*id + 1];
      }
/* aus der openglbible:
      void main()
      {
        uint id = gl_LocalInvocationID.x;
        
        if(2*id > count)
          return;
        
        uint read;
        uint write;
        uint mask;
    
        const uint steps = uint(log2(count)) + 1;
    
        intermediate[2*id + 0] = inputBuffer[2*id + 0];
        intermediate[2*id + 1] = inputBuffer[2*id + 1];
    
        barrier();
        memoryBarrierShared();
    
        for(uint s = 0; s < steps; ++s)
        {
          mask = (1 << s) - 1;
          read = (id >> s) << (s + 1) + mask;
          write = read + 1 + (id & mask);

          intermediate[write] += intermediate[read];

          barrier();
          memoryBarrierShared();
        }
    
        outputBuffer[2*id + 0] = intermediate[2*id + 0];
        outputBuffer[2*id + 1] = intermediate[2*id + 1];
      }
*/

      ]]>
    </snippet>
  </shader>

  <shader name="griddify">
    <snippet type="version">440</snippet>
    <snippet name="::particleWorkerCompute::vbo"/>
    <snippet name="code" type="string">
      <![CDATA[
      layout (local_size_x = 1024) in;

      layout(std430, binding = 1) buffer inputBuffer
      {
        uint particleClusterIDs;
      };

      uniform float radius;
      
      vec4 colorFromId(uint id)
      {
        vec4 red = vec4(1.0f, 0.0f, 0.0f, 1.0f);
        vec4 gre = vec4(0.0f, 1.0f, 0.0f, 1.0f);
        vec4 blu = vec4(0.0f, 0.0f, 1.0f, 1.0f);
        
        float a = float(id) / float(count);
        
        if(a < 0.5)
          return mix(blu, gre, a);
        else
          return mix(gre, red, a);
      }

      void main()
      {
        uint id = gl_GlobalInvocationID.y * (gl_NumWorkGroups.x * gl_WorkGroupSize.x) + gl_GlobalInvocationID.x;
        uint idx = id*(stride/4);
        if(id >= count)
          return;

        vec3 me = vec3(vbo[idx + _X], vbo[idx + _Y], vbo[idx + _Z]);

        for(uint i = 0; i < count; ++i)
        {
          if(i == id)
            continue;

          uint iidx = i*(stride/4);

          vec3 you = vec3(vbo[iidx + _X], vbo[iidx + _Y], vbo[iidx + _Z]);
          if(distance(you, me) < 2.0 * radius)
          {
            vec4 c = colorFromId(min(id, i));
            vbo[idx + _R] = vbo[iidx + _R] = c.r;
            vbo[idx + _G] = vbo[iidx + _R] = c.g;
            vbo[idx + _B] = vbo[iidx + _R] = c.b;
            vbo[idx + _A] = vbo[iidx + _R] = c.a;
            
          }
        }

      }


      ]]>
    </snippet>
  </shader>

  <shader name="clusterify">
    <snippet type="version">440</snippet>
    <snippet name="::particleWorkerCompute::vbo"/>
    <snippet name="code" type="string">
      <![CDATA[
      layout (local_size_x = 1024) in;

      layout(std430, binding = 1) buffer inputBuffer
      {
        uint particleClusterIDs;
      };

      uniform float radius;
      
      vec4 colorFromId(uint id)
      {
        vec4 red = vec4(1.0f, 0.0f, 0.0f, 1.0f);
        vec4 gre = vec4(0.0f, 1.0f, 0.0f, 1.0f);
        vec4 blu = vec4(0.0f, 0.0f, 1.0f, 1.0f);
        
        float a = float(id) / float(count);
        
        if(a < 0.5)
          return mix(blu, gre, a);
        else
          return mix(gre, red, a);
      }

      void main()
      {
        uint id = gl_GlobalInvocationID.y * (gl_NumWorkGroups.x * gl_WorkGroupSize.x) + gl_GlobalInvocationID.x;
        uint idx = id*(stride/4);
        if(id >= count)
          return;

        vec3 me = vec3(vbo[idx + _X], vbo[idx + _Y], vbo[idx + _Z]);

        for(uint i = 0; i < count; ++i)
        {
          if(i == id)
            continue;

          uint iidx = i*(stride/4);

          vec3 you = vec3(vbo[iidx + _X], vbo[iidx + _Y], vbo[iidx + _Z]);
          if(distance(you, me) < 2.0 * radius)
          {
            vec4 c = colorFromId(min(id, i));
            vbo[idx + _R] = vbo[iidx + _R] = c.r;
            vbo[idx + _G] = vbo[iidx + _R] = c.g;
            vbo[idx + _B] = vbo[iidx + _R] = c.b;
            vbo[idx + _A] = vbo[iidx + _R] = c.a;
            
          }
        }

      }


      ]]>
    </snippet>
  </shader>

</btf>

