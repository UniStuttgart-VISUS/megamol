<?xml version="1.0" encoding="utf-8"?>
<btf type="MegaMolGLSLShader" version="1.0" namespace="mipdepth4">

    <namespace name="geoinitdepthpoints">
        <shader name="vertex">
            <snippet type="string"><![CDATA[
/****************************************************************************/
#version 130
#extension GL_EXT_gpu_shader4 : enable
void main(void) {
    gl_Position = gl_Vertex;
}
/****************************************************************************/
]]>
            </snippet>
        </shader>

        <shader name="geometry">
            <snippet type="string"><![CDATA[
/****************************************************************************/
#version 130
#extension GL_EXT_geometry_shader4 : enable
#extension GL_EXT_gpu_shader4 : enable

uniform vec3 cellPos;
// new camera
uniform mat4 mv_inv;
uniform mat4 mv_inv_transp;
uniform mat4 mvp;
uniform mat4 mvp_inv;
uniform mat4 mvp_transp;
uniform vec4 light_dir;
uniform vec4 cam_pos;
// end new camera
void main(void) {

    vec4 inPos1 = gl_PositionIn[0];
    vec4 inPos2 = vec4(cellPos + (cellPos - inPos1.xyz), inPos1.w);

    gl_Position = mvp * inPos1;
    EmitVertex();
    EndPrimitive();

    gl_Position = mvp * inPos2;
    EmitVertex();
    EndPrimitive();

}
/****************************************************************************/
]]>
            </snippet>
        </shader>

    </namespace>
    
    <namespace name="instainitdepthpoints">
        <shader name="vertex">
            <snippet type="string">
    <![CDATA[
/****************************************************************************/
#version 140
#extension GL_EXT_gpu_shader4 : enable

uniform vec3 cellPos;
// new camera
uniform mat4 mv_inv;
uniform mat4 mv_inv_transp;
uniform mat4 mvp;
uniform mat4 mvp_inv;
uniform mat4 mvp_transp;
uniform vec4 light_dir;
uniform vec4 cam_pos;
// end new camera
void main(void) {
    vec4 inPos;
    if (gl_InstanceID == 0) {
        inPos = gl_Vertex;
    } else {
        inPos = vec4(cellPos + (cellPos - gl_Vertex.xyz), gl_Vertex.w);
    }
    gl_Position = mvp * inPos;
}
]]>
            </snippet>
        </shader>
    </namespace>

</btf>
