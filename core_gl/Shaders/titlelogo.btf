<?xml version="1.0" encoding="utf-8"?>
<btf type="MegaMolGLSLShader" version="1.0" namespace="titlelogo">

    <shader name="vertex">
        <snippet type="version">110</snippet>
        <snippet type="string">
            <![CDATA[
uniform vec4 viewAttr;

attribute vec4 inParams;
attribute vec4 quatC;
attribute vec3 inPos;

varying vec4 objPos;
varying vec4 camPos;
varying vec4 lightPos;

varying vec4 rotMatT0;
varying vec4 rotMatT1; // rotation matrix from the quaternion
varying vec4 rotMatT2;

varying vec4 params;

#define IN_LEFTSPHERE_RADIUS       gl_Vertex.w
#define IN_RIGHTSPHERE_RADIUS      params.x

#define OUT_LEFTSPHERE_RADIUS      rotMatT0.w
#define OUT_LEFTSPHERE_RADIUS_SQ   rotMatT1.w
#define OUT_RIGHTSPHERE_RADIUS_SQ  rotMatT2.w
#define OUT_CYLINDER_RADIUS_SQ     params.z

void main() {
    const vec4 quatConst = vec4(1.0, -1.0, 0.5, 0.0);
    vec4 tmp, tmp1;
    vec3 tmp2;

    float cylRad = inParams.z;

    // give fragment shader some information
    params = inParams;
    OUT_CYLINDER_RADIUS_SQ *= OUT_CYLINDER_RADIUS_SQ;
    OUT_LEFTSPHERE_RADIUS = IN_LEFTSPHERE_RADIUS;
    OUT_LEFTSPHERE_RADIUS_SQ = IN_LEFTSPHERE_RADIUS * IN_LEFTSPHERE_RADIUS;
    OUT_RIGHTSPHERE_RADIUS_SQ = IN_RIGHTSPHERE_RADIUS * IN_RIGHTSPHERE_RADIUS;

    // object pivot point in object space    
    objPos = vec4(inPos, 1.0); // no w-div needed, because w is 1.0 (Because I know)

    // orientation quaternion to inverse rotation matrix conversion
    // Begin: Holy code!
    tmp = quatC.xzyw * quatC.yxzw;				        // tmp <- (xy, xz, yz, ww)
    tmp1 = quatC * quatC.w;					            // tmp1 <- (xw, yw, zw, %)
    tmp1.w = -quatConst.z;				                // tmp1 <- (xw, yw, zw, -0.5)

    rotMatT0.xyz = tmp1.wzy * quatConst.xxy + tmp.wxy;	// matrix0 <- (ww-0.5, xy+zw, xz-yw, %)
    rotMatT0.x = quatC.x * quatC.x + rotMatT0.x;		// matrix0 <- (ww+x*x-0.5, xy+zw, xz-yw, %)
    rotMatT0.xyz = rotMatT0.xyz + rotMatT0.xyz;                     // matrix0 <- (2(ww+x*x)-1, 2(xy+zw), 2(xz-yw), %)

    rotMatT1.xyz = tmp1.zwx * quatConst.yxx + tmp.xwz; 	// matrix1 <- (xy-zw, ww-0.5, yz+xw, %)
    rotMatT1.y = quatC.y * quatC.y + rotMatT1.y;     	// matrix1 <- (xy-zw, ww+y*y-0.5, yz+xw, %)
    rotMatT1.xyz = rotMatT1.xyz + rotMatT1.xyz;                     // matrix1 <- (2(xy-zw), 2(ww+y*y)-1, 2(yz+xw), %)

    rotMatT2.xyz = tmp1.yxw * quatConst.xyx + tmp.yzw; 	// matrix2 <- (xz+yw, yz-xw, ww-0.5, %)
    rotMatT2.z = quatC.z * quatC.z + rotMatT2.z;     	// matrix2 <- (xz+yw, yz-xw, ww+zz-0.5, %)
    rotMatT2.xyz = rotMatT2.xyz + rotMatT2.xyz;                     // matrix2 <- (2(xz+yw), 2(yz-xw), 2(ww+zz)-1, %)    
    // End: Holy code!

    // calculate cam position
    tmp = gl_ModelViewMatrixInverse[3]; // (C) by Christoph
    tmp.xyz -= objPos.xyz; // cam move
    camPos.xyz = rotMatT0.xyz * tmp.x + rotMatT1.xyz * tmp.y + rotMatT2.xyz * tmp.z;

    // calculate light position in glyph space
    lightPos = gl_ModelViewMatrixInverse * gl_LightSource[0].position - objPos; // note: w is bullshit now!
    lightPos.xyz = rotMatT0.xyz * lightPos.x + rotMatT1.xyz * lightPos.y + rotMatT2.xyz * lightPos.z;

    // send color to fragment shader
    gl_FrontColor = gl_Color;

    gl_Position = gl_ModelViewProjectionMatrix * vec4(gl_Vertex.xyz, 1.0);
}
]]>
        </snippet>
    </shader>

    <snippet type="string" name="intersection">
        <![CDATA[
    const float maxLambda = 50000.0;

    // cylinder parameters
    float cylHalfLen = IN_CYLINDER_LENGTH * 0.5;
    float cylCenter = (IN_RIGHTSPHERE_RADIUS - IN_LEFTSPHERE_RADIUS) * 0.5;
    float cylMin = cylCenter - cylHalfLen;
    float cylMax = cylCenter + cylHalfLen;

    // spheres parameters
    vec3 ckLeft = -camPos.xyz - vec3(IN_SPHERE_DIST * 0.5, 0.0, 0.0);
    vec3 ckRight = -camPos.xyz + vec3(IN_SPHERE_DIST * 0.5, 0.0, 0.0);

    float rDc = dot(ray.yz, camPos.yz);
    float rDr = dot(ray.yz, ray.yz);

    vec2 d1 = vec2(dot(ckLeft, ray), dot(ckRight, ray));
    vec3 d2sq = vec3(dot(ckLeft, ckLeft), dot(ckRight, ckRight), rDr * (dot(camPos.yz, camPos.yz) - IN_CYLINDER_RADIUS_SQ)) - vec3(d1 * d1, 0.0);

    vec3 radicand = vec3(IN_LEFTSPHERE_RADIUS_SQ, IN_RIGHTSPHERE_RADIUS_SQ, rDc * rDc) - d2sq;

    if (all(lessThan(radicand, vec3(0.0)))) {
        return false;
    }

    vec3 radix = sqrt(radicand);
    vec4 lambdas = vec4(d1.xy - radix.xy, (-rDc - radix.z) / rDr, (-rDc + radix.z) / rDr);

    // skip lambdas of invalid radicands
    lambdas.x = (radicand.x <= 0.0) ? maxLambda : lambdas.x;
    lambdas.y = (radicand.y <= 0.0) ? maxLambda : lambdas.y;
    lambdas.z = (radicand.z <= 0.0) ? maxLambda : lambdas.z;

    // calculations for cylinder caps
    vec3 cylPt1 = camPos.xyz + ray * lambdas.z;
    vec3 cylPt2 = camPos.xyz + ray * lambdas.w;

    bool cylPt1Right = (cylPt1.x > cylCenter);
    bool cylPt1Valid = (cylPt1.x <= cylMax) && (cylPt1.x >= cylMin); // trim cylinder
    bool cylPt2Valid = cylPt1Right ? (cylPt2.x <= cylMax) : (cylPt2.x >= cylMin);

    lambdas.z = cylPt1Valid ? lambdas.z : (((cylPt1Right ? cylMax : cylMin) - camPos.x) / ray.x);
    lambdas.z = (cylPt1Valid || cylPt2Valid) ? lambdas.z : maxLambda;

    bool useCyl = min(lambdas.x, lambdas.y) > lambdas.z;

    float lambda = useCyl ? lambdas.z : min(lambdas.x, lambdas.y);

    if (lambda >= maxLambda) {
        return false;
    }
]]>
    </snippet>

    <shader name="fragment">
        <snippet type="version">110</snippet>
        <snippet type="string">
            <![CDATA[
#define CLIP
#define DEPTH

uniform vec4 viewAttr;

varying vec4 objPos;
varying vec4 camPos;
varying vec4 lightPos;

varying vec4 rotMatT0;
varying vec4 rotMatT1; // rotation matrix from the quaternion
varying vec4 rotMatT2;

varying vec4 params;

#define IN_SPHERE_DIST            params.y
#define IN_CYLINDER_RADIUS_SQ     params.z
#define IN_LEFTSPHERE_RADIUS      rotMatT0.w
#define IN_RIGHTSPHERE_RADIUS     params.x
#define IN_CYLINDER_LENGTH        params.w
#define IN_LEFTSPHERE_RADIUS_SQ   rotMatT1.w
#define IN_RIGHTSPHERE_RADIUS_SQ  rotMatT2.w
]]>
        </snippet>
        <snippet type="string">
            <![CDATA[
vec3 RaySetup(vec2 offset) {
    vec4 coord;
    vec3 ray;

    // transform fragment coordinates from window coordinates to view coordinates.
    coord = gl_FragCoord;
    coord.xy += offset;
    coord = coord
        * vec4(viewAttr.z, viewAttr.w, 2.0, 0.0)
        + vec4(-1.0, -1.0, -1.0, 1.0);

    // transform fragment coordinates from view coordinates to object coordinates.
    coord = gl_ModelViewProjectionMatrixInverse * coord;
    coord /= coord.w;
    coord -= objPos; // ... and move
    // ... and rotate mit rotMat transposed
    ray = rotMatT0.xyz * coord.x + rotMatT1.xyz * coord.y + rotMatT2.xyz * coord.z;

    // calc the viewing ray
    ray = normalize(ray - camPos.xyz);

    return ray;
}
]]>
        </snippet>
        <snippet type="string">
            <![CDATA[
bool Raycast(vec3 ray, out float depth, out vec3 normal, out vec3 color) {
]]>
        </snippet>
        <snippet name="::titlelogo::intersection" />
        <snippet type="string">
            <![CDATA[
    vec3 intersection = camPos.xyz + ray * lambda;

    vec3 sphereNormal = intersection - vec3(IN_SPHERE_DIST * ((lambdas.x < lambdas.y) ? -0.5 : 0.5), 0.0, 0.0);
    sphereNormal /= (lambdas.x < lambdas.y) ? IN_LEFTSPHERE_RADIUS : IN_RIGHTSPHERE_RADIUS;

    vec3 cylNormal = (cylPt1Valid ? vec3(0.0, normalize(intersection.yz)) : (cylPt1Right ? vec3(1.0, 0.0, 0.0) : vec3(-1.0, 0.0, 0.0)));

    color = useCyl ? (cylPt1Right ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0)) : gl_Color.rgb;
    normal = useCyl ? cylNormal : sphereNormal;

    // calculate depth
    vec3 tmp5 = intersection; // intersection in glyph space
    intersection.x = dot(rotMatT0.xyz, tmp5.xyz);
    intersection.y = dot(rotMatT1.xyz, tmp5.xyz);
    intersection.z = dot(rotMatT2.xyz, tmp5.xyz);
    intersection += objPos.xyz; // intersection in object space
    vec4 Ding = vec4(intersection, 1.0);
    float depthV = dot(gl_ModelViewProjectionMatrixTranspose[2], Ding);
    float depthW = dot(gl_ModelViewProjectionMatrixTranspose[3], Ding);
    depth = ((depthV / depthW) + 1.0) * 0.5;

    return true;
}
]]>
        </snippet>
        <snippet type="string">
            <![CDATA[
vec3 FancyLighting(vec3 normal, vec3 ray, vec3 color) {
    normal = normalize(normal);
    vec4 nn = vec4(normal, 1.0);
    nn = gl_ModelViewMatrixInverseTranspose * nn;
    vec3 worldNormal = nn.x * vec3(rotMatT0.x, rotMatT1.x, rotMatT2.x)
        + nn.y * vec3(rotMatT0.y, rotMatT1.y, rotMatT2.y)
        + nn.z * vec3(rotMatT0.z, rotMatT1.z, rotMatT2.z);
    float f;
    worldNormal.y += 0.20;
    f = abs(worldNormal.y);
    if (worldNormal.y < 0.0) {
        f *= dot(normal, -ray);
        f *= 2.0;
        f = pow(f, 3.0);
        f *= 1.0 - 0.8 * abs(worldNormal.z);
        f *= 5.0;
    } else {
        f = pow(max(f, 0.0), 1.4);
        f *= dot(normal, -ray);
        f *= 2.0;
        f *= 1.0 - 0.75 * abs(worldNormal.z);
    }
    vec3 lightDir = normalize(lightPos.xyz);
    vec4 lightparams = vec4(0.2, 0.8, 0.9, 5.0);
#define LIGHT_AMBIENT lightparams.x
#define LIGHT_DIFFUSE lightparams.y
#define LIGHT_SPECULAR lightparams.z
#define LIGHT_EXPONENT lightparams.w
    float nDOTl = dot(normal, lightDir);
    vec3 r = normalize(2.0 * vec3(nDOTl) * normal - lightDir);
    vec3 col = LIGHT_AMBIENT * color + LIGHT_DIFFUSE * color * max(nDOTl, 0.0);
    col *= 1.0 - 0.6 * abs(worldNormal.z);
    col += LIGHT_SPECULAR * vec3(pow(max(dot(r, -ray), 0.0), LIGHT_EXPONENT));
    col += color * f;

    return col;
}
]]>
        </snippet>
        <snippet type="string">
            <![CDATA[
#define OFFSET 0.35
void main(void) {
    vec2 offsets[9];
    float depth = 100.0;
    vec3 color = vec3(0.0, 0.0, 0.0);
    float alpha = 0.0;

    offsets[0] = vec2(0.0, 0.0);
    offsets[1] = vec2(-OFFSET, 0.0);
    offsets[2] = vec2(OFFSET, 0.0);
    offsets[3] = vec2(0.0, -OFFSET);
    offsets[4] = vec2(0.0, OFFSET);
    offsets[5] = vec2(OFFSET, -OFFSET);
    offsets[6] = vec2(OFFSET, OFFSET);
    offsets[7] = vec2(-OFFSET, -OFFSET);
    offsets[8] = vec2(-OFFSET, OFFSET);

    for (int i = 0; i < 9; i++) {
        vec3 r = RaySetup(offsets[i]);
        vec3 n;
        vec3 c;
        float d;
        if (Raycast(r, d, n, c)) {
            color += FancyLighting(n, r, c);
            alpha += 1.0;
            depth = min(depth, d);
        }
    }
    if (alpha < 0.1) {
        discard;
    }
    color /= alpha;
    alpha /= 9.0;

    gl_FragColor = vec4(color, alpha);
    gl_FragDepth = depth;
}
]]>
        </snippet>
    </shader>

</btf>