<?xml version="1.0" encoding="utf-8"?>
<btf type="MegaMolGLSLShader" version="1.0" namespace="bezier">

  <namespace name="common">

    <snippet name="stuff1" type="string">
      <![CDATA[
]]>
    </snippet>

  </namespace>

  <shader name="pointVert">
    <snippet type="version">120</snippet>
    <snippet type="string">
      <![CDATA[
uniform vec4 viewAttr;    /* (x, y, 2/w, 2/h) */
    ]]>
    </snippet>
    <snippet type="string">
      <![CDATA[
attribute vec4 pos2;
attribute vec4 pos3;
attribute vec4 pos4;
attribute vec3 col2;
attribute vec3 col3;
attribute vec3 col4;

#define POS1 gl_Vertex.xyz
#define RAD1 gl_Vertex.w
#define COL1 gl_Color.rgb
#define POS2 pos2.xyz
#define RAD2 pos2.w
#define COL2 col2.rgb
#define POS3 pos3.xyz
#define RAD3 pos3.w
#define COL3 col3.rgb
#define POS4 pos4.xyz
#define RAD4 pos4.w
#define COL4 col4.rgb
]]>
    </snippet>
    <snippet type="string">
      <![CDATA[
void main() {
  vec3 pmin, pmax;
]]>
    </snippet>
    <snippet name="lumberjack" type="string">
      <![CDATA[
  vec4 p;
  vec4 po = gl_ModelViewProjectionMatrix * vec4(0.0, 0.0, 0.0, 1.0);
  vec4 px = (gl_ModelViewProjectionMatrix * vec4(1.0, 0.0, 0.0, 1.0)) - po;
  vec4 py = (gl_ModelViewProjectionMatrix * vec4(0.0, 1.0, 0.0, 1.0)) - po;
  vec4 pz = (gl_ModelViewProjectionMatrix * vec4(0.0, 0.0, 1.0, 1.0)) - po;

  p = po + (px * (POS1.x - RAD1)) + (py * (POS1.y - RAD1)) + (pz * (POS1.z - RAD1));
  p /= p.w; pmin = pmax = p.xyz;
  p = po + (px * (POS1.x + RAD1)) + (py * (POS1.y - RAD1)) + (pz * (POS1.z - RAD1));
  p /= p.w; pmin = min(pmin, p.xyz); pmax = max(pmax, p.xyz);
  p = po + (px * (POS1.x - RAD1)) + (py * (POS1.y + RAD1)) + (pz * (POS1.z - RAD1));
  p /= p.w; pmin = min(pmin, p.xyz); pmax = max(pmax, p.xyz);
  p = po + (px * (POS1.x + RAD1)) + (py * (POS1.y + RAD1)) + (pz * (POS1.z - RAD1));
  p /= p.w; pmin = min(pmin, p.xyz); pmax = max(pmax, p.xyz);
  p = po + (px * (POS1.x - RAD1)) + (py * (POS1.y - RAD1)) + (pz * (POS1.z + RAD1));
  p /= p.w; pmin = min(pmin, p.xyz); pmax = max(pmax, p.xyz);
  p = po + (px * (POS1.x + RAD1)) + (py * (POS1.y - RAD1)) + (pz * (POS1.z + RAD1));
  p /= p.w; pmin = min(pmin, p.xyz); pmax = max(pmax, p.xyz);
  p = po + (px * (POS1.x - RAD1)) + (py * (POS1.y + RAD1)) + (pz * (POS1.z + RAD1));
  p /= p.w; pmin = min(pmin, p.xyz); pmax = max(pmax, p.xyz);
  p = po + (px * (POS1.x + RAD1)) + (py * (POS1.y + RAD1)) + (pz * (POS1.z + RAD1));
  p /= p.w; pmin = min(pmin, p.xyz); pmax = max(pmax, p.xyz);

  p = po + (px * (POS2.x - RAD2)) + (py * (POS2.y - RAD2)) + (pz * (POS2.z - RAD2));
  p /= p.w; pmin = min(pmin, p.xyz); pmax = max(pmax, p.xyz);
  p = po + (px * (POS2.x + RAD2)) + (py * (POS2.y - RAD2)) + (pz * (POS2.z - RAD2));
  p /= p.w; pmin = min(pmin, p.xyz); pmax = max(pmax, p.xyz);
  p = po + (px * (POS2.x - RAD2)) + (py * (POS2.y + RAD2)) + (pz * (POS2.z - RAD2));
  p /= p.w; pmin = min(pmin, p.xyz); pmax = max(pmax, p.xyz);
  p = po + (px * (POS2.x + RAD2)) + (py * (POS2.y + RAD2)) + (pz * (POS2.z - RAD2));
  p /= p.w; pmin = min(pmin, p.xyz); pmax = max(pmax, p.xyz);
  p = po + (px * (POS2.x - RAD2)) + (py * (POS2.y - RAD2)) + (pz * (POS2.z + RAD2));
  p /= p.w; pmin = min(pmin, p.xyz); pmax = max(pmax, p.xyz);
  p = po + (px * (POS2.x + RAD2)) + (py * (POS2.y - RAD2)) + (pz * (POS2.z + RAD2));
  p /= p.w; pmin = min(pmin, p.xyz); pmax = max(pmax, p.xyz);
  p = po + (px * (POS2.x - RAD2)) + (py * (POS2.y + RAD2)) + (pz * (POS2.z + RAD2));
  p /= p.w; pmin = min(pmin, p.xyz); pmax = max(pmax, p.xyz);
  p = po + (px * (POS2.x + RAD2)) + (py * (POS2.y + RAD2)) + (pz * (POS2.z + RAD2));
  p /= p.w; pmin = min(pmin, p.xyz); pmax = max(pmax, p.xyz);

  p = po + (px * (POS3.x - RAD3)) + (py * (POS3.y - RAD3)) + (pz * (POS3.z - RAD3));
  p /= p.w; pmin = min(pmin, p.xyz); pmax = max(pmax, p.xyz);
  p = po + (px * (POS3.x + RAD3)) + (py * (POS3.y - RAD3)) + (pz * (POS3.z - RAD3));
  p /= p.w; pmin = min(pmin, p.xyz); pmax = max(pmax, p.xyz);
  p = po + (px * (POS3.x - RAD3)) + (py * (POS3.y + RAD3)) + (pz * (POS3.z - RAD3));
  p /= p.w; pmin = min(pmin, p.xyz); pmax = max(pmax, p.xyz);
  p = po + (px * (POS3.x + RAD3)) + (py * (POS3.y + RAD3)) + (pz * (POS3.z - RAD3));
  p /= p.w; pmin = min(pmin, p.xyz); pmax = max(pmax, p.xyz);
  p = po + (px * (POS3.x - RAD3)) + (py * (POS3.y - RAD3)) + (pz * (POS3.z + RAD3));
  p /= p.w; pmin = min(pmin, p.xyz); pmax = max(pmax, p.xyz);
  p = po + (px * (POS3.x + RAD3)) + (py * (POS3.y - RAD3)) + (pz * (POS3.z + RAD3));
  p /= p.w; pmin = min(pmin, p.xyz); pmax = max(pmax, p.xyz);
  p = po + (px * (POS3.x - RAD3)) + (py * (POS3.y + RAD3)) + (pz * (POS3.z + RAD3));
  p /= p.w; pmin = min(pmin, p.xyz); pmax = max(pmax, p.xyz);
  p = po + (px * (POS3.x + RAD3)) + (py * (POS3.y + RAD3)) + (pz * (POS3.z + RAD3));
  p /= p.w; pmin = min(pmin, p.xyz); pmax = max(pmax, p.xyz);

  p = po + (px * (POS4.x - RAD4)) + (py * (POS4.y - RAD4)) + (pz * (POS4.z - RAD4));
  p /= p.w; pmin = min(pmin, p.xyz); pmax = max(pmax, p.xyz);
  p = po + (px * (POS4.x + RAD4)) + (py * (POS4.y - RAD4)) + (pz * (POS4.z - RAD4));
  p /= p.w; pmin = min(pmin, p.xyz); pmax = max(pmax, p.xyz);
  p = po + (px * (POS4.x - RAD4)) + (py * (POS4.y + RAD4)) + (pz * (POS4.z - RAD4));
  p /= p.w; pmin = min(pmin, p.xyz); pmax = max(pmax, p.xyz);
  p = po + (px * (POS4.x + RAD4)) + (py * (POS4.y + RAD4)) + (pz * (POS4.z - RAD4));
  p /= p.w; pmin = min(pmin, p.xyz); pmax = max(pmax, p.xyz);
  p = po + (px * (POS4.x - RAD4)) + (py * (POS4.y - RAD4)) + (pz * (POS4.z + RAD4));
  p /= p.w; pmin = min(pmin, p.xyz); pmax = max(pmax, p.xyz);
  p = po + (px * (POS4.x + RAD4)) + (py * (POS4.y - RAD4)) + (pz * (POS4.z + RAD4));
  p /= p.w; pmin = min(pmin, p.xyz); pmax = max(pmax, p.xyz);
  p = po + (px * (POS4.x - RAD4)) + (py * (POS4.y + RAD4)) + (pz * (POS4.z + RAD4));
  p /= p.w; pmin = min(pmin, p.xyz); pmax = max(pmax, p.xyz);
  p = po + (px * (POS4.x + RAD4)) + (py * (POS4.y + RAD4)) + (pz * (POS4.z + RAD4));
  p /= p.w; pmin = min(pmin, p.xyz); pmax = max(pmax, p.xyz);
]]>
    </snippet>
    <snippet type="string">
      <![CDATA[
  gl_Position = vec4(0.5 * (pmin + pmax), 1.0);
  pmax = pmax - pmin;
  pmax.xy /= viewAttr.zw;
  gl_PointSize = max(pmax.x, pmax.y);
}
]]>
    </snippet>
  </shader>

</btf>